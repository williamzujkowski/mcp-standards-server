name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  REDIS_VERSION: '7'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
      
      - name: Run Ruff
        run: ruff check .
        continue-on-error: true
      
      - name: Run Black
        run: black --check .
        continue-on-error: true
      
      - name: Run isort
        run: isort --check-only .
        continue-on-error: true
      
      - name: Run mypy
        run: mypy src/
        continue-on-error: true

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        env:
          CHROMA_SERVER_AUTH_PROVIDER: token
          CHROMA_SERVER_AUTH_TOKEN: test-token
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
      
      - name: Download NLTK data
        run: |
          python -c "import nltk; nltk.download('punkt_tab'); nltk.download('stopwords')"
      
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379/0
          CHROMADB_URL: http://localhost:8000
          LOG_LEVEL: DEBUG
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
      
      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379/0
          CHROMADB_URL: http://localhost:8000
          LOG_LEVEL: DEBUG
        run: |
          pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/web
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
        continue-on-error: true
      
      - name: Run type check
        run: npm run type-check
        continue-on-error: true
      
      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true
      
      - name: Build frontend
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
      
      - name: Run Bandit
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Run Safety
        run: safety check --json
        continue-on-error: true
      
      - name: Run pip-audit
        run: pip-audit
        continue-on-error: true
      
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            bandit-report.json

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: mcp-standards-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mcp-standards-server:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'