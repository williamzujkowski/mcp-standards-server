name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_DEFAULT: "3.11"
  REDIS_VERSION: "7.2"
  NODE_VERSION: "18"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run Ruff
        run: ruff check src tests
      
      - name: Run Black
        run: black --check src tests
      
      - name: Run mypy
        run: mypy src
      
      - name: Check YAML files
        timeout-minutes: 5
        run: |
          pip install yamllint
          if ! yamllint -c .yamllint.yml .; then
            echo "⚠️ YAML linting issues found. Please fix before merging."
            yamllint -c .yamllint.yml . || true
            exit 1
          fi
          echo "✅ All YAML files are valid"

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12"]
        exclude:
          # Only test Windows with Python 3.12 to save CI resources
          - os: windows-latest
            python-version: "3.11"
    
    services:
      redis:
        # Only run Redis service on Linux runners
        image: ${{ runner.os == 'Linux' && 'redis:7.2-alpine' || '' }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install dependencies
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Download NLTK data
        run: |
          python -c "import nltk; nltk.download('punkt_tab'); nltk.download('stopwords')"
      
      - name: Run unit tests
        timeout-minutes: 15
        env:
          REDIS_URL: ${{ runner.os == 'Linux' && 'redis://localhost:6379' || '' }}
          MCP_TEST_MODE: "true"
        run: |
          pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing
      
      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest'  # Only run on Ubuntu to save time
        timeout-minutes: 20
        env:
          REDIS_URL: redis://localhost:6379
          MCP_TEST_MODE: "true"
        run: |
          pytest tests/integration -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION_DEFAULT
        timeout-minutes: 10
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-e2e-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-e2e-
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Install frontend dependencies
        working-directory: web/frontend
        timeout-minutes: 10
        run: npm ci
      
      - name: Build frontend
        working-directory: web/frontend
        timeout-minutes: 10
        run: npm run build
      
      - name: Run E2E tests
        timeout-minutes: 20
        env:
          REDIS_URL: redis://localhost:6379
          MCP_TEST_MODE: "true"
        run: |
          # Start the server in background
          python -m src.mcp_server &
          SERVER_PID=$!
          
          # Wait for server to be ready
          sleep 10
          
          # Run E2E tests
          pytest tests/e2e -v --timeout=300
          
          # Stop the server
          kill $SERVER_PID || true
      
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-artifacts
          path: |
            tests/e2e/screenshots/
            tests/e2e/logs/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      
      - name: Install build tools
        timeout-minutes: 5
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
      
      - name: Build distribution
        timeout-minutes: 10
        run: python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
          ls -la dist/
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/
          retention-days: 7

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        timeout-minutes: 15
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            mcp-standards-server:latest
            mcp-standards-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm mcp-standards-server:latest python -m src.cli --version || echo "No version command"
          docker run --rm mcp-standards-server:latest python -c "import src; print('Import successful')"

  check-standards:
    name: Validate Standards
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      
      - name: Install dependencies
        timeout-minutes: 10
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyyaml jsonschema
      
      - name: Validate standards files
        timeout-minutes: 5
        run: |
          python scripts/validate_ecosystem.py
      
      - name: Check standards consistency
        timeout-minutes: 5
        run: |
          # Check that all .yaml files have corresponding .md files
          # Skip configuration files
          for yaml_file in data/standards/*.yaml; do
            if [ -f "$yaml_file" ]; then
              base_name=$(basename "$yaml_file" .yaml)
              # Skip configuration files
              if [ "$base_name" = "sync_config" ]; then
                continue
              fi
              md_file="data/standards/${base_name}.md"
              if [ ! -f "$md_file" ]; then
                echo "Missing markdown file for $yaml_file"
                exit 1
              fi
            fi
          done

  all-checks-pass:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [lint, test, test-e2e, build, docker, check-standards]
    if: always()
    
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.test-e2e.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.docker.result }}" != "success" ] || \
             [ "${{ needs.check-standards.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully"