name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run:  < /dev/null | 
        source .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install build twine
        
    - name: Build package
      run: |
        source .venv/bin/activate
        python -m build
        
    - name: Generate OSCAL SSP
      run: |
        source .venv/bin/activate
        mcp-standards ssp --output ssp-release.json --format oscal
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          ssp-release.json
          ssp-release.json.sha256
        body: |
          ## MCP Standards Server Release
          
          This release includes:
          - Full NIST 800-53r5 compliance support
          - Multi-language code analysis (Python, JavaScript, Go, Java)
          - OSCAL SSP generation
          - MCP protocol implementation
          
          ### Installation
          ```bash
          pip install mcp-standards-server
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/williamzujkowski/mcp-standards-server:${{ github.ref_name }}
          ```
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        source .venv/bin/activate
        twine upload dist/*
        
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
