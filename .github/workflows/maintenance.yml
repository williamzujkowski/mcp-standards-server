name: Maintenance

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  stale-issues:
    name: Close Stale Issues and PRs
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          
          # Issues
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had recent activity. 
            It will be closed if no further activity occurs within 7 days.
            Thank you for your contributions.
          close-issue-message: |
            This issue has been automatically closed due to inactivity.
            Please feel free to reopen if the issue is still relevant.
          days-before-issue-stale: 30
          days-before-issue-close: 7
          stale-issue-label: 'stale'
          exempt-issue-labels: 'pinned,security,bug,enhancement'
          
          # PRs
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had recent activity.
            It will be closed if no further activity occurs within 14 days.
            Thank you for your contributions.
          close-pr-message: |
            This pull request has been automatically closed due to inactivity.
            Please feel free to reopen if you'd like to continue working on it.
          days-before-pr-stale: 45
          days-before-pr-close: 14
          stale-pr-label: 'stale'
          exempt-pr-labels: 'pinned,security'

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const days = 30;
            const ms_per_day = 86400000;
            const now = Date.now();
            const cutoff = now - (days * ms_per_day);
            
            const repos = await github.rest.repos.listForAuthenticatedUser({
              per_page: 100,
            });
            
            for (const repo of repos.data) {
              if (repo.owner.login === context.repo.owner && repo.name === context.repo.repo) {
                console.log(`Processing artifacts for ${repo.name}`);
                
                const artifacts = await github.paginate(
                  github.rest.actions.listArtifactsForRepo,
                  {
                    owner: repo.owner.login,
                    repo: repo.name,
                    per_page: 100,
                  }
                );
                
                let deleted = 0;
                for (const artifact of artifacts) {
                  if (Date.parse(artifact.created_at) < cutoff) {
                    await github.rest.actions.deleteArtifact({
                      owner: repo.owner.login,
                      repo: repo.name,
                      artifact_id: artifact.id,
                    });
                    deleted++;
                  }
                }
                
                console.log(`Deleted ${deleted} artifacts older than ${days} days`);
              }
            }

  cleanup-caches:
    name: Cleanup Unused Caches
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup caches
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all caches
            const caches = await github.paginate(
              github.rest.actions.getActionsCacheList,
              {
                owner,
                repo,
                per_page: 100,
              }
            );
            
            // Group caches by key prefix
            const cacheGroups = {};
            for (const cache of caches) {
              const keyPrefix = cache.key.split('-')[0];
              if (!cacheGroups[keyPrefix]) {
                cacheGroups[keyPrefix] = [];
              }
              cacheGroups[keyPrefix].push(cache);
            }
            
            // Keep only the most recent cache for each prefix
            let deleted = 0;
            for (const [prefix, group] of Object.entries(cacheGroups)) {
              // Sort by last accessed time
              group.sort((a, b) => new Date(b.last_accessed_at) - new Date(a.last_accessed_at));
              
              // Delete all but the most recent
              for (let i = 1; i < group.length; i++) {
                await github.rest.actions.deleteActionsCacheById({
                  owner,
                  repo,
                  cache_id: group[i].id,
                });
                deleted++;
              }
            }
            
            console.log(`Deleted ${deleted} old cache entries`);

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Update pip dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-review
          
          # Check for outdated packages
          echo "## Outdated Dependencies" >> outdated-deps.md
          pip list --outdated >> outdated-deps.md || echo "No outdated dependencies found" >> outdated-deps.md
      
      - name: Create issue for outdated dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdatedDeps = fs.readFileSync('outdated-deps.md', 'utf8');
            
            if (!outdatedDeps.includes('No outdated dependencies found')) {
              // Check if issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'dependencies,maintenance',
                state: 'open'
              });
              
              const existingIssue = issues.data.find(issue => 
                issue.title.includes('Weekly Dependency Update Report')
              );
              
              const body = `${outdatedDeps}\n\n---\n\nThis is an automated report generated by the maintenance workflow.`;
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Weekly Dependency Update Report - ${new Date().toISOString().split('T')[0]}`,
                  body: body,
                  labels: ['dependencies', 'maintenance']
                });
              }
            }

  security-audit:
    name: Weekly Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Run security audit
        run: |
          echo "## Weekly Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "Date: $(date -u +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # This will trigger the security workflow
          echo "Security audit triggered. Check the Security workflow for detailed results." >> $GITHUB_STEP_SUMMARY
      
      - name: Trigger security workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'security.yml',
              ref: 'main'
            });