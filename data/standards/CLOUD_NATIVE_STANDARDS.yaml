name: Docs/Standards/Cloud Native Standards
category: cloud
filename: docs/standards/CLOUD_NATIVE_STANDARDS.md
nist_controls: []
sections:
  Cloud-Native and Container Standards: '**Version:** 1.0.0

    **Last Updated:** January 2025

    **Status:** Active

    **Standard Code:** CN


    ---


    **Version:** 1.0.0

    **Last Updated:** January 2025

    **Status:** Active'
  Table of Contents: '1. [Container Standards](#1-container-standards)

    2. [Kubernetes Standards](#2-kubernetes-standards)

    3. [Infrastructure as Code](#3-infrastructure-as-code)

    4. [Serverless Architecture](#4-serverless-architecture)

    5. [Service Mesh](#5-service-mesh)

    6. [Cloud Provider Standards](#6-cloud-provider-standards)

    7. [Cloud-Native Security](#7-cloud-native-security)

    8. [Monitoring and Observability](#8-monitoring-and-observability)


    ---'
  Overview: 'This standard provides comprehensive guidelines and best practices for
    the subject area.

    It aims to ensure consistency, quality, and maintainability across all related
    implementations.'
  1. Container Standards: '### 1.1 Docker Best Practices


    #### Image Building **[REQUIRED]**


    ##### Multi-Stage Builds

    ```dockerfile'
  Build stage: 'FROM node:18-alpine AS builder

    WORKDIR /app

    COPY package*.json ./

    RUN npm ci --only=production'
  Runtime stage: "FROM node:18-alpine\nWORKDIR /app\nCOPY --from=builder /app/node_modules\
    \ ./node_modules\nCOPY . .\nUSER node\nEXPOSE 3000\nCMD [\"node\", \"server.js\"\
    ]\n```\n\n##### Image Optimization Rules\n1. **Base Image Selection**\n   - Use\
    \ official images\n   - Prefer Alpine or distroless\n   - Specify exact versions\n\
    \   - Scan for vulnerabilities\n\n2. **Layer Optimization**\n   - Combine RUN\
    \ commands\n   - Order from least to most changing\n   - Clean up in same layer\n\
    \   - Use .dockerignore\n\n3. **Security Hardening**\n   - Run as non-root user\n\
    \   - Remove unnecessary packages\n   - No secrets in images\n   - Sign images\n\
    \n#### Container Configuration **[REQUIRED]**\n\n##### Resource Limits\n```yaml\n\
    resources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"250m\"\n  limits:\n\
    \    memory: \"512Mi\"\n    cpu: \"500m\"\n```\n\n##### Health Checks\n```dockerfile\n\
    HEALTHCHECK --interval=30s --timeout=3s --retries=3 \\\n  CMD curl -f http://localhost:3000/health\
    \ || exit 1\n```\n\n### 1.2 Container Registry Standards\n\n#### Registry Management\
    \ **[REQUIRED]**\n1. **Image Naming**\n   ```\n   registry.example.com/namespace/app-name:version\n\
    \   ```\n\n2. **Tagging Strategy**\n   - Semantic versioning for releases\n  \
    \ - Git SHA for builds\n   - Environment tags (dev, staging, prod)\n   - Never\
    \ use 'latest' in production\n\n3. **Retention Policy**\n   - Keep last 10 versions\n\
    \   - Archive after 90 days\n   - Delete untagged after 7 days\n\n#### Security\
    \ Scanning **[REQUIRED]**\n- Scan on push\n- Block critical vulnerabilities\n\
    - Daily scans of production images\n- SBOM generation\n\n---"
  2. Kubernetes Standards: "### 2.1 Resource Management\n\n#### Namespace Strategy\
    \ **[REQUIRED]**\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name:\
    \ app-production\n  labels:\n    environment: production\n    team: platform\n\
    \  annotations:\n    contact: platform@example.com\n```\n\n##### Namespace Patterns\n\
    - Environment-based: `app-dev`, `app-staging`, `app-prod`\n- Team-based: `team-frontend`,\
    \ `team-backend`\n- Feature-based: `feature-x-preview`\n\n#### Resource Quotas\
    \ **[REQUIRED]**\n```yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name:\
    \ compute-quota\nspec:\n  hard:\n    requests.cpu: \"100\"\n    requests.memory:\
    \ \"100Gi\"\n    limits.cpu: \"200\"\n    limits.memory: \"200Gi\"\n    persistentvolumeclaims:\
    \ \"10\"\n```\n\n### 2.2 Workload Standards\n\n#### Deployment Configuration **[REQUIRED]**\n\
    ```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n\
    \    app: myapp\n    version: v1.0.0\nspec:\n  replicas: 3\n  strategy:\n    type:\
    \ RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable:\
    \ 0\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n\
    \      labels:\n        app: myapp\n        version: v1.0.0\n    spec:\n     \
    \ containers:\n      - name: app\n        image: registry/myapp:v1.0.0\n     \
    \   ports:\n        - containerPort: 8080\n        livenessProbe:\n          httpGet:\n\
    \            path: /health\n            port: 8080\n          initialDelaySeconds:\
    \ 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n\
    \            path: /ready\n            port: 8080\n          initialDelaySeconds:\
    \ 5\n          periodSeconds: 5\n        resources:\n          requests:\n   \
    \         memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n  \
    \          memory: \"256Mi\"\n            cpu: \"200m\"\n        securityContext:\n\
    \          runAsNonRoot: true\n          readOnlyRootFilesystem: true\n      \
    \    capabilities:\n            drop:\n            - ALL\n```\n\n#### Pod Standards\
    \ **[REQUIRED]**\n1. **Labels**\n   - `app`: Application name\n   - `version`:\
    \ Application version\n   - `component`: Component type\n   - `managed-by`: Deployment\
    \ tool\n\n2. **Probes**\n   - Always define liveness probe\n   - Always define\
    \ readiness probe\n   - Startup probe for slow-starting apps\n   - Appropriate\
    \ timeouts and thresholds\n\n3. **Security Context**\n   - Run as non-root\n \
    \  - Read-only root filesystem\n   - Drop all capabilities\n   - Use Pod Security\
    \ Standards\n\n### 2.3 Service Standards\n\n#### Service Types **[REQUIRED]**\n\
    ```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-service\nspec:\n\
    \  type: ClusterIP  # Default for internal\n  selector:\n    app: myapp\n  ports:\n\
    \  - protocol: TCP\n    port: 80\n    targetPort: 8080\n```\n\n#### Ingress Configuration\
    \ **[REQUIRED]**\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n\
    \  name: app-ingress\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n\
    \    nginx.ingress.kubernetes.io/rate-limit: \"100\"\nspec:\n  tls:\n  - hosts:\n\
    \    - app.example.com\n    secretName: app-tls\n  rules:\n  - host: app.example.com\n\
    \    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n\
    \          service:\n            name: app-service\n            port:\n      \
    \        number: 80\n```\n\n### 2.4 Configuration Management\n\n#### ConfigMaps\
    \ and Secrets **[REQUIRED]**\n```yaml"
  ConfigMap for non-sensitive data: "apiVersion: v1\nkind: ConfigMap\nmetadata:\n\
    \  name: app-config\ndata:\n  app.properties: |\n    server.port=8080\n    log.level=info\n\
    \n---"
  Secret for sensitive data: "apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\n\
    type: Opaque\nstringData:\n  database-url: postgresql://user:pass@db:5432/myapp\n\
    ```\n\n##### Best Practices\n1. **Separation of Concerns**\n   - ConfigMaps for\
    \ configuration\n   - Secrets for sensitive data\n   - Never commit secrets to\
    \ Git\n\n2. **Secret Management**\n   - Use external secret managers\n   - Rotate\
    \ secrets regularly\n   - Encrypt secrets at rest\n   - Audit secret access\n\n\
    ### 2.5 RBAC Standards\n\n#### Service Account Configuration **[REQUIRED]**\n\
    ```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-sa\n  namespace:\
    \ app-production\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\n\
    metadata:\n  name: app-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"\
    , \"services\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\n\
    kind: RoleBinding\nmetadata:\n  name: app-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n\
    \  kind: Role\n  name: app-role\nsubjects:\n- kind: ServiceAccount\n  name: app-sa\n\
    ```\n\n---"
  3. Infrastructure as Code: "### 3.1 Terraform Standards\n\n#### Project Structure\
    \ **[REQUIRED]**\n```\nterraform/\n\u251C\u2500\u2500 environments/\n\u2502  \
    \ \u251C\u2500\u2500 dev/\n\u2502   \u2502   \u251C\u2500\u2500 main.tf\n\u2502\
    \   \u2502   \u251C\u2500\u2500 variables.tf\n\u2502   \u2502   \u2514\u2500\u2500\
    \ terraform.tfvars\n\u2502   \u251C\u2500\u2500 staging/\n\u2502   \u2514\u2500\
    \u2500 production/\n\u251C\u2500\u2500 modules/\n\u2502   \u251C\u2500\u2500 networking/\n\
    \u2502   \u251C\u2500\u2500 compute/\n\u2502   \u2514\u2500\u2500 database/\n\u2514\
    \u2500\u2500 global/\n    \u251C\u2500\u2500 providers.tf\n    \u2514\u2500\u2500\
    \ versions.tf\n```\n\n#### Coding Standards **[REQUIRED]**\n```hcl"
  Resource naming convention: "resource \"aws_instance\" \"web_server\" {\n  # Use\
    \ data sources for AMIs\n  ami           = data.aws_ami.ubuntu.id\n  instance_type\
    \ = var.instance_type\n\n  # Always tag resources\n  tags = merge(\n    var.common_tags,\n\
    \    {\n      Name        = \"${var.environment}-web-server\"\n      Environment\
    \ = var.environment\n      ManagedBy   = \"terraform\"\n    }\n  )\n\n  # Lifecycle\
    \ rules\n  lifecycle {\n    create_before_destroy = true\n    prevent_destroy\
    \       = var.environment == \"production\"\n  }\n}"
  Variable validation: "variable \"instance_type\" {\n  description = \"EC2 instance\
    \ type\"\n  type        = string\n  default     = \"t3.micro\"\n\n  validation\
    \ {\n    condition     = contains([\"t3.micro\", \"t3.small\", \"t3.medium\"],\
    \ var.instance_type)\n    error_message = \"Instance type must be t3.micro, t3.small,\
    \ or t3.medium.\"\n  }\n}\n```\n\n#### State Management **[REQUIRED]**\n```hcl\n\
    terraform {\n  backend \"s3\" {\n    bucket         = \"company-terraform-state\"\
    \n    key            = \"env/production/terraform.tfstate\"\n    region      \
    \   = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"terraform-state-lock\"\
    \n  }\n}\n```\n\n### 3.2 GitOps Standards\n\n#### Repository Structure **[REQUIRED]**\n\
    ```\ngitops-repo/\n\u251C\u2500\u2500 apps/\n\u2502   \u251C\u2500\u2500 base/\n\
    \u2502   \u2502   \u251C\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u251C\
    \u2500\u2500 service.yaml\n\u2502   \u2502   \u2514\u2500\u2500 kustomization.yaml\n\
    \u2502   \u2514\u2500\u2500 overlays/\n\u2502       \u251C\u2500\u2500 dev/\n\u2502\
    \       \u251C\u2500\u2500 staging/\n\u2502       \u2514\u2500\u2500 production/\n\
    \u251C\u2500\u2500 infrastructure/\n\u2502   \u251C\u2500\u2500 cert-manager/\n\
    \u2502   \u251C\u2500\u2500 ingress-nginx/\n\u2502   \u2514\u2500\u2500 monitoring/\n\
    \u2514\u2500\u2500 clusters/\n    \u251C\u2500\u2500 dev/\n    \u251C\u2500\u2500\
    \ staging/\n    \u2514\u2500\u2500 production/\n```\n\n#### ArgoCD Application\
    \ **[REQUIRED]**\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\n\
    metadata:\n  name: myapp\n  namespace: argocd\nspec:\n  project: default\n  source:\n\
    \    repoURL: https://github.com/company/gitops\n    targetRevision: HEAD\n  \
    \  path: apps/overlays/production\n  destination:\n    server: https://kubernetes.default.svc\n\
    \    namespace: myapp-production\n  syncPolicy:\n    automated:\n      prune:\
    \ true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n```\n\
    \n### 3.3 CI/CD Pipeline Standards\n\n#### Pipeline Stages **[REQUIRED]**\n```yaml"
  .gitlab-ci.yml or similar: "stages:\n  - validate\n  - build\n  - test\n  - scan\n\
    \  - deploy\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check\n\
    \    - terraform validate\n    - tflint\n    - checkov -d .\n\nbuild:\n  stage:\
    \ build\n  script:\n    - docker build -t $IMAGE_TAG .\n    - docker push $IMAGE_TAG\n\
    \nsecurity-scan:\n  stage: scan\n  script:\n    - trivy image $IMAGE_TAG\n   \
    \ - grype image $IMAGE_TAG\n    - docker scout cves $IMAGE_TAG\n```\n\n---"
  4. Serverless Architecture: "### 4.1 Function Standards\n\n#### Function Design\
    \ **[REQUIRED]**\n```javascript\n// AWS Lambda example\nexports.handler = async\
    \ (event, context) => {\n  // Initialize outside handler for connection reuse\n\
    \  const db = await getDBConnection();\n\n  try {\n    // Input validation\n \
    \   const input = validateInput(event);\n\n    // Business logic\n    const result\
    \ = await processRequest(input, db);\n\n    // Structured response\n    return\
    \ {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n\
    \        'X-Request-ID': context.requestId\n      },\n      body: JSON.stringify(result)\n\
    \    };\n  } catch (error) {\n    // Structured error handling\n    logger.error('Handler\
    \ error', {\n      error: error.message,\n      stack: error.stack,\n      requestId:\
    \ context.requestId\n    });\n\n    return {\n      statusCode: error.statusCode\
    \ || 500,\n      body: JSON.stringify({\n        error: error.message,\n     \
    \   requestId: context.requestId\n      })\n    };\n  }\n};\n```\n\n#### Configuration\
    \ Standards **[REQUIRED]**\n```yaml"
  serverless.yml: "service: myapp\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n\
    \  memorySize: 256\n  timeout: 30\n  environment:\n    NODE_ENV: ${opt:stage}\n\
    \  tracing:\n    lambda: true\n  logs:\n    restApi: true\n\nfunctions:\n  api:\n\
    \    handler: src/handler.main\n    events:\n      - http:\n          path: /{proxy+}\n\
    \          method: ANY\n          cors: true\n    environment:\n      DB_CONNECTION:\
    \ ${ssm:/myapp/${opt:stage}/db-connection}\n    vpc:\n      securityGroupIds:\n\
    \        - ${ssm:/myapp/${opt:stage}/sg-id}\n      subnetIds:\n        - ${ssm:/myapp/${opt:stage}/subnet-1}\n\
    \        - ${ssm:/myapp/${opt:stage}/subnet-2}\n```\n\n### 4.2 Event-Driven Patterns\n\
    \n#### Event Bridge Standards **[REQUIRED]**\n```json\n{\n  \"version\": \"0\"\
    ,\n  \"id\": \"6a7e8feb-b491-4cf7-a9f1-bf3703467718\",\n  \"detail-type\": \"\
    Order Placed\",\n  \"source\": \"com.company.orders\",\n  \"account\": \"111122223333\"\
    ,\n  \"time\": \"2023-10-12T15:30:00Z\",\n  \"region\": \"us-east-1\",\n  \"detail\"\
    : {\n    \"orderId\": \"12345\",\n    \"customerId\": \"67890\",\n    \"amount\"\
    : 99.99,\n    \"currency\": \"USD\",\n    \"items\": [\n      {\n        \"sku\"\
    : \"ITEM-001\",\n        \"quantity\": 2,\n        \"price\": 49.99\n      }\n\
    \    ]\n  }\n}\n```\n\n#### Message Queue Standards **[REQUIRED]**\n```javascript\n\
    // SQS Message Handler\nconst processMessage = async (message) => {\n  const startTime\
    \ = Date.now();\n  const { Body, MessageId, Attributes } = message;\n\n  try {\n\
    \    // Parse and validate message\n    const data = JSON.parse(Body);\n    await\
    \ validateMessage(data);\n\n    // Process with idempotency\n    const result\
    \ = await processWithIdempotency(MessageId, data);\n\n    // Delete message on\
    \ success\n    await sqs.deleteMessage({\n      QueueUrl: process.env.QUEUE_URL,\n\
    \      ReceiptHandle: message.ReceiptHandle\n    }).promise();\n\n    // Emit\
    \ metrics\n    metrics.recordSuccess(Date.now() - startTime);\n\n  } catch (error)\
    \ {\n    // Handle poison messages\n    const receiveCount = parseInt(Attributes.ApproximateReceiveCount);\n\
    \    if (receiveCount > MAX_RETRIES) {\n      await moveToDeadLetterQueue(message);\n\
    \    }\n    throw error;\n  }\n};\n```\n\n---"
  5. Service Mesh: '### 5.1 Istio Standards


    #### Service Mesh Configuration **[REQUIRED]**

    ```yaml'
  VirtualService: "apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n\
    metadata:\n  name: myapp\nspec:\n  hosts:\n  - myapp\n  http:\n  - match:\n  \
    \  - headers:\n        version:\n          exact: v2\n    route:\n    - destination:\n\
    \        host: myapp\n        subset: v2\n  - route:\n    - destination:\n   \
    \     host: myapp\n        subset: v1\n      weight: 90\n    - destination:\n\
    \        host: myapp\n        subset: v2\n      weight: 10\n\n---"
  DestinationRule: "apiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\n\
    metadata:\n  name: myapp\nspec:\n  host: myapp\n  trafficPolicy:\n    connectionPool:\n\
    \      tcp:\n        maxConnections: 100\n      http:\n        http1MaxPendingRequests:\
    \ 50\n        http2MaxRequests: 100\n    loadBalancer:\n      simple: LEAST_CONN\n\
    \  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n\
    \      version: v2\n```\n\n#### Traffic Management **[REQUIRED]**\n```yaml"
  Circuit Breaker: "apiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\n\
    metadata:\n  name: myapp-circuit-breaker\nspec:\n  host: myapp\n  trafficPolicy:\n\
    \    outlierDetection:\n      consecutive5xxErrors: 5\n      interval: 30s\n \
    \     baseEjectionTime: 30s\n      maxEjectionPercent: 50\n      minHealthPercent:\
    \ 50\n```\n\n### 5.2 Security Policies\n\n#### mTLS Configuration **[REQUIRED]**\n\
    ```yaml\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n\
    \  name: default\n  namespace: production\nspec:\n  mtls:\n    mode: STRICT\n\n\
    ---\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n\
    \  name: myapp-authz\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n\
    \  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/production/sa/frontend\"\
    ]\n    to:\n    - operation:\n        methods: [\"GET\", \"POST\"]\n        paths:\
    \ [\"/api/*\"]\n```\n\n---"
  6. Cloud Provider Standards: "### 6.1 AWS Standards\n\n#### Resource Tagging **[REQUIRED]**\n\
    ```json\n{\n  \"Tags\": [\n    {\"Key\": \"Environment\", \"Value\": \"production\"\
    },\n    {\"Key\": \"Application\", \"Value\": \"myapp\"},\n    {\"Key\": \"Team\"\
    , \"Value\": \"platform\"},\n    {\"Key\": \"CostCenter\", \"Value\": \"engineering\"\
    },\n    {\"Key\": \"ManagedBy\", \"Value\": \"terraform\"},\n    {\"Key\": \"\
    Owner\", \"Value\": \"platform@example.com\"},\n    {\"Key\": \"DataClassification\"\
    , \"Value\": \"internal\"}\n  ]\n}\n```\n\n#### IAM Best Practices **[REQUIRED]**\n\
    ```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"\
    Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\
    \n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n#####\
    \ Least Privilege Policy\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\"\
    : [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\"\
    \n      ],\n      \"Resource\": \"arn:aws:s3:::my-bucket/data/*\",\n      \"Condition\"\
    : {\n        \"StringEquals\": {\n          \"s3:ExistingObjectTag/Environment\"\
    : \"production\"\n        }\n      }\n    }\n  ]\n}\n```\n\n### 6.2 Azure Standards\n\
    \n#### Resource Groups **[REQUIRED]**\n```bash"
  Naming convention: rg-<app>-<environment>-<region>-<instance>
  Example: "rg-myapp-prod-eastus-001\n```\n\n#### Azure Policy **[REQUIRED]**\n```json\n\
    {\n  \"properties\": {\n    \"displayName\": \"Require tag on resources\",\n \
    \   \"policyType\": \"Custom\",\n    \"mode\": \"Indexed\",\n    \"parameters\"\
    : {\n      \"tagName\": {\n        \"type\": \"String\",\n        \"metadata\"\
    : {\n          \"displayName\": \"Tag Name\",\n          \"description\": \"Name\
    \ of the tag, such as 'environment'\"\n        }\n      }\n    },\n    \"policyRule\"\
    : {\n      \"if\": {\n        \"field\": \"[concat('tags[', parameters('tagName'),\
    \ ']')]\",\n        \"exists\": \"false\"\n      },\n      \"then\": {\n     \
    \   \"effect\": \"deny\"\n      }\n    }\n  }\n}\n```\n\n### 6.3 GCP Standards\n\
    \n#### Project Structure **[REQUIRED]**\n```\nOrganization\n\u251C\u2500\u2500\
    \ Folders\n\u2502   \u251C\u2500\u2500 Production\n\u2502   \u2502   \u2514\u2500\
    \u2500 Projects\n\u2502   \u2502       \u251C\u2500\u2500 prod-app-compute\n\u2502\
    \   \u2502       \u251C\u2500\u2500 prod-app-data\n\u2502   \u2502       \u2514\
    \u2500\u2500 prod-app-network\n\u2502   \u2514\u2500\u2500 Non-Production\n\u2502\
    \       \u2514\u2500\u2500 Projects\n\u2502           \u251C\u2500\u2500 dev-app-sandbox\n\
    \u2502           \u2514\u2500\u2500 staging-app-test\n```\n\n#### IAM Bindings\
    \ **[REQUIRED]**\n```yaml"
  Terraform example: "resource \"google_project_iam_binding\" \"app_developers\" {\n\
    \  project = google_project.app.project_id\n  role    = \"roles/container.developer\"\
    \n\n  members = [\n    \"group:developers@example.com\",\n  ]\n\n  condition {\n\
    \    title       = \"Only during business hours\"\n    description = \"Access\
    \ only during business hours\"\n    expression  = \"request.time.getHours('America/New_York')\
    \ >= 9 && request.time.getHours('America/New_York') <= 17\"\n  }\n}\n```\n\n---"
  7. Cloud-Native Security: '### 7.1 Container Security


    #### Image Scanning **[REQUIRED]**

    ```yaml'
  GitHub Actions example: "- name: Run Trivy vulnerability scanner\n  uses: aquasecurity/trivy-action@master\n\
    \  with:\n    image-ref: '${{ github.repository }}:${{ github.sha }}'\n    format:\
    \ 'sarif'\n    severity: 'CRITICAL,HIGH'\n    exit-code: '1'\n```\n\n#### Runtime\
    \ Security **[REQUIRED]**\n```yaml"
  Falco rules: "- rule: Unauthorized Process\n  desc: Detect unauthorized process\
    \ execution\n  condition: >\n    spawned_process and\n    container and\n    not\
    \ proc.name in (allowed_processes)\n  output: >\n    Unauthorized process started\n\
    \    (user=%user.name command=%proc.cmdline container=%container.info)\n  priority:\
    \ WARNING\n```\n\n### 7.2 Network Policies\n\n#### Default Deny **[REQUIRED]**\n\
    ```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name:\
    \ default-deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  -\
    \ Egress\n```\n\n#### Application Policies **[REQUIRED]**\n```yaml\napiVersion:\
    \ networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: app-network-policy\n\
    spec:\n  podSelector:\n    matchLabels:\n      app: myapp\n  policyTypes:\n  -\
    \ Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n     \
    \   matchLabels:\n          name: production\n    - podSelector:\n        matchLabels:\n\
    \          app: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n\
    \  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n        \
    \  name: production\n    - podSelector:\n        matchLabels:\n          app:\
    \ database\n    ports:\n    - protocol: TCP\n      port: 5432\n```\n\n### 7.3\
    \ Secrets Management\n\n#### External Secrets **[REQUIRED]**\n```yaml\napiVersion:\
    \ external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: vault-backend\n\
    spec:\n  provider:\n    vault:\n      server: \"https://vault.example.com\"\n\
    \      path: \"secret\"\n      version: \"v2\"\n      auth:\n        kubernetes:\n\
    \          mountPath: \"kubernetes\"\n          role: \"myapp\"\n\n---\napiVersion:\
    \ external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: app-secrets\n\
    spec:\n  refreshInterval: 15s\n  secretStoreRef:\n    name: vault-backend\n  \
    \  kind: SecretStore\n  target:\n    name: app-secrets\n    creationPolicy: Owner\n\
    \  data:\n  - secretKey: database-password\n    remoteRef:\n      key: myapp/database\n\
    \      property: password\n```\n\n---"
  8. Monitoring and Observability: '### 8.1 Metrics Standards


    #### Prometheus Metrics **[REQUIRED]**

    ```yaml'
  ServiceMonitor: "apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n\
    \  name: myapp\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  endpoints:\n\
    \  - port: metrics\n    interval: 30s\n    path: /metrics\n```\n\n#### Custom\
    \ Metrics **[REQUIRED]**\n```go\n// Metric naming convention\nvar (\n    httpRequestsTotal\
    \ = prometheus.NewCounterVec(\n        prometheus.CounterOpts{\n            Namespace:\
    \ \"myapp\",\n            Subsystem: \"http\",\n            Name:      \"requests_total\"\
    ,\n            Help:      \"Total number of HTTP requests\",\n        },\n   \
    \     []string{\"method\", \"endpoint\", \"status\"},\n    )\n\n    httpRequestDuration\
    \ = prometheus.NewHistogramVec(\n        prometheus.HistogramOpts{\n         \
    \   Namespace: \"myapp\",\n            Subsystem: \"http\",\n            Name:\
    \      \"request_duration_seconds\",\n            Help:      \"HTTP request latencies\
    \ in seconds\",\n            Buckets:   prometheus.DefBuckets,\n        },\n \
    \       []string{\"method\", \"endpoint\"},\n    )\n)\n```\n\n### 8.2 Logging\
    \ Standards\n\n#### Structured Logging **[REQUIRED]**\n```json\n{\n  \"timestamp\"\
    : \"2023-10-12T15:30:00Z\",\n  \"level\": \"INFO\",\n  \"service\": \"myapp\"\
    ,\n  \"version\": \"1.2.3\",\n  \"trace_id\": \"abc123\",\n  \"span_id\": \"def456\"\
    ,\n  \"user_id\": \"user123\",\n  \"method\": \"GET\",\n  \"path\": \"/api/users/123\"\
    ,\n  \"status\": 200,\n  \"duration_ms\": 145,\n  \"message\": \"Request completed\
    \ successfully\"\n}\n```\n\n#### Log Aggregation **[REQUIRED]**\n```yaml"
  Fluentd configuration: "<source>\n  @type forward\n  port 24224\n  bind 0.0.0.0\n\
    </source>\n\n<filter kubernetes.**>\n  @type kubernetes_metadata\n  @id filter_kube_metadata\n\
    </filter>\n\n<match **>\n  @type elasticsearch\n  host elasticsearch.logging.svc.cluster.local\n\
    \  port 9200\n  logstash_format true\n  logstash_prefix kubernetes\n  <buffer>\n\
    \    @type file\n    path /var/log/fluentd-buffers/kubernetes.system.buffer\n\
    \    flush_mode interval\n    retry_type exponential_backoff\n    flush_interval\
    \ 5s\n    retry_forever true\n    retry_max_interval 30\n    chunk_limit_size\
    \ 2M\n    queue_limit_length 8\n    overflow_action drop_oldest_chunk\n  </buffer>\n\
    </match>\n```\n\n### 8.3 Tracing Standards\n\n#### OpenTelemetry **[REQUIRED]**\n\
    ```javascript\nconst { NodeTracerProvider } = require('@opentelemetry/node');\n\
    const { Resource } = require('@opentelemetry/resources');\nconst { SemanticResourceAttributes\
    \ } = require('@opentelemetry/semantic-conventions');\n\nconst provider = new\
    \ NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]:\
    \ 'myapp',\n    [SemanticResourceAttributes.SERVICE_VERSION]: '1.2.3',\n    [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]:\
    \ process.env.NODE_ENV,\n  }),\n});\n\n// Instrument HTTP calls\nconst http =\
    \ require('http');\nconst https = require('https');\nconst { HttpInstrumentation\
    \ } = require('@opentelemetry/instrumentation-http');\n\nconst httpInstrumentation\
    \ = new HttpInstrumentation({\n  requestHook: (span, request) => {\n    span.setAttributes({\n\
    \      'http.request.body.size': request.headers['content-length'],\n    });\n\
    \  },\n});\n\nhttpInstrumentation.enable();\n```\n\n---"
  Implementation Checklist: '### Container Adoption

    - [ ] Dockerfiles use multi-stage builds

    - [ ] Images scanned for vulnerabilities

    - [ ] Resource limits defined

    - [ ] Health checks implemented

    - [ ] Non-root user configured


    ### Kubernetes Adoption

    - [ ] Namespace strategy defined

    - [ ] RBAC policies implemented

    - [ ] Resource quotas set

    - [ ] Network policies configured

    - [ ] Secrets externalized


    ### Infrastructure as Code

    - [ ] Terraform modules created

    - [ ] State management configured

    - [ ] GitOps repository setup

    - [ ] CI/CD pipelines automated

    - [ ] Environment promotion defined


    ### Serverless Implementation

    - [ ] Function sizing optimized

    - [ ] Cold start mitigation

    - [ ] Event schemas defined

    - [ ] Error handling standardized

    - [ ] Monitoring configured


    ### Security Implementation

    - [ ] Image signing enabled

    - [ ] Runtime security active

    - [ ] Network policies enforced

    - [ ] Secrets management automated

    - [ ] Compliance scanning enabled


    ### Observability Setup

    - [ ] Metrics collection configured

    - [ ] Distributed tracing enabled

    - [ ] Log aggregation working

    - [ ] Dashboards created

    - [ ] Alerts defined


    ---


    **End of Cloud-Native Standards**'
metadata:
  version: 1.0.0
  last_updated: '2025-06-20T05:11:53.905118'
  source: williamzujkowski/standards/docs/standards/CLOUD_NATIVE_STANDARDS.md
  checksum: 217daaf7fd7656d90d6c28e30145c6d620374b6e154cdc133494a15d4803b887
