version: '3.8'

services:
  # Redis cache for the MCP Standards Server
  redis:
    image: redis:7-alpine
    container_name: mcp-standards-redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # ChromaDB for vector storage (optional for development)
  chromadb:
    image: chromadb/chroma:latest
    container_name: mcp-standards-chromadb
    ports:
      - 8000:8000
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - ALLOW_RESET=TRUE
    healthcheck:
      test: [CMD, curl, -f, "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Standards Server (main application)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-standards-server
    ports:
      - 8080:8080
      - 3000:3000  # For web UI
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379
      - CHROMADB_URL=http://chromadb:8000
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8080
      - WEB_UI_PORT=3000
      - LOG_LEVEL=INFO
      - DATA_DIR=/app/data
    depends_on:
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    healthcheck:
      test: [CMD, curl, -f, "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # Prometheus for metrics (optional for development)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-standards-prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Redis Exporter for monitoring Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: mcp-standards-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - 9121:9121
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mcp-standards-node-exporter
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional for development)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-standards-grafana
    ports:
      - 3001:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp-network:
    driver: bridge