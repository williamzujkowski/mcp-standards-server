[project]
name = "mcp-standards-server"
version = "0.1.0"
description = "MCP server for LLM-driven NIST compliance and standards management"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "MCP Standards Team", email = "team@mcp-standards.dev"}
]
keywords = ["mcp", "nist", "compliance", "security", "standards", "llm", "oscal", "800-53"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "mcp>=0.1.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "redis>=5.0.0",
    "tree-sitter>=0.20.0",
    "tree-sitter-languages>=1.10.0",
    "typer>=0.9.0",
    "rich>=13.6.0",
    "httpx>=0.25.0",
    "pyyaml>=6.0",
    "aiofiles>=23.2.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "pyjwt>=2.8.0",
    "cryptography>=41.0.0",
]

[project.urls]
Homepage = "https://github.com/williamzujkowski/mcp-standards-server"
Documentation = "https://github.com/williamzujkowski/mcp-standards-server/tree/main/docs"
Repository = "https://github.com/williamzujkowski/mcp-standards-server"
Issues = "https://github.com/williamzujkowski/mcp-standards-server/issues"
Changelog = "https://github.com/williamzujkowski/mcp-standards-server/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "coverage[toml]>=7.3.0",
    "faker>=19.10.0",
    "pytest-mock>=3.12.0",
    "types-PyYAML>=6.0.0",
    "fastapi>=0.100.0",
]

llm = [
    "tiktoken>=0.5.0",
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0",
    "faiss-cpu>=1.7.4",
]

[project.scripts]
mcp-standards-server = "src.server:main"
mcp-standards = "src.cli.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function argument
    "ARG002", # unused method argument  
    "SIM102", # use single if statement
    "SIM105", # use contextlib.suppress
    "B904",   # raise from exception
    "F402",   # import shadowed by loop variable
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG002", "SIM117", "B017"]  # Allow unused args, nested with, and Exception in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
namespace_packages = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.cli.main"
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.compliance.scanner"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests/unit", "tests/integration", "tests/e2e"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]