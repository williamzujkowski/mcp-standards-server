[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-standards-server"
version = "1.0.1"
description = "A Model Context Protocol server for intelligent access to development standards"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "William Zujkowski", email = "williamzujkowski@users.noreply.github.com"},
]
maintainers = [
    {name = "William Zujkowski", email = "williamzujkowski@users.noreply.github.com"},
]
keywords = [
    "mcp",
    "model-context-protocol",
    "development-standards",
    "llm",
    "ai-tools",
    "code-quality",
    "software-standards",
    "compliance",
    "best-practices",
    "semantic-search",
    "code-standards",
    "nist",
    "software-quality",
    "testing",
    "code-review",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
dependencies = [
    # Core dependencies
    "mcp>=0.1.0",  # Model Context Protocol SDK - critical dependency
    "pydantic>=2.6.0,<2.12.0",  # Compatible with safety tools
    "redis>=6.2.0",
    "PyYAML>=6.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.53.2",  # Security update
    "tiktoken>=0.4.0",
    "tree-sitter>=0.20.0",
    "aiofiles>=23.0.0",
    "jsonschema>=4.0.0",
    "aiohttp>=3.12.14",
    "scikit-learn>=1.7.0",
    "numpy>=2.0.0",  # Updated for security and performance
    "nltk>=3.9.0",  # Updated for security fixes
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.25.0",  # Updated version for security
    "PyJWT>=2.10.0",  # Updated for JWT security fixes
    # Database dependencies with Python 3.12 compatibility
    # aioredis removed - functionality moved to redis-py async features
    "aiosqlite>=0.19.0",
    "asyncpg>=0.29.0",
    "aiomysql>=0.2.0",
    "sqlalchemy>=2.0.0",
    # GitHub integration dependencies
    "PyGithub>=2.6.1",
    "requests>=2.32.4",
    # Performance monitoring and profiling dependencies
    "prometheus_client>=0.16.0",  # For metrics collection
    "pympler>=1.0.0",  # For memory profiling
    "memory-profiler>=0.60.0",  # For memory analysis
    "faiss-cpu>=1.7.0",  # For vector operations
    "psutil>=5.9.0",  # For system monitoring
    "msgpack>=1.0.0",  # For efficient serialization
]

[project.urls]
Homepage = "https://github.com/williamzujkowski/mcp-standards-server"
Repository = "https://github.com/williamzujkowski/mcp-standards-server"
Issues = "https://github.com/williamzujkowski/mcp-standards-server/issues"

[project.scripts]
mcp-standards = "cli.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0",
    "black==24.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pip-audit>=2.6.0",
    "safety>=2.3.0",
    # Type stubs for mypy
    "types-PyYAML",
    "types-requests",
    "types-psutil",
    "types-cachetools",
    "types-setuptools",
    "types-aiofiles",
    "scipy-stubs",
    "click",  # Add click dependency
    "semantic-version",  # Add semantic-version dependency
    "packaging",  # Add packaging dependency
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
    "pympler>=1.0.0",
    "pytest-memprof>=0.2.0",
]
visualization = [
    "matplotlib>=3.5.0",  # For benchmark plots
]
full = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "faiss-cpu>=1.7.0",
    "annoy>=1.17.0",
    "matplotlib>=3.5.0",
]
security-constraints = [
    # Security constraints to avoid vulnerable packages
    "PyPDF2!=1.28.6",  # CVE vulnerability in version 1.28.6
    "langchain-community>=0.2.5",  # Multiple CVEs fixed in 0.2.5
    "flask>=3.1.0",  # Latest security updates
    "sqlitedict!=2.1.0",  # CVE-2024-35515 - insecure deserialization
    "requests>=2.32.0",  # Security updates
    "jinja2>=3.1.4",  # Template injection fixes
    "urllib3>=2.0.0",  # TLS and proxy security fixes
    "cryptography>=43.0.0",  # Multiple cryptographic fixes
    "pillow>=10.4.0",  # Image processing security fixes
    "lxml>=5.0.0",  # XML parsing security fixes
    "setuptools>=70.0.0",  # Package installation security
    "certifi>=2024.8.30",  # CA bundle updates
    "transformers>=4.53.2",  # Security updates
    # Note: torch 2.7.1 has GHSA-887c-mr87-cxwp (DoS vulnerability) but no fix version available yet
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]
timeout = 300

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
concurrency = ["multiprocessing", "thread"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "B904", # raise from
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S105", "S106"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = [
    "benchmarks/.*",
    "scripts/.*", 
    "web/.*",
    "tests/.*",
]

[[tool.mypy.overrides]]
module = [
    "tiktoken",
    "nltk",
    "nltk.*",
    "numpy",
    "numpy.*", 
    "redis",
    "redis.*",
    "fuzzywuzzy",
    "sentence_transformers",
    "sklearn.*",
    "msgpack",
    "aiohttp",
    "aiohttp.*",
    "aioredis",
    "faiss",
    "github",
    "pympler",
    "prometheus_client",
    "matplotlib.*",
    "scipy.*",
    "packaging",
    "jwt",
    "pydantic",
    "click",
    "yaml",
    "generators",
    "generators.*",
    "pytest",
    "pytest.*",
    "src.core.mcp.models",
    "src.core.standards.micro_standards",
    "core.standards.sync",
    "cli.commands.generate",
    "cachetools",
    "aiofiles",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "requests",
    "psutil",
    "semantic_version",
    "pythonjsonlogger",
    "jsonschema",
    "jinja2",
    "jinja2.*",
    "mcp_server",
    "mcp",
    "mcp.*",
    "pytest_asyncio",
    "test_data_setup",
    "fastapi",
    "fastapi.*",
    "passlib.*",
]
ignore_missing_imports = true

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md"]