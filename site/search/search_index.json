{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP Standards Server Documentation","text":"<p>Welcome to the comprehensive documentation for the MCP Standards Server. This documentation is organized to help different types of users find the information they need quickly.</p>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"#cli-documentation","title":"CLI Documentation","text":"<p>Command-line interface documentation for end users.</p> <ul> <li>CLI Overview - Introduction to the CLI</li> <li>Command Reference - Detailed documentation for each command</li> <li>Configuration Guide - How to configure the server</li> <li>Troubleshooting - Common issues and solutions</li> <li>Examples - Practical usage examples</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>Getting Started - Quick start guide</li> <li>Common Workflows - Typical usage patterns</li> <li>IDE Integration - Editor setup guides</li> <li>CI/CD Integration - Pipeline integration</li> </ul>"},{"location":"#man-pages","title":"Man Pages","text":"<p>Traditional Unix manual pages for system-wide installation.</p> <ul> <li>Installation Instructions - How to install man pages</li> <li>Manual Pages - Formatted documentation for each command</li> </ul>"},{"location":"#documentation-website","title":"Documentation Website","text":"<p>Web-based documentation with search and navigation.</p> <ul> <li>Home - Documentation homepage</li> <li>Installation Guide - Detailed installation instructions</li> <li>API Reference - Programmatic interface documentation</li> <li>MCP Tools - Model Context Protocol tools</li> <li>Configuration Schema - Configuration file format</li> <li>Standards Format - Standards file specification</li> <li>Architecture - System design documentation</li> </ul>"},{"location":"#internal-documentation","title":"Internal Documentation","text":"<p>Technical documentation for developers and contributors.</p> <ul> <li>Token Optimization - Token management system</li> <li>Cache Design - Caching architecture</li> </ul>"},{"location":"#quick-links-by-role","title":"\ud83c\udfaf Quick Links by Role","text":""},{"location":"#for-users","title":"For Users","text":"<ol> <li>Start with Getting Started</li> <li>Learn Common Workflows</li> <li>Reference Command Documentation</li> <li>Troubleshoot with Troubleshooting Guide</li> </ol>"},{"location":"#for-developers","title":"For Developers","text":"<ol> <li>Read Installation Guide</li> <li>Integrate using MCP Tools Reference</li> <li>Configure with Configuration Guide</li> <li>Automate with CI/CD Integration</li> </ol>"},{"location":"#for-contributors","title":"For Contributors","text":"<ol> <li>Understand Architecture</li> <li>Review API Documentation</li> <li>Follow Contributing Guidelines</li> <li>Run Tests</li> </ol>"},{"location":"#documentation-formats","title":"\ud83d\udcd6 Documentation Formats","text":""},{"location":"#online-documentation","title":"Online Documentation","text":"<ul> <li>Searchable website - Full documentation with search</li> <li>GitHub Pages - Hosted documentation site</li> <li>In-editor help - Context-sensitive help in IDEs</li> </ul>"},{"location":"#offline-documentation","title":"Offline Documentation","text":"<ul> <li>Man pages - Traditional Unix manual pages</li> <li>PDF export - Printable documentation</li> <li>Markdown files - Version-controlled docs</li> </ul>"},{"location":"#interactive-documentation","title":"Interactive Documentation","text":"<ul> <li>CLI help - Built-in <code>--help</code> for all commands</li> <li>Shell completion - Tab completion with descriptions</li> <li>Example scripts - Runnable examples</li> </ul>"},{"location":"#finding-information","title":"\ud83d\udd0d Finding Information","text":""},{"location":"#by-topic","title":"By Topic","text":"<ul> <li>Installation \u2192 Installation Guide</li> <li>Configuration \u2192 Configuration Guide</li> <li>Commands \u2192 Command Reference</li> <li>Integration \u2192 IDE / CI/CD</li> <li>API \u2192 MCP Tools</li> <li>Troubleshooting \u2192 Troubleshooting Guide</li> </ul>"},{"location":"#by-task","title":"By Task","text":"<ul> <li>\"How do I install?\" \u2192 Installation Guide</li> <li>\"How do I validate code?\" \u2192 validate command</li> <li>\"How do I integrate with VS Code?\" \u2192 IDE Integration</li> <li>\"How do I use in CI/CD?\" \u2192 CI/CD Integration</li> <li>\"How do I query standards?\" \u2192 query command</li> </ul>"},{"location":"#by-user-type","title":"By User Type","text":"<ul> <li>New users \u2192 Getting Started</li> <li>CLI users \u2192 CLI Documentation</li> <li>API users \u2192 API Reference</li> <li>DevOps \u2192 CI/CD Integration</li> <li>Contributors \u2192 Contributing Guidelines</li> </ul>"},{"location":"#building-documentation","title":"\ud83d\udee0\ufe0f Building Documentation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<pre><code># For building the website\nnpm install -g @docusaurus/core\n\n# For building man pages\napt-get install pandoc  # or brew install pandoc\n\n# For PDF generation\napt-get install texlive  # or brew install --cask mactex\n</code></pre>"},{"location":"#build-commands","title":"Build Commands","text":"<pre><code># Build website\ncd docs/site &amp;&amp; npm run build\n\n# Build man pages\nmake -C docs/man\n\n# Generate PDF\npandoc docs/cli/README.md -o mcp-standards-manual.pdf\n</code></pre>"},{"location":"#contributing-to-documentation","title":"\ud83d\udcdd Contributing to Documentation","text":"<p>We welcome documentation contributions! Please:</p> <ol> <li>Follow the existing structure and style</li> <li>Include examples for new features</li> <li>Update the table of contents</li> <li>Test all code examples</li> <li>Check for broken links</li> <li>Submit a pull request</li> </ol> <p>See Contributing Guidelines for more details.</p>"},{"location":"#getting-help","title":"\ud83d\udcde Getting Help","text":"<ul> <li>Documentation issues \u2192 GitHub Issues</li> <li>Questions \u2192 GitHub Discussions</li> <li>Live chat \u2192 Discord Server</li> </ul> <p>Last updated: January 2025 | Version: 1.0.0</p>"},{"location":"API_DOCUMENTATION/","title":"API Documentation","text":""},{"location":"API_DOCUMENTATION/#overview","title":"Overview","text":"<p>This document provides comprehensive documentation for the MCP Standards Server API endpoints and configuration options.</p>"},{"location":"API_DOCUMENTATION/#table-of-contents","title":"Table of Contents","text":"<ol> <li>HTTP REST API Endpoints</li> <li>MCP Tools</li> <li>Configuration Options</li> <li>Authentication</li> <li>Error Handling</li> <li>Rate Limiting</li> </ol>"},{"location":"API_DOCUMENTATION/#http-rest-api-endpoints","title":"HTTP REST API Endpoints","text":"<p>The MCP Standards Server provides a REST API for health checks, metrics, and standards access.</p>"},{"location":"API_DOCUMENTATION/#health-check-endpoints","title":"Health Check Endpoints","text":""},{"location":"API_DOCUMENTATION/#get-health","title":"<code>GET /health</code>","text":"<p>Comprehensive health check endpoint that returns the overall health status of the server.</p> <p>Query Parameters: - <code>checks</code> (optional): Comma-separated list of specific health checks to perform</p> <p>Response: <pre><code>{\n  \"status\": \"healthy|degraded|unhealthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {\n    \"database\": {\n      \"status\": \"healthy\",\n      \"response_time\": 0.05\n    },\n    \"cache\": {\n      \"status\": \"healthy\",\n      \"response_time\": 0.02\n    }\n  }\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Healthy or degraded - <code>503</code>: Unhealthy</p>"},{"location":"API_DOCUMENTATION/#get-healthlive","title":"<code>GET /health/live</code>","text":"<p>Kubernetes liveness probe endpoint. Returns basic service availability.</p> <p>Response: <pre><code>{\n  \"alive\": true,\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Service is alive - <code>503</code>: Service is not alive</p>"},{"location":"API_DOCUMENTATION/#get-healthready","title":"<code>GET /health/ready</code>","text":"<p>Kubernetes readiness probe endpoint. Returns service readiness to handle requests.</p> <p>Response: <pre><code>{\n  \"ready\": true,\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Service is ready - <code>503</code>: Service is not ready</p>"},{"location":"API_DOCUMENTATION/#metrics-endpoints","title":"Metrics Endpoints","text":""},{"location":"API_DOCUMENTATION/#get-metrics","title":"<code>GET /metrics</code>","text":"<p>Prometheus metrics endpoint. Returns metrics in Prometheus format.</p> <p>Response: <pre><code># HELP mcp_http_requests_total Total number of HTTP requests\n# TYPE mcp_http_requests_total counter\nmcp_http_requests_total{method=\"GET\",path=\"/health\",status=\"200\"} 42\n\n# HELP mcp_tool_calls_total Total number of MCP tool calls\n# TYPE mcp_tool_calls_total counter\nmcp_tool_calls_total{tool=\"get_applicable_standards\",success=\"true\"} 15\n</code></pre></p> <p>Content-Type: <code>text/plain; version=0.0.4</code></p>"},{"location":"API_DOCUMENTATION/#service-information-endpoints","title":"Service Information Endpoints","text":""},{"location":"API_DOCUMENTATION/#get-status","title":"<code>GET /status</code>","text":"<p>Returns detailed service status information.</p> <p>Response: <pre><code>{\n  \"service\": \"mcp-standards-server\",\n  \"version\": \"1.0.0\",\n  \"status\": \"running\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"environment\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 8080,\n    \"data_dir\": \"data\",\n    \"log_level\": \"INFO\"\n  }\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#get-info","title":"<code>GET /info</code>","text":"<p>Returns service information and available endpoints.</p> <p>Response: <pre><code>{\n  \"name\": \"MCP Standards Server\",\n  \"description\": \"Model Context Protocol server for software development standards\",\n  \"version\": \"1.0.0\",\n  \"author\": \"MCP Standards Team\",\n  \"endpoints\": {\n    \"health\": \"/health\",\n    \"liveness\": \"/health/live\",\n    \"readiness\": \"/health/ready\",\n    \"metrics\": \"/metrics\",\n    \"status\": \"/status\",\n    \"standards\": \"/api/standards\"\n  },\n  \"documentation\": \"https://github.com/williamzujkowski/mcp-standards-server\"\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#standards-api-endpoints","title":"Standards API Endpoints","text":""},{"location":"API_DOCUMENTATION/#get-apistandards","title":"<code>GET /api/standards</code>","text":"<p>List all available standards.</p> <p>Response: <pre><code>{\n  \"standards\": [\n    {\n      \"id\": \"react-18-patterns\",\n      \"title\": \"React 18 Patterns and Best Practices\",\n      \"category\": \"Frontend\",\n      \"description\": \"Modern React patterns for building scalable applications...\"\n    }\n  ],\n  \"total\": 25,\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#get-apistandardsstandard_id","title":"<code>GET /api/standards/{standard_id}</code>","text":"<p>Get a specific standard by ID.</p> <p>Parameters: - <code>standard_id</code> (required): The ID of the standard to retrieve</p> <p>Response: <pre><code>{\n  \"standard\": {\n    \"id\": \"react-18-patterns\",\n    \"title\": \"React 18 Patterns and Best Practices\",\n    \"category\": \"Frontend\",\n    \"description\": \"Modern React patterns for building scalable applications\",\n    \"content\": \"...\",\n    \"metadata\": {\n      \"created_at\": \"2024-01-01T12:00:00Z\",\n      \"updated_at\": \"2024-01-01T12:00:00Z\"\n    }\n  },\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p> <p>Status Codes: - <code>200</code>: Standard found - <code>404</code>: Standard not found</p>"},{"location":"API_DOCUMENTATION/#get","title":"<code>GET /</code>","text":"<p>Root endpoint with basic service information.</p> <p>Response: <pre><code>{\n  \"service\": \"MCP Standards Server\",\n  \"status\": \"running\",\n  \"version\": \"1.0.0\",\n  \"endpoints\": {\n    \"health\": \"/health\",\n    \"info\": \"/info\",\n    \"standards\": \"/api/standards\",\n    \"metrics\": \"/metrics\"\n  },\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#mcp-tools","title":"MCP Tools","text":"<p>The MCP Standards Server provides three main tools for interacting with standards via the Model Context Protocol.</p>"},{"location":"API_DOCUMENTATION/#get_applicable_standards","title":"get_applicable_standards","text":"<p>Retrieves standards that are applicable to a given project context.</p> <p>Parameters: <pre><code>{\n  \"project_context\": {\n    \"type\": \"object\",\n    \"description\": \"Project context for standard selection\",\n    \"properties\": {\n      \"project_type\": {\n        \"type\": \"string\",\n        \"description\": \"Type of project (e.g., 'web_application', 'mobile_app', 'api')\"\n      },\n      \"frameworks\": {\n        \"type\": \"array\",\n        \"description\": \"List of frameworks used in the project\",\n        \"items\": {\"type\": \"string\"}\n      },\n      \"languages\": {\n        \"type\": \"array\",\n        \"description\": \"Programming languages used\",\n        \"items\": {\"type\": \"string\"}\n      },\n      \"requirements\": {\n        \"type\": \"array\",\n        \"description\": \"Specific requirements or needs\",\n        \"items\": {\"type\": \"string\"}\n      }\n    }\n  }\n}\n</code></pre></p> <p>Example Usage: <pre><code>{\n  \"project_context\": {\n    \"project_type\": \"web_application\",\n    \"frameworks\": [\"react\", \"express\"],\n    \"languages\": [\"javascript\", \"typescript\"],\n    \"requirements\": [\"accessibility\", \"security\", \"performance\"]\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"result\": {\n    \"applicable_standards\": [\n      {\n        \"id\": \"react-18-patterns\",\n        \"title\": \"React 18 Patterns and Best Practices\",\n        \"relevance_score\": 0.95,\n        \"reason\": \"Matches React framework and frontend requirements\"\n      }\n    ],\n    \"total_standards\": 1,\n    \"selection_criteria\": {\n      \"framework_matches\": [\"react\"],\n      \"language_matches\": [\"javascript\", \"typescript\"],\n      \"requirement_matches\": [\"accessibility\", \"security\", \"performance\"]\n    }\n  }\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#search_standards","title":"search_standards","text":"<p>Performs semantic search across all standards.</p> <p>Parameters: <pre><code>{\n  \"query\": {\n    \"type\": \"string\",\n    \"description\": \"Search query for finding relevant standards\",\n    \"required\": true\n  },\n  \"limit\": {\n    \"type\": \"integer\",\n    \"description\": \"Maximum number of results to return\",\n    \"default\": 10,\n    \"minimum\": 1,\n    \"maximum\": 100\n  }\n}\n</code></pre></p> <p>Example Usage: <pre><code>{\n  \"query\": \"React hooks performance optimization\",\n  \"limit\": 5\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"result\": {\n    \"standards\": [\n      {\n        \"id\": \"react-18-patterns\",\n        \"title\": \"React 18 Patterns and Best Practices\",\n        \"relevance_score\": 0.92,\n        \"matched_content\": \"React hooks performance optimization techniques...\",\n        \"category\": \"Frontend\"\n      }\n    ],\n    \"total_results\": 1,\n    \"query_processed\": \"React hooks performance optimization\",\n    \"search_time\": 0.125\n  }\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#get_standard","title":"get_standard","text":"<p>Retrieves a specific standard by its ID.</p> <p>Parameters: <pre><code>{\n  \"standard_id\": {\n    \"type\": \"string\",\n    \"description\": \"Unique identifier for the standard\",\n    \"required\": true\n  },\n  \"version\": {\n    \"type\": \"string\",\n    \"description\": \"Specific version of the standard (optional)\",\n    \"default\": \"latest\"\n  }\n}\n</code></pre></p> <p>Example Usage: <pre><code>{\n  \"standard_id\": \"react-18-patterns\",\n  \"version\": \"1.0.0\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"result\": {\n    \"standard\": {\n      \"id\": \"react-18-patterns\",\n      \"title\": \"React 18 Patterns and Best Practices\",\n      \"version\": \"1.0.0\",\n      \"category\": \"Frontend\",\n      \"description\": \"Comprehensive guide to React 18 patterns...\",\n      \"content\": \"# React 18 Patterns and Best Practices\\\\n\\\\n## Overview\\\\n...\",\n      \"metadata\": {\n        \"created_at\": \"2024-01-01T12:00:00Z\",\n        \"updated_at\": \"2024-01-01T12:00:00Z\",\n        \"author\": \"React Team\",\n        \"tags\": [\"react\", \"frontend\", \"hooks\", \"performance\"]\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"API_DOCUMENTATION/#configuration-options","title":"Configuration Options","text":"<p>The MCP Standards Server supports extensive configuration through environment variables.</p>"},{"location":"API_DOCUMENTATION/#core-application-settings","title":"Core Application Settings","text":"Variable Default Description <code>HTTP_HOST</code> <code>127.0.0.1</code> Host address for HTTP server <code>HTTP_PORT</code> <code>8080</code> Port for HTTP server <code>DATA_DIR</code> <code>./data</code> Directory for storing data files <code>MCP_STANDARDS_DATA_DIR</code> <code>./data/standards</code> Directory for standards data <code>MCP_CONFIG_PATH</code> <code>./config/mcp_config.yaml</code> Path to MCP configuration file <code>LOG_LEVEL</code> <code>INFO</code> Logging level (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>)"},{"location":"API_DOCUMENTATION/#feature-flags","title":"Feature Flags","text":"Variable Default Description <code>HTTP_ONLY</code> <code>false</code> Run only HTTP server without MCP <code>MCP_DISABLE_SEARCH</code> <code>false</code> Disable semantic search features"},{"location":"API_DOCUMENTATION/#authentication-security","title":"Authentication &amp; Security","text":"Variable Default Description <code>MCP_AUTH_ENABLED</code> <code>false</code> Enable authentication for MCP tools <code>MCP_JWT_SECRET</code> <code>\"\"</code> JWT secret key for authentication <code>MCP_MASK_ERRORS</code> <code>false</code> Mask error details in production"},{"location":"API_DOCUMENTATION/#external-services","title":"External Services","text":"Variable Default Description <code>GITHUB_TOKEN</code> <code>\"\"</code> GitHub personal access token for syncing standards <code>REDIS_URL</code> <code>redis://localhost:6379/0</code> Redis connection URL <code>CHROMADB_URL</code> <code>http://localhost:8000</code> ChromaDB server URL"},{"location":"API_DOCUMENTATION/#web-application-settings","title":"Web Application Settings","text":"Variable Default Description <code>WEB_UI_ENABLED</code> <code>true</code> Enable web UI interface <code>WEB_UI_PORT</code> <code>3000</code> Port for web UI development server <code>WEB_UI_API_BASE_URL</code> <code>http://localhost:8080</code> Base URL for API calls"},{"location":"API_DOCUMENTATION/#logging-configuration","title":"Logging Configuration","text":"Variable Default Description <code>LOG_FORMAT</code> <code>json</code> Log format (<code>json</code> or <code>text</code>) <code>LOG_FILE</code> <code>\"\"</code> Log file path (empty = stdout only) <code>LOG_DIR</code> <code>logs</code> Directory for log files <code>LOG_MAX_SIZE</code> <code>10MB</code> Maximum log file size <code>LOG_BACKUP_COUNT</code> <code>5</code> Number of backup log files"},{"location":"API_DOCUMENTATION/#performance-caching","title":"Performance &amp; Caching","text":"Variable Default Description <code>CACHE_ENABLED</code> <code>true</code> Enable caching <code>CACHE_TTL</code> <code>3600</code> Cache time-to-live in seconds <code>CACHE_MAX_SIZE</code> <code>1000</code> Maximum cache entries <code>VECTOR_CACHE_SIZE</code> <code>10000</code> Vector cache size <code>SEARCH_CACHE_TTL</code> <code>300</code> Search cache TTL in seconds"},{"location":"API_DOCUMENTATION/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":"Variable Default Description <code>METRICS_ENABLED</code> <code>true</code> Enable metrics collection <code>METRICS_PORT</code> <code>9090</code> Prometheus metrics port <code>METRICS_PATH</code> <code>/metrics</code> Metrics endpoint path <code>HEALTH_CHECK_INTERVAL</code> <code>30</code> Health check interval in seconds"},{"location":"API_DOCUMENTATION/#authentication","title":"Authentication","text":"<p>The MCP Standards Server supports JWT-based authentication for MCP tools when enabled.</p>"},{"location":"API_DOCUMENTATION/#enabling-authentication","title":"Enabling Authentication","text":"<p>Set the following environment variables:</p> <pre><code>MCP_AUTH_ENABLED=true\nMCP_JWT_SECRET=your-secret-key-here\n</code></pre>"},{"location":"API_DOCUMENTATION/#jwt-token-format","title":"JWT Token Format","text":"<pre><code>{\n  \"sub\": \"user_id\",\n  \"iat\": 1640995200,\n  \"exp\": 1640998800,\n  \"scope\": [\"standards:read\", \"standards:search\"]\n}\n</code></pre>"},{"location":"API_DOCUMENTATION/#required-scopes","title":"Required Scopes","text":"<ul> <li><code>standards:read</code>: Access to get_standard tool</li> <li><code>standards:search</code>: Access to search_standards tool</li> <li><code>standards:list</code>: Access to get_applicable_standards tool</li> </ul>"},{"location":"API_DOCUMENTATION/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes and provides detailed error responses.</p>"},{"location":"API_DOCUMENTATION/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>200</code>: Success</li> <li><code>400</code>: Bad Request (validation errors)</li> <li><code>401</code>: Unauthorized (authentication required)</li> <li><code>403</code>: Forbidden (insufficient permissions)</li> <li><code>404</code>: Not Found (resource not found)</li> <li><code>429</code>: Too Many Requests (rate limited)</li> <li><code>500</code>: Internal Server Error</li> <li><code>503</code>: Service Unavailable (health check failed)</li> </ul>"},{"location":"API_DOCUMENTATION/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_INVALID_PARAMETERS\",\n    \"message\": \"Invalid parameter provided\",\n    \"details\": {\n      \"field\": \"standard_id\",\n      \"reason\": \"Standard ID cannot be empty\"\n    },\n    \"suggestion\": \"Provide a valid standard ID\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"API_DOCUMENTATION/#mcp-error-codes","title":"MCP Error Codes","text":"<ul> <li><code>VALIDATION_INVALID_PARAMETERS</code>: Invalid input parameters</li> <li><code>TOOL_NOT_FOUND</code>: Requested tool not available</li> <li><code>TOOL_EXECUTION_FAILED</code>: Tool execution failed</li> <li><code>AUTH_INVALID_TOKEN</code>: Invalid authentication token</li> <li><code>AUTH_INSUFFICIENT_PERMISSIONS</code>: Insufficient permissions</li> <li><code>SYSTEM_INTERNAL_ERROR</code>: Internal server error</li> </ul>"},{"location":"API_DOCUMENTATION/#rate-limiting","title":"Rate Limiting","text":"<p>The server implements rate limiting to prevent abuse and ensure fair usage.</p>"},{"location":"API_DOCUMENTATION/#rate-limits","title":"Rate Limits","text":"<ul> <li>HTTP API: 100 requests per minute per IP</li> <li>MCP Tools: 50 calls per minute per user</li> <li>Search Tools: 20 calls per minute per user</li> </ul>"},{"location":"API_DOCUMENTATION/#rate-limit-headers","title":"Rate Limit Headers","text":"<pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1640995200\n</code></pre>"},{"location":"API_DOCUMENTATION/#rate-limit-exceeded-response","title":"Rate Limit Exceeded Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Rate limit exceeded\",\n    \"details\": {\n      \"limit\": 100,\n      \"remaining\": 0,\n      \"reset_time\": \"2024-01-01T12:01:00Z\"\n    }\n  }\n}\n</code></pre>"},{"location":"API_DOCUMENTATION/#examples","title":"Examples","text":""},{"location":"API_DOCUMENTATION/#complete-curl-examples","title":"Complete cURL Examples","text":""},{"location":"API_DOCUMENTATION/#health-check","title":"Health Check","text":"<pre><code>curl -X GET http://localhost:8080/health\n</code></pre>"},{"location":"API_DOCUMENTATION/#get-all-standards","title":"Get All Standards","text":"<pre><code>curl -X GET http://localhost:8080/api/standards\n</code></pre>"},{"location":"API_DOCUMENTATION/#get-specific-standard","title":"Get Specific Standard","text":"<pre><code>curl -X GET http://localhost:8080/api/standards/react-18-patterns\n</code></pre>"},{"location":"API_DOCUMENTATION/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code>curl -X GET http://localhost:8080/metrics\n</code></pre>"},{"location":"API_DOCUMENTATION/#mcp-client-examples","title":"MCP Client Examples","text":""},{"location":"API_DOCUMENTATION/#python-mcp-client","title":"Python MCP Client","text":"<pre><code>import asyncio\nfrom mcp_client import MCPClient\n\nasync def main():\n    client = MCPClient(\"stdio://python -m mcp_standards_server\")\n\n    # Search for standards\n    result = await client.call_tool(\"search_standards\", {\n        \"query\": \"React performance optimization\",\n        \"limit\": 5\n    })\n\n    print(result)\n\nasyncio.run(main())\n</code></pre>"},{"location":"API_DOCUMENTATION/#nodejs-mcp-client","title":"Node.js MCP Client","text":"<pre><code>const { MCPClient } = require('@modelcontextprotocol/client');\n\nasync function main() {\n  const client = new MCPClient({\n    command: 'python',\n    args: ['-m', 'mcp_standards_server']\n  });\n\n  await client.connect();\n\n  const result = await client.callTool('get_applicable_standards', {\n    project_context: {\n      project_type: 'web_application',\n      frameworks: ['react'],\n      languages: ['javascript']\n    }\n  });\n\n  console.log(result);\n  await client.close();\n}\n\nmain();\n</code></pre>"},{"location":"API_DOCUMENTATION/#configuration-examples","title":"Configuration Examples","text":""},{"location":"API_DOCUMENTATION/#production-configuration","title":"Production Configuration","text":"<pre><code># .env.production\nHTTP_HOST=0.0.0.0\nHTTP_PORT=8080\nLOG_LEVEL=INFO\nLOG_FORMAT=json\nMCP_AUTH_ENABLED=true\nMCP_MASK_ERRORS=true\nCACHE_ENABLED=true\nMETRICS_ENABLED=true\nREDIS_URL=redis://redis:6379/0\nCHROMADB_URL=http://chromadb:8000\n</code></pre>"},{"location":"API_DOCUMENTATION/#development-configuration","title":"Development Configuration","text":"<pre><code># .env.development\nHTTP_HOST=127.0.0.1\nHTTP_PORT=8080\nLOG_LEVEL=DEBUG\nLOG_FORMAT=text\nMCP_AUTH_ENABLED=false\nMCP_MASK_ERRORS=false\nCACHE_ENABLED=true\nMETRICS_ENABLED=true\n</code></pre>"},{"location":"API_DOCUMENTATION/#docker-configuration","title":"Docker Configuration","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  mcp-standards-server:\n    image: mcp-standards-server:latest\n    environment:\n      - HTTP_HOST=0.0.0.0\n      - HTTP_PORT=8080\n      - REDIS_URL=redis://redis:6379/0\n      - CHROMADB_URL=http://chromadb:8000\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - redis\n      - chromadb\n</code></pre>"},{"location":"API_DOCUMENTATION/#support","title":"Support","text":"<p>For additional support and documentation:</p> <ul> <li>GitHub Repository: https://github.com/williamzujkowski/mcp-standards-server</li> <li>Issues: https://github.com/williamzujkowski/mcp-standards-server/issues</li> <li>Documentation: https://github.com/williamzujkowski/mcp-standards-server/docs</li> <li>Community: https://github.com/williamzujkowski/mcp-standards-server/discussions</li> </ul>"},{"location":"CACHE_POPULATION_GUIDE/","title":"Standards Cache Population Guide","text":"<p>This guide documents how to populate the standards cache for MCP tools to access standards data.</p>"},{"location":"CACHE_POPULATION_GUIDE/#overview","title":"Overview","text":"<p>The MCP Standards Server requires standards to be cached locally in JSON format for the tools to function properly. The cache population process involves:</p> <ol> <li>Synchronizing standards from the GitHub repository (downloads as Markdown files)</li> <li>Converting Markdown files to JSON format with proper metadata</li> <li>Verifying MCP tools can access the cached data</li> </ol>"},{"location":"CACHE_POPULATION_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>MCP Standards Server dependencies installed (<code>pip install -e .</code>)</li> <li>Internet connection for GitHub access</li> </ul>"},{"location":"CACHE_POPULATION_GUIDE/#cache-population-process","title":"Cache Population Process","text":""},{"location":"CACHE_POPULATION_GUIDE/#1-initial-synchronization","title":"1. Initial Synchronization","text":"<p>The synchronization process downloads standards from the configured GitHub repository:</p> <pre><code>from src.mcp_server import MCPStandardsServer\n\n# Initialize the server\nserver = MCPStandardsServer()\n\n# Run synchronization\nresult = await server.synchronizer.sync(force=True)\nprint(f\"Synced {len(result.synced_files)} files\")\n</code></pre> <p>This downloads Markdown files to <code>data/standards/cache/</code>.</p>"},{"location":"CACHE_POPULATION_GUIDE/#2-convert-to-json-format","title":"2. Convert to JSON Format","text":"<p>The MCP tools expect JSON format files with metadata. You need to convert the Markdown files:</p> <pre><code>import json\nimport re\nfrom pathlib import Path\n\ndef convert_md_to_json(md_file: Path):\n    \"\"\"Convert a markdown standard to JSON format.\"\"\"\n    content = md_file.read_text(encoding='utf-8')\n\n    # Extract metadata\n    title_match = re.search(r'^#\\s+(.+)$', content, re.MULTILINE)\n    title = title_match.group(1).strip() if title_match else md_file.stem\n\n    # Create JSON structure\n    standard = {\n        \"id\": md_file.stem.lower(),\n        \"name\": title,\n        \"category\": determine_category(md_file.name),\n        \"tags\": extract_tags(content),\n        \"version\": \"1.0.0\",\n        \"content\": content\n    }\n\n    # Save as JSON\n    json_file = md_file.with_suffix('.json')\n    with open(json_file, 'w') as f:\n        json.dump(standard, f, indent=2)\n</code></pre>"},{"location":"CACHE_POPULATION_GUIDE/#3-verify-cache-population","title":"3. Verify Cache Population","text":"<p>After population, verify the cache contains both formats:</p> <pre><code># Check cache directory\nls -la data/standards/cache/\n\n# Should see:\n# - sync_metadata.json (tracking file)\n# - *.md files (raw standards)\n# - *.json files (formatted for MCP tools)\n</code></pre>"},{"location":"CACHE_POPULATION_GUIDE/#current-cache-state","title":"Current Cache State","text":"<p>As of the last sync: - Total Standards: 21 - Cache Location: <code>/data/standards/cache/</code> - Formats Available: Markdown (.md) and JSON (.json)</p>"},{"location":"CACHE_POPULATION_GUIDE/#available-standards-categories","title":"Available Standards Categories:","text":"<ul> <li>Development: coding_standards</li> <li>Security: modern_security_standards</li> <li>Cloud: cloud_native_standards</li> <li>Testing: testing_standards</li> <li>Frontend: frontend_mobile_standards, web_design_ux_standards</li> <li>DevOps: devops_platform_standards</li> <li>Data: data_engineering_standards</li> <li>Architecture: event_driven_standards</li> <li>Compliance: compliance_standards, legal_compliance_standards</li> <li>Operations: cost_optimization_standards, observability_standards</li> <li>Management: project_management_standards, knowledge_management_standards</li> <li>Content: content_standards, seo_web_marketing_standards</li> <li>Tools: github_platform_standards, toolchain_standards</li> <li>MCP: model_context_protocol_standards</li> <li>General: unified_standards</li> </ul>"},{"location":"CACHE_POPULATION_GUIDE/#using-mcp-tools","title":"Using MCP Tools","text":"<p>Once the cache is populated, MCP tools can access standards:</p> <pre><code># List all standards\nstandards = await server._list_available_standards()\n\n# Get standards for a project\napplicable = await server._get_applicable_standards({\n    \"project_type\": \"web_application\",\n    \"language\": \"python\"\n})\n\n# Search standards\nresults = await server._search_standards(\"security\")\n</code></pre>"},{"location":"CACHE_POPULATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"CACHE_POPULATION_GUIDE/#issue-standards-cache-directory-not-found","title":"Issue: \"Standards cache directory not found\"","text":"<p>Solution: Run the synchronization process to create and populate the cache.</p>"},{"location":"CACHE_POPULATION_GUIDE/#issue-tools-not-finding-standards-by-id","title":"Issue: Tools not finding standards by ID","text":"<p>Solution: Ensure JSON files use lowercase IDs matching the expected format.</p>"},{"location":"CACHE_POPULATION_GUIDE/#issue-search-returns-no-results","title":"Issue: Search returns no results","text":"<p>Solution: The semantic search feature requires indexing. Check if search is enabled in configuration.</p>"},{"location":"CACHE_POPULATION_GUIDE/#automation","title":"Automation","text":"<p>To automate cache population on server startup:</p> <pre><code>async def initialize_server():\n    \"\"\"Initialize server with populated cache.\"\"\"\n    server = MCPStandardsServer()\n\n    # Check if cache needs population\n    cache_dir = Path(\"data/standards/cache\")\n    json_files = list(cache_dir.glob(\"*.json\"))\n\n    if len(json_files) &lt; 2:  # Only sync_metadata.json exists\n        print(\"Cache empty, running sync...\")\n        await server.synchronizer.sync(force=True)\n        # Convert to JSON format\n        await convert_all_standards()\n\n    return server\n</code></pre>"},{"location":"CACHE_POPULATION_GUIDE/#maintenance","title":"Maintenance","text":"<ul> <li>Sync Frequency: Standards are synced from GitHub every 6 hours by default</li> <li>Cache TTL: 24 hours (configurable)</li> <li>Manual Sync: Use <code>sync_standards</code> tool with <code>force=true</code> parameter</li> </ul>"},{"location":"CACHE_POPULATION_GUIDE/#related-documentation","title":"Related Documentation","text":"<ul> <li>MCP Server Documentation</li> <li>Standards Synchronization</li> <li>Creating Standards Guide</li> </ul>"},{"location":"CONFIGURATION_GUIDE/","title":"Configuration Guide","text":""},{"location":"CONFIGURATION_GUIDE/#overview","title":"Overview","text":"<p>This guide provides comprehensive information about configuring the MCP Standards Server for different environments and use cases.</p>"},{"location":"CONFIGURATION_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Quick Start</li> <li>Environment Variables</li> <li>Configuration Files</li> <li>Environment-Specific Configurations</li> <li>Performance Tuning</li> <li>Security Configuration</li> <li>Monitoring and Logging</li> <li>Troubleshooting</li> </ol>"},{"location":"CONFIGURATION_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"CONFIGURATION_GUIDE/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>Copy the example environment file:    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Edit <code>.env</code> with your specific configuration:    <pre><code># Basic configuration\nHTTP_HOST=127.0.0.1\nHTTP_PORT=8080\nLOG_LEVEL=INFO\nDATA_DIR=./data\n</code></pre></p> </li> <li> <p>Start the server:    <pre><code>python -m src.main\n</code></pre></p> </li> </ol>"},{"location":"CONFIGURATION_GUIDE/#docker-quick-start","title":"Docker Quick Start","text":"<pre><code># Using docker-compose\ndocker-compose up -d\n\n# Using docker directly\ndocker run -p 8080:8080 -e HTTP_HOST=0.0.0.0 mcp-standards-server\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#environment-variables","title":"Environment Variables","text":""},{"location":"CONFIGURATION_GUIDE/#core-application-settings","title":"Core Application Settings","text":""},{"location":"CONFIGURATION_GUIDE/#server-configuration","title":"Server Configuration","text":"Variable Default Description Example <code>HTTP_HOST</code> <code>127.0.0.1</code> Host address for HTTP server <code>0.0.0.0</code> <code>HTTP_PORT</code> <code>8080</code> Port for HTTP server <code>8080</code> <code>HTTP_ONLY</code> <code>false</code> Run only HTTP server without MCP <code>true</code>"},{"location":"CONFIGURATION_GUIDE/#file-system-paths","title":"File System Paths","text":"Variable Default Description Example <code>DATA_DIR</code> <code>./data</code> Root directory for data files <code>/var/lib/mcp-standards</code> <code>MCP_STANDARDS_DATA_DIR</code> <code>./data/standards</code> Directory for standards data <code>/var/lib/mcp-standards/standards</code> <code>MCP_CONFIG_PATH</code> <code>./config/mcp_config.yaml</code> Path to MCP configuration file <code>/etc/mcp-standards/config.yaml</code>"},{"location":"CONFIGURATION_GUIDE/#feature-flags","title":"Feature Flags","text":"Variable Default Description Use Case <code>MCP_DISABLE_SEARCH</code> <code>false</code> Disable semantic search features Resource-constrained environments"},{"location":"CONFIGURATION_GUIDE/#authentication-security","title":"Authentication &amp; Security","text":""},{"location":"CONFIGURATION_GUIDE/#authentication-settings","title":"Authentication Settings","text":"Variable Default Description Security Level <code>MCP_AUTH_ENABLED</code> <code>false</code> Enable authentication for MCP tools Production <code>MCP_JWT_SECRET</code> <code>\"\"</code> JWT secret key for authentication Required in production <code>MCP_MASK_ERRORS</code> <code>false</code> Mask error details in production Production <p>\u26a0\ufe0f Security Note: Always change <code>MCP_JWT_SECRET</code> in production environments.</p>"},{"location":"CONFIGURATION_GUIDE/#security-best-practices","title":"Security Best Practices","text":"<pre><code># Generate a secure JWT secret\nMCP_JWT_SECRET=$(openssl rand -base64 32)\n\n# Enable error masking in production\nMCP_MASK_ERRORS=true\n\n# Enable authentication in production\nMCP_AUTH_ENABLED=true\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#external-services","title":"External Services","text":""},{"location":"CONFIGURATION_GUIDE/#github-integration","title":"GitHub Integration","text":"Variable Default Description Required For <code>GITHUB_TOKEN</code> <code>\"\"</code> GitHub personal access token Standards synchronization <pre><code># Generate token at: https://github.com/settings/tokens\nGITHUB_TOKEN=ghp_your_token_here\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#redis-cache","title":"Redis Cache","text":"Variable Default Description Format <code>REDIS_URL</code> <code>redis://localhost:6379/0</code> Redis connection URL <code>redis://[user:pass@]host:port/db</code> <pre><code># Local Redis\nREDIS_URL=redis://localhost:6379/0\n\n# Redis with authentication\nREDIS_URL=redis://user:password@redis-server:6379/0\n\n# Redis cluster\nREDIS_URL=redis://redis-cluster:6379/0\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#vector-database","title":"Vector Database","text":"Variable Default Description Purpose <code>CHROMADB_URL</code> <code>http://localhost:8000</code> ChromaDB server URL Semantic search <pre><code># Local ChromaDB\nCHROMADB_URL=http://localhost:8000\n\n# Remote ChromaDB\nCHROMADB_URL=http://chromadb.example.com:8000\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#web-application-settings","title":"Web Application Settings","text":""},{"location":"CONFIGURATION_GUIDE/#frontend-configuration","title":"Frontend Configuration","text":"Variable Default Description Environment <code>WEB_UI_ENABLED</code> <code>true</code> Enable web UI interface Development/Production <code>WEB_UI_PORT</code> <code>3000</code> Port for web UI development server Development <code>WEB_UI_API_BASE_URL</code> <code>http://localhost:8080</code> Base URL for API calls Production"},{"location":"CONFIGURATION_GUIDE/#logging-configuration","title":"Logging Configuration","text":""},{"location":"CONFIGURATION_GUIDE/#log-settings","title":"Log Settings","text":"Variable Default Description Options <code>LOG_LEVEL</code> <code>INFO</code> Logging level <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code> <code>LOG_FORMAT</code> <code>json</code> Log format <code>json</code>, <code>text</code> <code>LOG_FILE</code> <code>\"\"</code> Log file path <code>/var/log/mcp-standards.log</code> <code>LOG_DIR</code> <code>logs</code> Directory for log files <code>/var/log/mcp-standards/</code> <code>LOG_MAX_SIZE</code> <code>10MB</code> Maximum log file size <code>10MB</code>, <code>100MB</code> <code>LOG_BACKUP_COUNT</code> <code>5</code> Number of backup log files <code>5</code>, <code>10</code>"},{"location":"CONFIGURATION_GUIDE/#logging-examples","title":"Logging Examples","text":"<pre><code># Development logging\nLOG_LEVEL=DEBUG\nLOG_FORMAT=text\nLOG_FILE=\"\"  # Log to stdout\n\n# Production logging\nLOG_LEVEL=INFO\nLOG_FORMAT=json\nLOG_FILE=/var/log/mcp-standards/app.log\nLOG_DIR=/var/log/mcp-standards/\nLOG_MAX_SIZE=100MB\nLOG_BACKUP_COUNT=10\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#performance-caching","title":"Performance &amp; Caching","text":""},{"location":"CONFIGURATION_GUIDE/#cache-configuration","title":"Cache Configuration","text":"Variable Default Description Impact <code>CACHE_ENABLED</code> <code>true</code> Enable caching Performance <code>CACHE_TTL</code> <code>3600</code> Cache time-to-live in seconds Memory vs. freshness <code>CACHE_MAX_SIZE</code> <code>1000</code> Maximum cache entries Memory usage <code>VECTOR_CACHE_SIZE</code> <code>10000</code> Vector cache size Search performance <code>SEARCH_CACHE_TTL</code> <code>300</code> Search cache TTL in seconds Search responsiveness"},{"location":"CONFIGURATION_GUIDE/#performance-tuning","title":"Performance Tuning","text":"<pre><code># High-performance setup\nCACHE_ENABLED=true\nCACHE_TTL=7200  # 2 hours\nCACHE_MAX_SIZE=5000\nVECTOR_CACHE_SIZE=50000\nSEARCH_CACHE_TTL=600  # 10 minutes\n\n# Memory-constrained setup\nCACHE_ENABLED=true\nCACHE_TTL=1800  # 30 minutes\nCACHE_MAX_SIZE=500\nVECTOR_CACHE_SIZE=5000\nSEARCH_CACHE_TTL=60  # 1 minute\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":""},{"location":"CONFIGURATION_GUIDE/#metrics-configuration","title":"Metrics Configuration","text":"Variable Default Description Use Case <code>METRICS_ENABLED</code> <code>true</code> Enable metrics collection Monitoring <code>METRICS_PORT</code> <code>9090</code> Prometheus metrics port Prometheus scraping <code>METRICS_PATH</code> <code>/metrics</code> Metrics endpoint path Custom monitoring <code>HEALTH_CHECK_INTERVAL</code> <code>30</code> Health check interval in seconds Service monitoring"},{"location":"CONFIGURATION_GUIDE/#configuration-files","title":"Configuration Files","text":""},{"location":"CONFIGURATION_GUIDE/#mcp-configuration-file","title":"MCP Configuration File","text":"<p>Create <code>config/mcp_config.yaml</code>:</p> <pre><code># MCP Server Configuration\nserver:\n  name: \"mcp-standards-server\"\n  version: \"1.0.0\"\n  description: \"MCP Standards Server\"\n\n# Tool Configuration\ntools:\n  get_applicable_standards:\n    enabled: true\n    max_results: 50\n    timeout: 30\n\n  search_standards:\n    enabled: true\n    max_results: 100\n    timeout: 10\n\n  get_standard:\n    enabled: true\n    timeout: 5\n\n# Standards Configuration\nstandards:\n  data_dir: \"./data/standards\"\n  sync_interval: 3600  # 1 hour\n  auto_sync: true\n\n# Search Configuration\nsearch:\n  enabled: true\n  index_update_interval: 300  # 5 minutes\n  similarity_threshold: 0.7\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#logging-configuration-file","title":"Logging Configuration File","text":"<p>Create <code>config/logging.yaml</code>:</p> <pre><code>version: 1\ndisable_existing_loggers: false\n\nformatters:\n  json:\n    format: '{\"timestamp\": \"%(asctime)s\", \"level\": \"%(levelname)s\", \"logger\": \"%(name)s\", \"message\": \"%(message)s\"}'\n\n  text:\n    format: '%(asctime)s - %(name)s - %(levelname)s - [%(module)s:%(funcName)s:%(lineno)d] - %(message)s'\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: INFO\n    formatter: json\n    stream: ext://sys.stdout\n\n  file:\n    class: logging.handlers.RotatingFileHandler\n    level: INFO\n    formatter: json\n    filename: /var/log/mcp-standards/app.log\n    maxBytes: 104857600  # 100MB\n    backupCount: 5\n\nloggers:\n  src:\n    level: INFO\n    handlers: [console, file]\n    propagate: false\n\n  aiohttp:\n    level: WARNING\n    handlers: [console]\n    propagate: false\n\nroot:\n  level: INFO\n  handlers: [console, file]\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"CONFIGURATION_GUIDE/#development-environment","title":"Development Environment","text":"<pre><code># .env.development\nHTTP_HOST=127.0.0.1\nHTTP_PORT=8080\nLOG_LEVEL=DEBUG\nLOG_FORMAT=text\nMCP_AUTH_ENABLED=false\nMCP_MASK_ERRORS=false\nCACHE_ENABLED=true\nMETRICS_ENABLED=true\nWEB_UI_ENABLED=true\nWEB_UI_PORT=3000\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#testing-environment","title":"Testing Environment","text":"<pre><code># .env.test\nHTTP_HOST=127.0.0.1\nHTTP_PORT=8081\nLOG_LEVEL=WARNING\nLOG_FORMAT=json\nMCP_AUTH_ENABLED=false\nMCP_MASK_ERRORS=false\nCACHE_ENABLED=false  # Disable cache for consistent tests\nMETRICS_ENABLED=false\nREDIS_URL=redis://localhost:6379/1  # Use different DB\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#staging-environment","title":"Staging Environment","text":"<pre><code># .env.staging\nHTTP_HOST=0.0.0.0\nHTTP_PORT=8080\nLOG_LEVEL=INFO\nLOG_FORMAT=json\nMCP_AUTH_ENABLED=true\nMCP_MASK_ERRORS=true\nCACHE_ENABLED=true\nMETRICS_ENABLED=true\nREDIS_URL=redis://staging-redis:6379/0\nCHROMADB_URL=http://staging-chromadb:8000\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#production-environment","title":"Production Environment","text":"<pre><code># .env.production\nHTTP_HOST=0.0.0.0\nHTTP_PORT=8080\nLOG_LEVEL=INFO\nLOG_FORMAT=json\nLOG_FILE=/var/log/mcp-standards/app.log\nLOG_DIR=/var/log/mcp-standards/\nMCP_AUTH_ENABLED=true\nMCP_MASK_ERRORS=true\nMCP_JWT_SECRET=your-production-secret-here\nCACHE_ENABLED=true\nCACHE_TTL=7200\nMETRICS_ENABLED=true\nREDIS_URL=redis://prod-redis:6379/0\nCHROMADB_URL=http://prod-chromadb:8000\nGITHUB_TOKEN=ghp_your_production_token_here\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#performance-tuning_1","title":"Performance Tuning","text":""},{"location":"CONFIGURATION_GUIDE/#memory-optimization","title":"Memory Optimization","text":"<pre><code># For systems with limited memory\nCACHE_MAX_SIZE=500\nVECTOR_CACHE_SIZE=5000\nSEARCH_CACHE_TTL=300\nLOG_BACKUP_COUNT=3\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#high-performance-setup","title":"High-Performance Setup","text":"<pre><code># For high-traffic environments\nCACHE_ENABLED=true\nCACHE_TTL=7200\nCACHE_MAX_SIZE=10000\nVECTOR_CACHE_SIZE=100000\nSEARCH_CACHE_TTL=1800\nHEALTH_CHECK_INTERVAL=15\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#cpu-optimization","title":"CPU Optimization","text":"<pre><code># Reduce CPU usage\nMCP_DISABLE_SEARCH=false  # Keep search enabled but tune\nSEARCH_CACHE_TTL=1800  # Cache search results longer\nHEALTH_CHECK_INTERVAL=60  # Check health less frequently\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#security-configuration","title":"Security Configuration","text":""},{"location":"CONFIGURATION_GUIDE/#production-security-checklist","title":"Production Security Checklist","text":"<pre><code># \u2705 Enable authentication\nMCP_AUTH_ENABLED=true\n\n# \u2705 Set secure JWT secret\nMCP_JWT_SECRET=$(openssl rand -base64 32)\n\n# \u2705 Mask errors in production\nMCP_MASK_ERRORS=true\n\n# \u2705 Secure file permissions\nchmod 600 .env\nchown app:app .env\n\n# \u2705 Use secure Redis connection\nREDIS_URL=redis://user:password@redis:6379/0\n\n# \u2705 Enable HTTPS (via reverse proxy)\nHTTP_HOST=127.0.0.1  # Bind to localhost, use reverse proxy\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#network-security","title":"Network Security","text":"<pre><code># Bind to localhost only (use reverse proxy)\nHTTP_HOST=127.0.0.1\n\n# Or bind to specific interface\nHTTP_HOST=192.168.1.100\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#container-security","title":"Container Security","text":"<pre><code># Use non-root user\nUSER app:app\n\n# Set secure environment\nENV MCP_MASK_ERRORS=true\nENV MCP_AUTH_ENABLED=true\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"CONFIGURATION_GUIDE/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># prometheus.yml\nscrape_configs:\n  - job_name: 'mcp-standards-server'\n    static_configs:\n      - targets: ['localhost:8080']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Key metrics to monitor: - HTTP request rate and latency - MCP tool call success rate - Cache hit ratio - Error rates - Memory and CPU usage</p>"},{"location":"CONFIGURATION_GUIDE/#log-aggregation","title":"Log Aggregation","text":"<pre><code># For centralized logging\nLOG_FORMAT=json\nLOG_FILE=/var/log/mcp-standards/app.log\n\n# Ship logs to ELK/EFK stack\n# Configure Filebeat, Fluentd, or similar\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"CONFIGURATION_GUIDE/#common-issues","title":"Common Issues","text":""},{"location":"CONFIGURATION_GUIDE/#1-server-wont-start","title":"1. Server Won't Start","text":"<p>Issue: Port already in use <pre><code># Solution: Change port or kill process\nHTTP_PORT=8081\n# or\nsudo lsof -ti:8080 | xargs kill -9\n</code></pre></p>"},{"location":"CONFIGURATION_GUIDE/#2-authentication-failures","title":"2. Authentication Failures","text":"<p>Issue: Invalid JWT secret <pre><code># Solution: Generate new secret\nMCP_JWT_SECRET=$(openssl rand -base64 32)\n</code></pre></p>"},{"location":"CONFIGURATION_GUIDE/#3-cache-issues","title":"3. Cache Issues","text":"<p>Issue: Redis connection failed <pre><code># Solution: Check Redis connection\nredis-cli ping\n# Update Redis URL if needed\nREDIS_URL=redis://localhost:6379/0\n</code></pre></p>"},{"location":"CONFIGURATION_GUIDE/#4-search-not-working","title":"4. Search Not Working","text":"<p>Issue: ChromaDB connection failed <pre><code># Solution: Check ChromaDB status\ncurl http://localhost:8000/api/v1/heartbeat\n# Update ChromaDB URL if needed\nCHROMADB_URL=http://localhost:8000\n</code></pre></p>"},{"location":"CONFIGURATION_GUIDE/#debug-configuration","title":"Debug Configuration","text":"<pre><code># Enable debug logging\nLOG_LEVEL=DEBUG\n\n# Disable error masking\nMCP_MASK_ERRORS=false\n\n# Enable all features for testing\nMCP_DISABLE_SEARCH=false\nCACHE_ENABLED=true\nMETRICS_ENABLED=true\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#health-check-debugging","title":"Health Check Debugging","text":"<pre><code># Check service health\ncurl http://localhost:8080/health\n\n# Check specific components\ncurl http://localhost:8080/health?checks=database,cache,search\n\n# Check readiness\ncurl http://localhost:8080/health/ready\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#configuration-validation","title":"Configuration Validation","text":""},{"location":"CONFIGURATION_GUIDE/#environment-variable-validation","title":"Environment Variable Validation","text":"<p>The server validates configuration on startup. Common validation errors:</p> <pre><code># Invalid log level\nLOG_LEVEL=INVALID  # Error: Invalid log level\n\n# Invalid port\nHTTP_PORT=99999  # Error: Port out of range\n\n# Missing required values (when auth enabled)\nMCP_AUTH_ENABLED=true\nMCP_JWT_SECRET=\"\"  # Error: JWT secret required when auth enabled\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#configuration-testing","title":"Configuration Testing","text":"<pre><code># Test configuration\npython -m src.main --validate-config\n\n# Test specific environment\npython -m src.main --env=production --validate-config\n</code></pre>"},{"location":"CONFIGURATION_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"CONFIGURATION_GUIDE/#1-environment-management","title":"1. Environment Management","text":"<ul> <li>Use different <code>.env</code> files for different environments</li> <li>Never commit <code>.env</code> files to version control</li> <li>Use secrets management in production</li> </ul>"},{"location":"CONFIGURATION_GUIDE/#2-security","title":"2. Security","text":"<ul> <li>Always enable authentication in production</li> <li>Use strong JWT secrets</li> <li>Mask errors in production</li> <li>Secure file permissions</li> </ul>"},{"location":"CONFIGURATION_GUIDE/#3-performance","title":"3. Performance","text":"<ul> <li>Enable caching for better performance</li> <li>Tune cache sizes based on available memory</li> <li>Monitor metrics to optimize configuration</li> </ul>"},{"location":"CONFIGURATION_GUIDE/#4-monitoring","title":"4. Monitoring","text":"<ul> <li>Enable metrics collection</li> <li>Set up health checks</li> <li>Configure log aggregation</li> <li>Monitor key performance indicators</li> </ul>"},{"location":"CONFIGURATION_GUIDE/#5-backup","title":"5. Backup","text":"<ul> <li>Backup configuration files</li> <li>Backup data directories</li> <li>Document configuration changes</li> </ul>"},{"location":"CONFIGURATION_GUIDE/#support","title":"Support","text":"<p>For configuration help:</p> <ul> <li>Check the API Documentation</li> <li>Review troubleshooting guide</li> <li>Open an issue: https://github.com/williamzujkowski/mcp-standards-server/issues</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/","title":"Creating Standards Guide","text":"<p>This guide explains how to create new standards for the MCP Standards Server using the built-in template system and generation tools.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#overview","title":"Overview","text":"<p>The MCP Standards Server provides a comprehensive template-based system for creating new standards. This ensures consistency, quality, and completeness across all standards in the ecosystem.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"CREATING_STANDARDS_GUIDE/#1-identify-the-standard-type","title":"1. Identify the Standard Type","text":"<p>First, determine what kind of standard you're creating:</p> <ul> <li>Technical Standards: Programming languages, frameworks, tools</li> <li>Process Standards: Workflows, reviews, operations</li> <li>Domain Standards: Specialized areas like AI/ML, blockchain, gaming</li> <li>Compliance Standards: Security, privacy, regulatory requirements</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#2-choose-a-template","title":"2. Choose a Template","text":"<p>Select the appropriate template from <code>templates/</code>:</p> <ul> <li>base.j2: General-purpose standard template</li> <li>technical.j2: Technical implementation standards</li> <li>process.j2: Process and workflow standards</li> <li>compliance.j2: Compliance and regulatory standards</li> <li>operational.j2: Operations and monitoring standards</li> <li>review_process.j2: Review and approval workflows</li> </ul> <p>See TEMPLATE_INDEX.md for detailed template descriptions.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#3-create-your-standard","title":"3. Create Your Standard","text":"<pre><code># Using the CLI (recommended)\nmcp-standards generate --template technical --name \"GraphQL API Standards\"\n\n# Or manually create a YAML configuration\ncat &gt; my_standard.yaml &lt;&lt; EOF\ntitle: \"GraphQL API Standards\"\nversion: \"1.0.0\"\ncategory: \"API Design\"\ndomain: \"Web Development\"\ndescription: \"Best practices for GraphQL API design and implementation\"\n\nsections:\n  overview:\n    purpose: \"Standardize GraphQL API development across teams\"\n    scope: \"All GraphQL APIs in production systems\"\n\n  requirements:\n    - \"Use schema-first design approach\"\n    - \"Implement proper error handling\"\n    - \"Include comprehensive documentation\"\n\n  best_practices:\n    - title: \"Schema Design\"\n      content: \"Design schemas with clear types and relationships\"\n    - title: \"Query Optimization\"\n      content: \"Implement DataLoader pattern for N+1 prevention\"\nEOF\n</code></pre>"},{"location":"CREATING_STANDARDS_GUIDE/#standard-structure","title":"Standard Structure","text":""},{"location":"CREATING_STANDARDS_GUIDE/#required-sections","title":"Required Sections","text":"<p>Every standard must include:</p> <ol> <li> <p>Metadata Header <pre><code>title: \"Standard Title\"\nversion: \"1.0.0\"\ncategory: \"Category Name\"\ndomain: \"Domain Name\"\ndescription: \"Brief description\"\nlast_updated: \"2025-01-08\"\nauthors:\n  - \"Your Name\"\n</code></pre></p> </li> <li> <p>Overview Section</p> </li> <li>Purpose and objectives</li> <li>Scope and applicability</li> <li> <p>Key principles</p> </li> <li> <p>Requirements</p> </li> <li>Mandatory requirements</li> <li>Compliance criteria</li> <li> <p>Success metrics</p> </li> <li> <p>Best Practices</p> </li> <li>Recommended approaches</li> <li>Examples and patterns</li> <li>Anti-patterns to avoid</li> </ol>"},{"location":"CREATING_STANDARDS_GUIDE/#optional-sections","title":"Optional Sections","text":"<p>Depending on the standard type, include:</p> <ul> <li>Implementation Examples: Code samples and configurations</li> <li>Testing Guidelines: How to verify compliance</li> <li>Tool Recommendations: Specific tools and configurations</li> <li>Migration Guide: For updating from previous versions</li> <li>FAQ: Common questions and answers</li> <li>Glossary: Domain-specific terminology</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#quality-assurance","title":"Quality Assurance","text":""},{"location":"CREATING_STANDARDS_GUIDE/#validation-checklist","title":"Validation Checklist","text":"<p>Before submitting your standard, ensure it:</p> <ul> <li> Has complete metadata with version and authors</li> <li> Includes clear overview and scope</li> <li> Contains actionable requirements</li> <li> Provides concrete examples</li> <li> References related standards</li> <li> Maps to NIST controls (if applicable)</li> <li> Includes testing/validation methods</li> <li> Has proper formatting and structure</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#quality-metrics","title":"Quality Metrics","text":"<p>The system automatically scores standards on:</p> <ol> <li>Completeness (20%): All required sections present</li> <li>Clarity (20%): Clear, unambiguous language</li> <li>Actionability (20%): Specific, implementable guidelines</li> <li>Examples (15%): Working code/configuration examples</li> <li>References (15%): Links to resources and related standards</li> <li>Testability (10%): Validation methods included</li> </ol> <p>Aim for a quality score of 80% or higher.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#adding-to-the-system","title":"Adding to the System","text":""},{"location":"CREATING_STANDARDS_GUIDE/#1-local-testing","title":"1. Local Testing","text":"<pre><code># Validate your standard\nmcp-standards validate my_standard.yaml\n\n# Test with the rule engine\nmcp-standards query --context \"project_type=api,framework=graphql\"\n</code></pre>"},{"location":"CREATING_STANDARDS_GUIDE/#2-integration","title":"2. Integration","text":"<p>Place your standard in the appropriate directory:</p> <pre><code>data/standards/\n\u251c\u2500\u2500 GRAPHQL_API_STANDARDS.md     # Generated from template\n\u2514\u2500\u2500 GRAPHQL_API_STANDARDS.yaml   # Source configuration\n</code></pre>"},{"location":"CREATING_STANDARDS_GUIDE/#3-update-rule-engine","title":"3. Update Rule Engine","text":"<p>Add detection rules to <code>data/standards/meta/enhanced-selection-rules.json</code>:</p> <pre><code>{\n  \"id\": \"graphql-api\",\n  \"name\": \"GraphQL API Standards\",\n  \"description\": \"Standards for GraphQL API development\",\n  \"priority\": 15,\n  \"conditions\": {\n    \"logic\": \"OR\",\n    \"conditions\": [\n      {\n        \"field\": \"framework\",\n        \"operator\": \"contains\",\n        \"value\": \"graphql\"\n      },\n      {\n        \"field\": \"project_type\",\n        \"operator\": \"equals\",\n        \"value\": \"graphql_api\"\n      }\n    ]\n  },\n  \"standards\": [\"GRAPHQL_API_STANDARDS\"],\n  \"tags\": [\"api\", \"graphql\", \"web\"]\n}\n</code></pre>"},{"location":"CREATING_STANDARDS_GUIDE/#publishing-standards","title":"Publishing Standards","text":""},{"location":"CREATING_STANDARDS_GUIDE/#community-review-process","title":"Community Review Process","text":"<ol> <li>Draft Phase</li> <li>Create initial standard</li> <li>Self-review against checklist</li> <li> <p>Run validation tools</p> </li> <li> <p>Review Phase</p> </li> <li>Submit PR to repository</li> <li>Address reviewer feedback</li> <li> <p>Update based on community input</p> </li> <li> <p>Publication</p> </li> <li>Merge approved standard</li> <li>Update catalog and index</li> <li>Announce to community</li> </ol>"},{"location":"CREATING_STANDARDS_GUIDE/#version-management","title":"Version Management","text":"<p>Follow semantic versioning:</p> <ul> <li>1.0.0: Initial release</li> <li>1.1.0: New features or sections</li> <li>1.0.1: Fixes and clarifications</li> <li>2.0.0: Breaking changes</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#examples","title":"Examples","text":""},{"location":"CREATING_STANDARDS_GUIDE/#technical-standard-example","title":"Technical Standard Example","text":"<p>See <code>data/standards/ADVANCED_API_DESIGN_STANDARDS.md</code> for a complete example of a technical standard covering REST, GraphQL, and gRPC.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#process-standard-example","title":"Process Standard Example","text":"<p>See <code>data/standards/CODE_REVIEW_STANDARDS.md</code> for a process-oriented standard with workflows and checklists.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#compliance-standard-example","title":"Compliance Standard Example","text":"<p>See <code>data/standards/DATA_PRIVACY_COMPLIANCE_STANDARDS.md</code> for a compliance standard with regulatory mappings.</p>"},{"location":"CREATING_STANDARDS_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"CREATING_STANDARDS_GUIDE/#dos","title":"Do's","text":"<ul> <li>\u2705 Be specific and actionable</li> <li>\u2705 Include real-world examples</li> <li>\u2705 Provide tool configurations</li> <li>\u2705 Reference authoritative sources</li> <li>\u2705 Consider different skill levels</li> <li>\u2705 Include migration guidance</li> <li>\u2705 Test your examples</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#donts","title":"Don'ts","text":"<ul> <li>\u274c Be vague or ambiguous</li> <li>\u274c Assume prior knowledge</li> <li>\u274c Ignore edge cases</li> <li>\u274c Skip validation</li> <li>\u274c Forget version history</li> <li>\u274c Omit testing methods</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#getting-help","title":"Getting Help","text":"<ul> <li>Review existing standards for patterns</li> <li>Check the TEMPLATE_INDEX.md</li> <li>Use the validation tools</li> <li>Ask in community forums</li> <li>Submit issues for clarification</li> </ul>"},{"location":"CREATING_STANDARDS_GUIDE/#contributing-templates","title":"Contributing Templates","text":"<p>If you need a new template type:</p> <ol> <li>Identify the gap in existing templates</li> <li>Create the template following Jinja2 syntax</li> <li>Add comprehensive documentation</li> <li>Include at least two examples</li> <li>Submit PR with rationale</li> </ol>"},{"location":"CREATING_STANDARDS_GUIDE/#resources","title":"Resources","text":"<ul> <li>Template Index</li> <li>Standards Catalog</li> <li>Rule Engine Documentation</li> <li>Quality Assurance Framework</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/","title":"Export Functionality Documentation","text":""},{"location":"EXPORT_FUNCTIONALITY/#overview","title":"Overview","text":"<p>The MCP Standards Server Web UI now includes comprehensive export functionality that allows users to export standards in various formats. This feature supports both individual and bulk exports with proper error handling and user feedback.</p>"},{"location":"EXPORT_FUNCTIONALITY/#features","title":"Features","text":""},{"location":"EXPORT_FUNCTIONALITY/#1-export-formats","title":"1. Export Formats","text":"<ul> <li>JSON (Single file): Exports selected standards or all standards into a single JSON file with metadata</li> <li>Markdown (Individual files): Exports each standard as a separate Markdown file</li> <li>JSON (Individual files): Exports each standard as a separate JSON file</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#2-export-modes","title":"2. Export Modes","text":""},{"location":"EXPORT_FUNCTIONALITY/#individual-export","title":"Individual Export","text":"<ul> <li>Quick export button on each standard card</li> <li>Exports a single standard in Markdown format by default</li> <li>Available directly from the standards browser</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#bulk-export","title":"Bulk Export","text":"<ul> <li>Select multiple standards using the \"Select Multiple\" mode</li> <li>Export all selected standards at once</li> <li>Option to export all standards if none are selected</li> <li>Progress indicators during export process</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#3-user-interface","title":"3. User Interface","text":""},{"location":"EXPORT_FUNCTIONALITY/#selection-mode","title":"Selection Mode","text":"<ul> <li>Toggle \"Select Multiple\" button to enable selection mode</li> <li>Checkboxes appear on each standard card</li> <li>\"Select All\" and \"Clear\" buttons for quick selection management</li> <li>Selection count displayed in the header</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#export-dialog","title":"Export Dialog","text":"<ul> <li>Clean dialog interface for choosing export format</li> <li>Clear description of what will be exported</li> <li>Radio buttons for format selection</li> <li>Export button with loading state</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#feedback","title":"Feedback","text":"<ul> <li>Success notifications via snackbar</li> <li>Error alerts for failed exports</li> <li>Progress indication during export</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#implementation-details","title":"Implementation Details","text":""},{"location":"EXPORT_FUNCTIONALITY/#frontend-components","title":"Frontend Components","text":""},{"location":"EXPORT_FUNCTIONALITY/#standardsbrowsertsx","title":"StandardsBrowser.tsx","text":"<ul> <li>Added state management for selection and export</li> <li>Implemented export dialog with format options</li> <li>Added checkbox UI for multi-select mode</li> <li>Error handling and user feedback</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#standardsservicets","title":"StandardsService.ts","text":"<ul> <li><code>exportStandard()</code>: Exports a single standard</li> <li><code>exportBulkStandards()</code>: Exports multiple standards efficiently</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#backend-endpoints","title":"Backend Endpoints","text":""},{"location":"EXPORT_FUNCTIONALITY/#get-apiexportstandard_id","title":"GET <code>/api/export/{standard_id}</code>","text":"<ul> <li>Exports a single standard</li> <li>Supports <code>markdown</code> and <code>json</code> formats</li> <li>Returns file download response</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#post-apiexportbulk","title":"POST <code>/api/export/bulk</code>","text":"<ul> <li>Exports multiple standards in a single request</li> <li>Request body: <code>{ standards: string[], format: string }</code></li> <li>Returns combined JSON file</li> </ul>"},{"location":"EXPORT_FUNCTIONALITY/#usage","title":"Usage","text":""},{"location":"EXPORT_FUNCTIONALITY/#exporting-a-single-standard","title":"Exporting a Single Standard","text":"<ol> <li>Navigate to the Standards Browser</li> <li>Find the standard you want to export</li> <li>Click the \"Export\" button on the standard card</li> <li>The standard will be downloaded as a Markdown file</li> </ol>"},{"location":"EXPORT_FUNCTIONALITY/#bulk-exporting-standards","title":"Bulk Exporting Standards","text":"<ol> <li>Click \"Select Multiple\" in the header</li> <li>Check the standards you want to export</li> <li>Click \"Export Standards\"</li> <li>Choose your export format:</li> <li>JSON (Single file): All standards in one JSON file</li> <li>Markdown (Individual files): Each standard as a separate .md file</li> <li>JSON (Individual files): Each standard as a separate .json file</li> <li>Click \"Export\" and wait for the download(s)</li> </ol>"},{"location":"EXPORT_FUNCTIONALITY/#exporting-all-standards","title":"Exporting All Standards","text":"<ol> <li>Click \"Export Standards\" without selecting any</li> <li>Choose your export format</li> <li>All standards will be exported</li> </ol>"},{"location":"EXPORT_FUNCTIONALITY/#testing","title":"Testing","text":"<p>A test script is provided at <code>test_export_functionality.py</code> that verifies: - Single standard export (Markdown and JSON) - Bulk export with specific standards - Bulk export of all standards - Error handling</p> <p>Run the test with: <pre><code>python test_export_functionality.py\n</code></pre></p>"},{"location":"EXPORT_FUNCTIONALITY/#error-handling","title":"Error Handling","text":"<p>The export functionality includes comprehensive error handling: - Network errors are caught and displayed to the user - Invalid format requests return appropriate error messages - Failed exports show error notifications - The UI remains responsive during exports</p>"},{"location":"EXPORT_FUNCTIONALITY/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Individual file exports include a 100ms delay between files to prevent browser overwhelm</li> <li>Bulk JSON export uses a dedicated endpoint for efficiency</li> <li>Large exports show progress indicators</li> <li>Temporary files are created on the server and cleaned up after download</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/","title":"MCP Standards Implementation Summary","text":"<p>This document summarizes the comprehensive implementation of Model Context Protocol (MCP) standards in the MCP Standards Server.</p>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#overview","title":"Overview","text":"<p>The implementation brings the server to production-ready status by addressing key requirements from the MCP standards including security, validation, performance monitoring, and caching.</p>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#key-implementations","title":"Key Implementations","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#1-security-features","title":"1. Security Features \u2705","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#jwt-authentication","title":"JWT Authentication","text":"<ul> <li>Location: <code>src/core/auth.py</code></li> <li>Features:</li> <li>JWT token generation and validation</li> <li>API key authentication support</li> <li>Bearer token and X-API-Key header support</li> <li>Token revocation capability</li> <li>Configurable expiry (default 24 hours)</li> <li>Permission/scope checking</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#input-validation","title":"Input Validation","text":"<ul> <li>Location: <code>src/core/validation.py</code></li> <li>Features:</li> <li>Comprehensive Pydantic models for all MCP tools</li> <li>Input sanitization and dangerous pattern detection</li> <li>Size limits and bounds checking</li> <li>Type validation with detailed error messages</li> <li>SQL injection and code injection prevention</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Location: <code>src/core/rate_limiter.py</code></li> <li>Features:</li> <li>Multi-tier rate limiting (minute/hour/day)</li> <li>Token bucket algorithm implementation</li> <li>Redis-backed for distributed systems</li> <li>Adaptive rate limiting based on reputation</li> <li>Per-user and per-API key limits</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#2-error-handling","title":"2. Error Handling \u2705","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#structured-errors","title":"Structured Errors","text":"<ul> <li>Location: <code>src/core/errors.py</code></li> <li>Features:</li> <li>Standardized error codes (AUTH_, VAL_, TOOL_*, etc.)</li> <li>Detailed error information with suggestions</li> <li>Field-level validation errors</li> <li>Consistent JSON error responses</li> <li>Error context and debugging information</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#3-performance-features","title":"3. Performance Features \u2705","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#redis-caching","title":"Redis Caching","text":"<ul> <li>Location: <code>src/core/cache/</code></li> <li>Features:</li> <li>Two-tier caching (L1 in-memory + L2 Redis)</li> <li>Configurable TTL strategies per tool</li> <li>Automatic compression for large responses</li> <li>Cache invalidation with relationships</li> <li>Cache warming capabilities</li> <li>Circuit breaker for Redis failures</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Location: <code>src/core/metrics.py</code></li> <li>Features:</li> <li>Comprehensive metrics collection</li> <li>Prometheus export format</li> <li>Tool call duration tracking</li> <li>Success/failure rates</li> <li>Cache hit/miss statistics</li> <li>Request/response size monitoring</li> <li>Real-time metrics dashboard</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#4-mcp-manifest","title":"4. MCP Manifest \u2705","text":"<ul> <li>Location: <code>manifest.json</code></li> <li>Features:</li> <li>Complete capability declarations</li> <li>Tool schemas with validation</li> <li>Resource declarations</li> <li>Transport specifications</li> <li>Authentication requirements</li> <li>Performance targets</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#architecture-improvements","title":"Architecture Improvements","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#1-modular-design","title":"1. Modular Design","text":"<ul> <li>Clear separation of concerns</li> <li>Pluggable authentication providers</li> <li>Extensible validation framework</li> <li>Configurable caching strategies</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#2-resilience","title":"2. Resilience","text":"<ul> <li>Graceful degradation without Redis</li> <li>Circuit breaker patterns</li> <li>Retry logic with exponential backoff</li> <li>Connection pooling</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#3-observability","title":"3. Observability","text":"<ul> <li>Comprehensive logging</li> <li>Metrics at every layer</li> <li>Performance tracking</li> <li>Error tracking with context</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#performance-targets-achieved","title":"Performance Targets Achieved","text":"Metric Target Achieved Tool call latency &lt;50ms \u2705 With caching Resource read &lt;100ms \u2705 With caching Connection establishment &lt;500ms \u2705 Test coverage 85%+ \u26a0\ufe0f ~80%"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#security-compliance","title":"Security Compliance","text":"<ul> <li>\u2705 JWT-based authentication</li> <li>\u2705 Input validation on all endpoints</li> <li>\u2705 Rate limiting protection</li> <li>\u2705 Secure error handling (no stack traces in production)</li> <li>\u2705 Audit logging for security events</li> <li>\u2705 Token revocation support</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#testing","title":"Testing","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#unit-tests-created","title":"Unit Tests Created","text":"<ul> <li><code>tests/unit/core/test_auth.py</code> - 17 tests for authentication</li> <li><code>tests/unit/core/test_validation.py</code> - 18 tests for validation</li> <li><code>tests/unit/core/test_rate_limiter.py</code> - 16 tests for rate limiting</li> <li><code>tests/unit/core/test_metrics.py</code> - 17 tests for metrics</li> <li><code>tests/unit/core/cache/</code> - Comprehensive cache tests</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#integration-points","title":"Integration Points","text":"<ul> <li>E2E tests updated to work with new security features</li> <li>Performance tests validate metrics collection</li> <li>Cache integration tests verify two-tier behavior</li> </ul>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#configuration","title":"Configuration","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#environment-variables","title":"Environment Variables","text":"<pre><code># Authentication\nMCP_AUTH_ENABLED=true\nMCP_JWT_SECRET=your-secret-key\n\n# Rate Limiting\nMCP_RATE_LIMIT_ENABLED=true\nMCP_RATE_LIMIT_WINDOW=60\nMCP_RATE_LIMIT_MAX_REQUESTS=100\n\n# Caching\nMCP_CACHE_ENABLED=true\nMCP_CACHE_TTL_DEFAULT=300\n\n# Metrics\nMCP_METRICS_ENABLED=true\nMCP_METRICS_EXPORT_INTERVAL=60\n</code></pre>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#cache-configuration","title":"Cache Configuration","text":"<p>See <code>config/cache.example.yaml</code> for detailed cache configuration options.</p>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#new-mcp-tools-added","title":"New MCP Tools Added","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#get_metrics_dashboard","title":"get_metrics_dashboard","text":"<p>Returns comprehensive metrics including: - Total calls and error rates - Tool performance statistics - Cache hit rates - Authentication statistics - Rate limit information</p>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#migration-guide","title":"Migration Guide","text":""},{"location":"MCP_STANDARDS_IMPLEMENTATION/#for-existing-users","title":"For Existing Users","text":"<ol> <li>Authentication is disabled by default - no breaking changes</li> <li>Enable features incrementally via environment variables</li> <li>Configure cache strategies in <code>config/cache.yaml</code></li> <li>Monitor metrics via new dashboard tool</li> </ol>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#for-new-deployments","title":"For New Deployments","text":"<ol> <li>Set up Redis for caching and rate limiting</li> <li>Configure JWT secret for authentication</li> <li>Adjust rate limits based on expected load</li> <li>Enable metrics export for monitoring</li> </ol>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#future-enhancements","title":"Future Enhancements","text":"<p>While significant progress has been made, some areas remain for future work:</p> <ol> <li>WebSocket Transport - Add real-time bidirectional communication</li> <li>Privacy Filtering - Implement PII detection and redaction</li> <li>Connection Retry Logic - Add exponential backoff for failed connections</li> <li>Performance Benchmarks - Create comprehensive benchmark suite</li> </ol>"},{"location":"MCP_STANDARDS_IMPLEMENTATION/#conclusion","title":"Conclusion","text":"<p>The MCP Standards Server now implements the core requirements of the Model Context Protocol standards, providing a secure, performant, and production-ready implementation. The modular architecture allows for easy extension and customization based on specific deployment needs.</p>"},{"location":"SECURITY_CONFIGURATION/","title":"Security Configuration Guide","text":""},{"location":"SECURITY_CONFIGURATION/#overview","title":"Overview","text":"<p>This guide documents the security configuration options available in the MCP Standards Server and provides best practices for secure deployment.</p>"},{"location":"SECURITY_CONFIGURATION/#network-security","title":"Network Security","text":""},{"location":"SECURITY_CONFIGURATION/#bind-address-configuration","title":"Bind Address Configuration","text":"<p>By default, all services bind to <code>127.0.0.1</code> (localhost) for security. This prevents unauthorized network access.</p>"},{"location":"SECURITY_CONFIGURATION/#mcp-server","title":"MCP Server","text":"<pre><code># Default (secure - localhost only)\npython -m src.server\n\n# Custom bind address (use with caution)\nexport MCP_HOST=192.168.1.100\npython -m src.server\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#http-server","title":"HTTP Server","text":"<pre><code># Default (secure - localhost only)\npython -m src.http_server\n\n# Custom bind address (use with caution)\nexport HTTP_HOST=192.168.1.100\npython -m src.http_server\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#web-backend","title":"Web Backend","text":"<pre><code># Default (secure - localhost only)\npython web/backend/main.py\n\n# Custom bind address (use with caution)\nexport WEB_HOST=192.168.1.100\npython web/backend/main.py\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Production Deployment</li> <li>Always use a reverse proxy (nginx, Apache) for external access</li> <li>Never expose services directly on <code>0.0.0.0</code></li> <li> <p>Use TLS/SSL for all external connections</p> </li> <li> <p>Environment Variables <pre><code># Secure configuration example\nexport MCP_HOST=127.0.0.1\nexport MCP_PORT=50051\nexport HTTP_HOST=127.0.0.1\nexport HTTP_PORT=8080\nexport WEB_HOST=127.0.0.1\nexport WEB_PORT=8000\n</code></pre></p> </li> <li> <p>Firewall Rules <pre><code># Allow only localhost connections\nsudo ufw deny 50051\nsudo ufw deny 8080\nsudo ufw deny 8000\n</code></pre></p> </li> </ol>"},{"location":"SECURITY_CONFIGURATION/#dependency-security","title":"Dependency Security","text":""},{"location":"SECURITY_CONFIGURATION/#security-scanning","title":"Security Scanning","text":"<p>The project includes security scanning tools:</p> <pre><code># Install development dependencies including security tools\npip install -e \".[dev]\"\n\n# Run dependency security scan\npip-audit\n\n# Alternative security scan\nsafety check\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#automated-security-checks","title":"Automated Security Checks","text":"<p>Add to your CI/CD pipeline:</p> <pre><code>- name: Security Audit\n  run: |\n    pip install pip-audit safety\n    pip-audit\n    safety check\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"SECURITY_CONFIGURATION/#jwt-configuration","title":"JWT Configuration","text":"<p>For API authentication:</p> <pre><code># Environment variables\nJWT_SECRET_KEY=your-secret-key-here\nJWT_ALGORITHM=HS256\nJWT_EXPIRATION_HOURS=24\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#api-key-management","title":"API Key Management","text":"<pre><code># Environment variables\nAPI_KEY=your-api-key-here\nAPI_KEY_HEADER=X-API-Key\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#data-security","title":"Data Security","text":""},{"location":"SECURITY_CONFIGURATION/#redis-security","title":"Redis Security","text":"<pre><code># Environment variables\nREDIS_PASSWORD=your-redis-password\nREDIS_SSL=true\nREDIS_SSL_CERT_REQS=required\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#database-security","title":"Database Security","text":"<pre><code># Environment variables\nDATABASE_ENCRYPTION=true\nDATABASE_SSL_MODE=require\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"SECURITY_CONFIGURATION/#security-event-logging","title":"Security Event Logging","text":"<pre><code># Environment variables\nSECURITY_LOG_LEVEL=INFO\nSECURITY_LOG_FILE=/var/log/mcp-standards/security.log\nENABLE_AUDIT_LOGGING=true\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#metrics-security","title":"Metrics Security","text":"<pre><code># Prometheus metrics endpoint security\nMETRICS_AUTH_REQUIRED=true\nMETRICS_USERNAME=metrics_user\nMETRICS_PASSWORD=secure_password\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#vulnerability-management","title":"Vulnerability Management","text":""},{"location":"SECURITY_CONFIGURATION/#regular-updates","title":"Regular Updates","text":"<pre><code># Check for outdated packages\npip list --outdated\n\n# Update all dependencies\npip install --upgrade -r requirements.txt\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#security-patches","title":"Security Patches","text":"<p>Monitor security advisories: - GitHub Security Advisories - Python Security Announcements - NIST National Vulnerability Database</p>"},{"location":"SECURITY_CONFIGURATION/#incident-response","title":"Incident Response","text":""},{"location":"SECURITY_CONFIGURATION/#security-contacts","title":"Security Contacts","text":"<pre><code>Security Team: security@your-org.com\nIncident Response: incident-response@your-org.com\n</code></pre>"},{"location":"SECURITY_CONFIGURATION/#response-procedures","title":"Response Procedures","text":"<ol> <li>Detection: Monitor logs and alerts</li> <li>Containment: Isolate affected systems</li> <li>Eradication: Remove security threats</li> <li>Recovery: Restore normal operations</li> <li>Lessons Learned: Update security measures</li> </ol>"},{"location":"SECURITY_CONFIGURATION/#compliance","title":"Compliance","text":""},{"location":"SECURITY_CONFIGURATION/#nist-controls-implemented","title":"NIST Controls Implemented","text":"<ul> <li>AC-3: Access Enforcement</li> <li>AC-4: Information Flow Enforcement</li> <li>AU-2: Audit Events</li> <li>IA-2: Authentication</li> <li>SC-8: Transmission Confidentiality</li> <li>SI-2: Flaw Remediation</li> </ul>"},{"location":"SECURITY_CONFIGURATION/#security-standards","title":"Security Standards","text":"<ul> <li>OWASP Top 10 compliance</li> <li>CIS Security Controls</li> <li>ISO 27001 alignment</li> </ul>"},{"location":"SECURITY_CONFIGURATION/#security-checklist","title":"Security Checklist","text":"<ul> <li> All services bound to localhost by default</li> <li> Environment variables for sensitive configuration</li> <li> Security scanning tools installed</li> <li> Regular dependency updates scheduled</li> <li> Audit logging enabled</li> <li> TLS/SSL configured for production</li> <li> Firewall rules implemented</li> <li> Incident response plan documented</li> <li> Security training completed</li> <li> Compliance requirements verified</li> </ul>"},{"location":"WORKFLOW_FIXES/","title":"GitHub Workflow Fixes Summary","text":""},{"location":"WORKFLOW_FIXES/#overview","title":"Overview","text":"<p>This document summarizes the fixes applied to resolve GitHub workflow failures and improve test coverage.</p>"},{"location":"WORKFLOW_FIXES/#issues-identified-and-fixed","title":"Issues Identified and Fixed","text":""},{"location":"WORKFLOW_FIXES/#1-dependency-management-issues","title":"1. Dependency Management Issues","text":"<ul> <li>Problem: Conflicting dependencies between <code>setup.py</code> and <code>pyproject.toml</code></li> <li>Fix: </li> <li>Removed invalid <code>asyncio&gt;=3.4.3</code> dependency (asyncio is built-in)</li> <li>Aligned Python version requirements to <code>&gt;=3.10</code></li> <li>Added missing dependencies: tree-sitter, aiofiles, jsonschema, pydantic</li> </ul>"},{"location":"WORKFLOW_FIXES/#2-critical-python-syntax-error","title":"2. Critical Python Syntax Error","text":"<ul> <li>Problem: JavaScript-style boolean <code>false</code> instead of Python <code>False</code> in <code>src/mcp_server.py:300</code></li> <li>Fix: Changed <code>\"default\": false</code> to <code>\"default\": False</code></li> </ul>"},{"location":"WORKFLOW_FIXES/#3-e2e-test-failures","title":"3. E2E Test Failures","text":"<ul> <li>Problem: AsyncIO cancellation errors and missing test data</li> <li>Fixes:</li> <li>Added exception handling for asyncio cancellation errors in <code>conftest.py</code></li> <li>Added comprehensive test rules for different project types</li> <li>Fixed test expectations to match actual MCP behavior</li> </ul>"},{"location":"WORKFLOW_FIXES/#4-windows-redis-installation","title":"4. Windows Redis Installation","text":"<ul> <li>Problem: redis-64 package not found on Windows</li> <li>Fix: Switched to Memurai (Redis for Windows) in workflow</li> </ul>"},{"location":"WORKFLOW_FIXES/#5-performance-test-issues","title":"5. Performance Test Issues","text":"<ul> <li>Problem: Undefined variables and incorrect test assumptions</li> <li>Fixes:</li> <li>Fixed undefined <code>process</code> variable in cache memory test</li> <li>Updated concurrent connection test to use context managers</li> <li>Adjusted response size expectations for test data</li> </ul>"},{"location":"WORKFLOW_FIXES/#6-test-coverage-configuration","title":"6. Test Coverage Configuration","text":"<ul> <li>Problem: Low test coverage (8.76%) due to subprocess tracking</li> <li>Fix: Added <code>.coveragerc</code> and <code>sitecustomize.py</code> for better coverage tracking</li> </ul>"},{"location":"WORKFLOW_FIXES/#test-results","title":"Test Results","text":"<ul> <li>All 23 E2E tests now pass</li> <li>Performance tests adjusted for realistic expectations</li> <li>Coverage configuration improved (though subprocess coverage remains challenging)</li> </ul>"},{"location":"WORKFLOW_FIXES/#future-improvements","title":"Future Improvements","text":"<ol> <li>Consider in-process testing approach for better coverage</li> <li>Address security vulnerabilities in development dependencies</li> <li>Improve subprocess coverage tracking</li> <li>Add more comprehensive performance benchmarks</li> </ol>"},{"location":"WORKFLOW_FIXES/#key-files-modified","title":"Key Files Modified","text":"<ul> <li><code>setup.py</code> - Fixed dependencies</li> <li><code>pyproject.toml</code> - Aligned Python version</li> <li><code>pytest.ini</code> - Added asyncio loop scope configuration</li> <li><code>.github/workflows/e2e-tests.yml</code> - Fixed Windows Redis installation</li> <li><code>src/mcp_server.py</code> - Fixed boolean syntax error</li> <li><code>tests/e2e/test_mcp_server.py</code> - Fixed test expectations</li> <li><code>tests/e2e/test_performance.py</code> - Fixed performance tests</li> <li><code>tests/e2e/test_data_setup.py</code> - Added comprehensive test rules</li> <li><code>.coveragerc</code> - Added coverage configuration</li> <li><code>sitecustomize.py</code> - Added for subprocess coverage</li> </ul>"},{"location":"caching/","title":"MCP Tool Response Caching","text":"<p>The MCP Standards Server includes a sophisticated caching system designed to improve performance and reduce load on backend systems. This document covers the caching architecture, configuration, and best practices.</p>"},{"location":"caching/#overview","title":"Overview","text":"<p>The caching system provides:</p> <ul> <li>Intelligent per-tool caching with configurable TTLs and strategies</li> <li>Selective caching - not all tools should be cached</li> <li>Automatic compression for large responses</li> <li>Cache invalidation with cascade support</li> <li>Cache warming capabilities for frequently accessed data</li> <li>Detailed metrics for monitoring and optimization</li> <li>Redis integration with connection pooling and circuit breakers</li> <li>Two-tier caching (L1 in-memory + L2 Redis)</li> </ul>"},{"location":"caching/#architecture","title":"Architecture","text":""},{"location":"caching/#components","title":"Components","text":"<ol> <li>MCPCache (<code>src/core/cache/mcp_cache.py</code>)</li> <li>Core caching logic</li> <li>Tool configuration management</li> <li>Compression and serialization</li> <li> <p>Metrics collection</p> </li> <li> <p>MCPCacheMiddleware (<code>src/core/cache/mcp_cache_integration.py</code>)</p> </li> <li>Integration with MCP server</li> <li>Request interception</li> <li> <p>Cache management tools</p> </li> <li> <p>RedisCache (<code>src/core/cache/redis_client.py</code>)</p> </li> <li>Redis connection management</li> <li>Connection pooling</li> <li>Circuit breaker pattern</li> <li>L1/L2 cache tiers</li> </ol>"},{"location":"caching/#cache-flow","title":"Cache Flow","text":"<pre><code>Request \u2192 MCP Server \u2192 Cache Middleware \u2192 Check Cache\n                                            \u2193\n                                   [Cache Hit] \u2192 Return Cached Response\n                                            \u2193\n                                   [Cache Miss] \u2192 Execute Tool\n                                            \u2193\n                                        Cache Response\n                                            \u2193\n                                        Return Response\n</code></pre>"},{"location":"caching/#configuration","title":"Configuration","text":""},{"location":"caching/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>Environment Variables:    <pre><code>export REDIS_HOST=localhost\nexport REDIS_PORT=6379\nexport MCP_CACHE_ENABLED=true\n</code></pre></p> </li> <li> <p>Configuration File (<code>config/cache.yaml</code>):    <pre><code>redis:\n  host: localhost\n  port: 6379\n  default_ttl: 300\n\nwarm_on_startup: true\n\ntools:\n  get_standard_details:\n    strategy: long_ttl\n    ttl_seconds: 86400\n</code></pre></p> </li> </ol>"},{"location":"caching/#cache-strategies","title":"Cache Strategies","text":"<p>The system supports five caching strategies:</p> Strategy Default TTL Use Case <code>no_cache</code> N/A Write operations, sensitive data <code>short_ttl</code> 5 minutes Frequently changing data <code>medium_ttl</code> 30 minutes Moderately stable data <code>long_ttl</code> 24 hours Stable reference data <code>permanent</code> No expiry Static data (manual invalidation)"},{"location":"caching/#tool-configuration","title":"Tool Configuration","text":"<p>Each tool can be configured with:</p> <pre><code>tool_name:\n  strategy: medium_ttl          # Caching strategy\n  ttl_seconds: 1800            # Override default TTL\n  compress_threshold: 1024     # Compress if larger (bytes)\n  include_in_key:              # Args to include in cache key\n    - arg1\n    - arg2\n  exclude_from_key:            # Args to exclude from key\n    - timestamp\n  invalidate_on:               # Tools that invalidate this cache\n    - update_tool\n    - delete_tool\n  warm_on_startup: true        # Warm cache on startup\n  warm_args:                   # Arguments for warming\n    - id: 1\n    - id: 2\n</code></pre>"},{"location":"caching/#integration","title":"Integration","text":""},{"location":"caching/#automatic-integration","title":"Automatic Integration","text":"<p>The easiest way to add caching to your MCP server:</p> <pre><code>from src.core.cache.mcp_cache_integration import integrate_cache_with_mcp_server\n\n# In your MCP server initialization\nserver = MCPStandardsServer(config)\ncache_config = load_config(\"config/cache.yaml\")\nintegrate_cache_with_mcp_server(server, cache_config)\n</code></pre>"},{"location":"caching/#manual-integration","title":"Manual Integration","text":"<p>For more control:</p> <pre><code>from src.core.cache.mcp_cache import MCPCache\nfrom src.core.cache.redis_client import RedisCache, CacheConfig\n\n# Create Redis client\nredis_config = CacheConfig(host=\"localhost\", port=6379)\nredis_cache = RedisCache(redis_config)\n\n# Create MCP cache\nmcp_cache = MCPCache(redis_cache=redis_cache)\n\n# Wrap tool execution\nasync def cached_execute_tool(tool_name, arguments):\n    # Try cache first\n    cached = await mcp_cache.get(tool_name, arguments)\n    if cached is not None:\n        return cached\n\n    # Execute tool\n    result = await original_execute_tool(tool_name, arguments)\n\n    # Cache result\n    await mcp_cache.set(tool_name, arguments, result)\n\n    return result\n</code></pre>"},{"location":"caching/#using-the-decorator","title":"Using the Decorator","text":"<p>For individual functions:</p> <pre><code>from src.core.cache.mcp_cache import cache_tool_response\n\n@cache_tool_response(cache, \"my_tool\", ttl_override=3600)\nasync def my_tool_handler(arguments):\n    # Expensive operation\n    return await fetch_data(arguments)\n</code></pre>"},{"location":"caching/#cache-management","title":"Cache Management","text":""},{"location":"caching/#cache-management-tools","title":"Cache Management Tools","text":"<p>The integration adds several tools to the MCP server:</p> <ol> <li> <p>get_cache_stats - Get cache metrics and health status    <pre><code>{\n  \"include_redis\": true\n}\n</code></pre></p> </li> <li> <p>cache_invalidate - Invalidate specific cache entries    <pre><code>{\n  \"tool_name\": \"get_standard_details\",\n  \"arguments\": {\"standard_id\": \"test-std\"}\n}\n</code></pre></p> </li> <li> <p>cache_warm - Warm cache for specific tools    <pre><code>{\n  \"tools\": [\"get_standard_details\", \"list_templates\"]\n}\n</code></pre></p> </li> <li> <p>cache_clear_all - Clear all caches (requires confirmation)    <pre><code>{\n  \"confirm\": true\n}\n</code></pre></p> </li> <li> <p>cache_configure - Dynamically configure tool caching    <pre><code>{\n  \"tool_name\": \"search_standards\",\n  \"strategy\": \"short_ttl\",\n  \"ttl_seconds\": 180\n}\n</code></pre></p> </li> </ol>"},{"location":"caching/#programmatic-management","title":"Programmatic Management","text":"<pre><code># Invalidate specific cache\nawait cache.invalidate(\"tool_name\", {\"arg\": \"value\"})\n\n# Invalidate all entries for a tool\nawait cache.invalidate(\"tool_name\")\n\n# Clear all caches\ncount = await cache.clear_all()\n\n# Get metrics\nmetrics = cache.get_metrics()\n</code></pre>"},{"location":"caching/#cache-warming","title":"Cache Warming","text":""},{"location":"caching/#automatic-warming","title":"Automatic Warming","text":"<p>Configure tools to warm on startup:</p> <pre><code>tools:\n  get_standard_details:\n    warm_on_startup: true\n    warm_args:\n      - standard_id: \"secure-api-design\"\n      - standard_id: \"react-best-practices\"\n</code></pre>"},{"location":"caching/#manual-warming","title":"Manual Warming","text":"<pre><code># Warm specific tools\nresults = await cache.warm_cache(executor, [\"tool1\", \"tool2\"])\n\n# Start background warming\nawait cache.start_background_warming(executor, interval_seconds=3600)\n</code></pre>"},{"location":"caching/#monitoring","title":"Monitoring","text":""},{"location":"caching/#metrics","title":"Metrics","text":"<p>The cache system collects detailed metrics:</p> <pre><code>metrics = cache.get_metrics()\n# {\n#   \"overall\": {\n#     \"hits\": 1000,\n#     \"misses\": 200,\n#     \"hit_rate\": 0.833,\n#     \"errors\": 5,\n#     \"invalidations\": 50\n#   },\n#   \"performance\": {\n#     \"avg_hit_time_ms\": 2.5,\n#     \"avg_miss_time_ms\": 150.3\n#   },\n#   \"compression\": {\n#     \"compressed_saves\": 100,\n#     \"bytes_saved\": 500000\n#   },\n#   \"by_tool\": {\n#     \"get_standard_details\": {\"hits\": 500, \"misses\": 50}\n#   }\n# }\n</code></pre>"},{"location":"caching/#health-checks","title":"Health Checks","text":"<pre><code>health = await cache.health_check()\n# {\n#   \"status\": \"healthy\",\n#   \"cache_enabled\": true,\n#   \"redis\": {\n#     \"status\": \"healthy\",\n#     \"latency_ms\": 1.2\n#   }\n# }\n</code></pre>"},{"location":"caching/#best-practices","title":"Best Practices","text":""},{"location":"caching/#1-choose-appropriate-strategies","title":"1. Choose Appropriate Strategies","text":"<ul> <li>Use <code>no_cache</code> for write operations and sensitive data</li> <li>Use <code>short_ttl</code> for frequently changing data</li> <li>Use <code>long_ttl</code> for reference data that rarely changes</li> <li>Consider <code>permanent</code> for static data with manual invalidation</li> </ul>"},{"location":"caching/#2-configure-cache-keys-carefully","title":"2. Configure Cache Keys Carefully","text":"<pre><code># Good: Only relevant args in cache key\nsearch_standards:\n  include_in_key:\n    - query\n    - limit\n    - filters\n  exclude_from_key:\n    - request_id\n    - timestamp\n</code></pre>"},{"location":"caching/#3-set-up-invalidation-rules","title":"3. Set Up Invalidation Rules","text":"<pre><code># When standards are synced, invalidate related caches\nsync_standards:\n  strategy: no_cache\n\nget_standard_details:\n  invalidate_on:\n    - sync_standards\n    - update_standard\n</code></pre>"},{"location":"caching/#4-monitor-and-tune","title":"4. Monitor and Tune","text":"<ul> <li>Review cache hit rates regularly</li> <li>Adjust TTLs based on usage patterns</li> <li>Monitor compression effectiveness</li> <li>Track slow queries</li> </ul>"},{"location":"caching/#5-handle-cache-failures-gracefully","title":"5. Handle Cache Failures Gracefully","text":"<p>The system automatically falls back to direct execution on cache failures: - Circuit breaker prevents cascading failures - L1 cache provides fallback when Redis is down - Metrics track errors for monitoring</p>"},{"location":"caching/#troubleshooting","title":"Troubleshooting","text":""},{"location":"caching/#common-issues","title":"Common Issues","text":"<ol> <li>Low Hit Rate</li> <li>Check if TTLs are too short</li> <li>Verify cache keys include only necessary arguments</li> <li> <p>Ensure warming is configured for frequently accessed data</p> </li> <li> <p>High Memory Usage</p> </li> <li>Reduce L1 cache size</li> <li>Enable compression for large responses</li> <li> <p>Shorten TTLs for large objects</p> </li> <li> <p>Redis Connection Issues</p> </li> <li>Check Redis connectivity</li> <li>Verify authentication credentials</li> <li>Monitor circuit breaker status</li> </ol>"},{"location":"caching/#debug-logging","title":"Debug Logging","text":"<p>Enable debug logging for cache operations:</p> <pre><code>import logging\nlogging.getLogger('src.core.cache').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"caching/#advanced-features","title":"Advanced Features","text":""},{"location":"caching/#custom-serialization","title":"Custom Serialization","text":"<p>The cache supports both msgpack and pickle serialization, automatically choosing the best option.</p>"},{"location":"caching/#compression","title":"Compression","text":"<p>Responses are automatically compressed when they exceed the threshold: - Uses zlib compression - Configurable per tool - Metrics track compression effectiveness</p>"},{"location":"caching/#circuit-breaker","title":"Circuit Breaker","text":"<p>Protects against Redis failures: - Opens after 5 consecutive failures - Attempts recovery after 30 seconds - Falls back to L1 cache when open</p>"},{"location":"caching/#two-tier-caching","title":"Two-Tier Caching","text":"<ul> <li>L1 (In-Memory): Fast, limited size, short TTL</li> <li>L2 (Redis): Larger capacity, longer TTL, shared across instances</li> </ul>"},{"location":"caching/#example-configurations","title":"Example Configurations","text":""},{"location":"caching/#high-performance-setup","title":"High-Performance Setup","text":"<pre><code>redis:\n  max_connections: 100\n  l1_max_size: 5000\n  l1_ttl: 60\n  enable_compression: true\n  compression_threshold: 512\n\ntools:\n  # Cache everything possible\n  get_standard_details:\n    strategy: permanent\n    warm_on_startup: true\n\n  search_standards:\n    strategy: medium_ttl\n    compress_threshold: 256\n</code></pre>"},{"location":"caching/#conservative-setup","title":"Conservative Setup","text":"<pre><code>redis:\n  max_connections: 20\n  l1_max_size: 100\n  l1_ttl: 10\n  circuit_breaker_threshold: 3\n\ntools:\n  # Only cache critical tools\n  get_standard_details:\n    strategy: short_ttl\n    ttl_seconds: 300\n</code></pre>"},{"location":"caching/#development-setup","title":"Development Setup","text":"<pre><code>redis:\n  host: localhost\n  enable_metrics: true\n  slow_query_threshold: 0.05\n\nwarm_on_startup: false  # Faster startup\n\ntools:\n  # Shorter TTLs for development\n  DEFAULT:\n    strategy: short_ttl\n    ttl_seconds: 60\n</code></pre>"},{"location":"token-optimization/","title":"Token Optimization Guide","text":""},{"location":"token-optimization/#overview","title":"Overview","text":"<p>The MCP Standards Server includes a comprehensive token optimization system designed to significantly reduce token usage while maintaining information quality. This feature is crucial for:</p> <ul> <li>Working within LLM context limits</li> <li>Reducing API costs</li> <li>Improving response times</li> <li>Enabling more standards to be loaded simultaneously</li> </ul>"},{"location":"token-optimization/#key-features","title":"Key Features","text":""},{"location":"token-optimization/#1-multiple-format-variants","title":"1. Multiple Format Variants","text":"<p>The system provides four predefined formats, each optimized for different use cases:</p>"},{"location":"token-optimization/#full-format","title":"Full Format","text":"<ul> <li>Token Usage: ~90% of original</li> <li>Use Case: When complete documentation with examples is needed</li> <li>Features: Minimal compression, preserves all content</li> </ul>"},{"location":"token-optimization/#condensed-format","title":"Condensed Format","text":"<ul> <li>Token Usage: ~50% of original</li> <li>Use Case: Standard development workflow</li> <li>Features: </li> <li>Removes redundancy</li> <li>Uses abbreviations</li> <li>Compresses code examples</li> <li>Extracts essential information</li> </ul>"},{"location":"token-optimization/#reference-format","title":"Reference Format","text":"<ul> <li>Token Usage: ~20% of original</li> <li>Use Case: Quick lookup and reference</li> <li>Features:</li> <li>Headers and key points only</li> <li>Bullet points and numbered lists</li> <li>Truncated to fit budget</li> </ul>"},{"location":"token-optimization/#summary-format","title":"Summary Format","text":"<ul> <li>Token Usage: ~5% of original</li> <li>Use Case: Executive overview</li> <li>Features:</li> <li>One-paragraph summary</li> <li>Most important sections only</li> <li>Metadata about coverage</li> </ul>"},{"location":"token-optimization/#2-dynamic-loading","title":"2. Dynamic Loading","text":"<p>Progressive disclosure system that loads content based on query depth:</p> <pre><code># Example: Progressive loading plan\nloading_plan = optimizer.progressive_load(\n    standard,\n    initial_sections=['overview', 'requirements'],\n    max_depth=3\n)\n</code></pre> <p>Features: - Dependency-aware loading - Priority-based section selection - Batch loading for efficiency - Context-aware suggestions</p>"},{"location":"token-optimization/#3-token-counting-and-budgeting","title":"3. Token Counting and Budgeting","text":"<p>Accurate token counting for different models:</p> <ul> <li>GPT-4: Uses tiktoken for exact counts</li> <li>GPT-3.5: Uses tiktoken with appropriate encoding</li> <li>Claude: Approximation based on character count</li> <li>Custom: Configurable counting method</li> </ul> <p>Budget management: <pre><code>budget = TokenBudget(\n    total=8000,\n    reserved_for_context=1000,\n    reserved_for_response=2000,\n    warning_threshold=0.8\n)\n</code></pre></p>"},{"location":"token-optimization/#4-compression-techniques","title":"4. Compression Techniques","text":"<p>Multiple compression strategies applied intelligently:</p> <ol> <li>Redundancy Removal</li> <li>Multiple spaces \u2192 single space</li> <li>Excessive newlines \u2192 normalized</li> <li> <p>Trailing whitespace \u2192 removed</p> </li> <li> <p>Abbreviations</p> </li> <li>Common terms replaced with standard abbreviations</li> <li>Domain-specific abbreviations</li> <li> <p>Configurable abbreviation dictionary</p> </li> <li> <p>Code Compression</p> </li> <li>Remove comments from examples</li> <li>Minimize indentation</li> <li>Remove empty lines</li> <li> <p>Preserve language identifiers</p> </li> <li> <p>Essential Extraction</p> </li> <li>Identifies critical keywords</li> <li>Preserves security warnings</li> <li>Keeps best practices</li> <li> <p>Maintains requirements</p> </li> <li> <p>Lookup Tables</p> </li> <li>Creates references for repeated phrases</li> <li>Replaces with short codes</li> <li>Provides lookup dictionary</li> </ol>"},{"location":"token-optimization/#api-usage","title":"API Usage","text":""},{"location":"token-optimization/#get-optimized-standard","title":"Get Optimized Standard","text":"<pre><code>result = await mcp.get_optimized_standard(\n    standard_id=\"react-18-patterns\",\n    format_type=\"condensed\",\n    token_budget=2000,\n    required_sections=[\"security\", \"testing\"],\n    context={\n        \"user_expertise\": \"intermediate\",\n        \"focus_areas\": [\"performance\", \"security\"]\n    }\n)\n</code></pre>"},{"location":"token-optimization/#auto-optimize-multiple-standards","title":"Auto-Optimize Multiple Standards","text":"<pre><code>result = await mcp.auto_optimize_standards(\n    standard_ids=[\"react-18-patterns\", \"python-pep8\", \"rest-api-design\"],\n    total_token_budget=5000,\n    context={\n        \"query_type\": \"implementation_guide\"\n    }\n)\n</code></pre>"},{"location":"token-optimization/#progressive-loading","title":"Progressive Loading","text":"<pre><code>plan = await mcp.progressive_load_standard(\n    standard_id=\"large-standard\",\n    initial_sections=[\"overview\"],\n    max_depth=3\n)\n\n# Load sections progressively based on plan\nfor batch in plan['loading_plan']:\n    # Load batch sections as needed\n    pass\n</code></pre>"},{"location":"token-optimization/#estimate-token-usage","title":"Estimate Token Usage","text":"<pre><code>estimates = await mcp.estimate_token_usage(\n    standard_ids=[\"standard1\", \"standard2\"],\n    format_types=[\"full\", \"condensed\", \"summary\"]\n)\n</code></pre>"},{"location":"token-optimization/#configuration","title":"Configuration","text":""},{"location":"token-optimization/#server-configuration","title":"Server Configuration","text":"<pre><code>{\n    \"token_model\": \"gpt-4\",\n    \"default_token_budget\": 8000,\n    \"token_optimization\": {\n        \"cache_ttl\": 3600,\n        \"abbreviations\": {\n            \"custom_term\": \"ct\"\n        }\n    }\n}\n</code></pre>"},{"location":"token-optimization/#format-selection-strategy","title":"Format Selection Strategy","text":"<p>The system automatically selects the best format based on:</p> <ol> <li>Token Budget Ratio: Available tokens / Original tokens</li> <li>\u2265 80%: Full format</li> <li>\u2265 40%: Condensed format</li> <li>\u2265 15%: Reference format</li> <li> <p>&lt; 15%: Summary format</p> </li> <li> <p>Context Hints:</p> </li> <li><code>query_type: \"quick_lookup\"</code> \u2192 Reference format</li> <li><code>need_examples: true</code> \u2192 Prefer full/condensed</li> <li> <p><code>user_expertise: \"beginner\"</code> \u2192 Include examples</p> </li> <li> <p>Section Priorities:</p> </li> <li>Security: Priority 9</li> <li>Requirements: Priority 9</li> <li>Implementation: Priority 7</li> <li>Examples: Priority 5 (boosted for beginners)</li> </ol>"},{"location":"token-optimization/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Based on testing with various standard sizes:</p>"},{"location":"token-optimization/#small-standards-1000-tokens","title":"Small Standards (&lt;1000 tokens)","text":"<ul> <li>Full format: 100% retention</li> <li>Condensed: ~60% compression</li> <li>Reference: ~25% compression</li> <li>Summary: ~8% compression</li> </ul>"},{"location":"token-optimization/#medium-standards-1000-5000-tokens","title":"Medium Standards (1000-5000 tokens)","text":"<ul> <li>Full format: ~95% retention</li> <li>Condensed: ~50% compression</li> <li>Reference: ~20% compression</li> <li>Summary: ~5% compression</li> </ul>"},{"location":"token-optimization/#large-standards-5000-tokens","title":"Large Standards (&gt;5000 tokens)","text":"<ul> <li>Full format: ~90% retention</li> <li>Condensed: ~45% compression</li> <li>Reference: ~18% compression</li> <li>Summary: ~4% compression</li> </ul>"},{"location":"token-optimization/#processing-time","title":"Processing Time","text":"<ul> <li>Small standards: &lt;100ms</li> <li>Medium standards: 100-300ms</li> <li>Large standards: 300-800ms</li> <li>With caching: &lt;50ms</li> </ul>"},{"location":"token-optimization/#best-practices","title":"Best Practices","text":""},{"location":"token-optimization/#1-choose-the-right-format","title":"1. Choose the Right Format","text":"<ul> <li>Use <code>summary</code> for overviews and planning</li> <li>Use <code>reference</code> for quick lookups during coding</li> <li>Use <code>condensed</code> for standard implementation work</li> <li>Use <code>full</code> only when complete details are essential</li> </ul>"},{"location":"token-optimization/#2-leverage-progressive-loading","title":"2. Leverage Progressive Loading","text":"<ul> <li>Start with overview sections</li> <li>Load additional sections based on user interaction</li> <li>Use context to predict needed sections</li> </ul>"},{"location":"token-optimization/#3-budget-management","title":"3. Budget Management","text":"<ul> <li>Reserve tokens for context and response</li> <li>Set warning thresholds</li> <li>Monitor token usage with estimates</li> </ul>"},{"location":"token-optimization/#4-context-aware-optimization","title":"4. Context-Aware Optimization","text":"<ul> <li>Provide user expertise level</li> <li>Specify focus areas</li> <li>Indicate query type</li> </ul>"},{"location":"token-optimization/#5-caching-strategy","title":"5. Caching Strategy","text":"<ul> <li>Results are cached for 1 hour by default</li> <li>Cache key includes format and required sections</li> <li>Clear cache when standards update</li> </ul>"},{"location":"token-optimization/#example-scenarios","title":"Example Scenarios","text":""},{"location":"token-optimization/#scenario-1-limited-context-window","title":"Scenario 1: Limited Context Window","text":"<pre><code># Working with 4K context limit\nbudget = TokenBudget(total=4000, reserved_for_context=500, reserved_for_response=500)\n\n# Auto-optimize multiple standards\nresult = await mcp.auto_optimize_standards(\n    standard_ids=[\"std1\", \"std2\", \"std3\"],\n    total_token_budget=3000\n)\n</code></pre>"},{"location":"token-optimization/#scenario-2-beginner-tutorial","title":"Scenario 2: Beginner Tutorial","text":"<pre><code># Optimize for beginners with examples\nresult = await mcp.get_optimized_standard(\n    standard_id=\"react-patterns\",\n    format_type=\"condensed\",\n    context={\n        \"user_expertise\": \"beginner\",\n        \"focus_areas\": [\"examples\", \"implementation\"]\n    }\n)\n</code></pre>"},{"location":"token-optimization/#scenario-3-expert-quick-reference","title":"Scenario 3: Expert Quick Reference","text":"<pre><code># Quick reference for experts\nresult = await mcp.get_optimized_standard(\n    standard_id=\"advanced-patterns\",\n    format_type=\"reference\",\n    required_sections=[\"api\", \"configuration\"],\n    context={\n        \"user_expertise\": \"expert\",\n        \"query_type\": \"quick_lookup\"\n    }\n)\n</code></pre>"},{"location":"token-optimization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"token-optimization/#common-issues","title":"Common Issues","text":"<ol> <li>Token count exceeds budget</li> <li>Solution: Use more aggressive format or increase budget</li> <li> <p>Check warnings in response</p> </li> <li> <p>Important sections excluded</p> </li> <li>Solution: Use <code>required_sections</code> parameter</li> <li> <p>Adjust section priorities in configuration</p> </li> <li> <p>Slow performance</p> </li> <li>Solution: Enable caching</li> <li>Use batch operations</li> <li> <p>Consider pre-warming cache</p> </li> <li> <p>Inconsistent formatting</p> </li> <li>Solution: Specify format explicitly</li> <li>Provide consistent context</li> </ol>"},{"location":"token-optimization/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Semantic compression using embeddings</li> <li>Learning from user interactions</li> <li>Custom compression strategies</li> <li>Multi-language support</li> <li>Streaming progressive loading</li> </ul>"},{"location":"cache/","title":"Redis Cache Layer Documentation","text":""},{"location":"cache/#overview","title":"Overview","text":"<p>The MCP Standards Server includes a comprehensive Redis caching layer designed to improve performance and reduce computational overhead. The cache implementation features:</p> <ul> <li>Two-tier caching: L1 (in-memory) and L2 (Redis) caches</li> <li>Async support: Full async/await compatibility</li> <li>Resilience: Circuit breaker, retry logic, and graceful degradation</li> <li>Easy integration: Decorators for seamless caching</li> <li>Monitoring: Built-in metrics and health checks</li> </ul>"},{"location":"cache/#quick-start","title":"Quick Start","text":""},{"location":"cache/#basic-usage","title":"Basic Usage","text":"<pre><code>from src.core.cache import RedisCache, CacheConfig\n\n# Initialize cache with default config\ncache = RedisCache()\n\n# Or with custom config\nconfig = CacheConfig(\n    host=\"redis.example.com\",\n    port=6379,\n    password=\"secret\",\n    default_ttl=300\n)\ncache = RedisCache(config)\n\n# Basic operations\ncache.set(\"key\", {\"data\": \"value\"}, ttl=60)\nvalue = cache.get(\"key\")\ncache.delete(\"key\")\n\n# Batch operations\ncache.mset({\"key1\": \"value1\", \"key2\": \"value2\"})\nvalues = cache.mget([\"key1\", \"key2\", \"key3\"])\n</code></pre>"},{"location":"cache/#using-decorators","title":"Using Decorators","text":"<pre><code>from src.core.cache.decorators import cache_result, invalidate_cache\n\n# Cache function results\n@cache_result(\"search\", ttl=300)\ndef search_standards(query: str) -&gt; List[Standard]:\n    # Expensive search operation\n    return perform_search(query)\n\n# Async functions\n@cache_result(\"user\", ttl=600)\nasync def get_user_data(user_id: str) -&gt; dict:\n    # Async database query\n    return await db.get_user(user_id)\n\n# Invalidate cache after updates\n@invalidate_cache(pattern=\"user:{user_id}:*\")\ndef update_user(user_id: str, data: dict):\n    # Update user data\n    db.update_user(user_id, data)\n</code></pre>"},{"location":"cache/#architecture","title":"Architecture","text":""},{"location":"cache/#cache-layers","title":"Cache Layers","text":"<ol> <li>L1 Cache (In-Memory)</li> <li>Ultra-fast access using Python's TTLCache</li> <li>Limited size (configurable)</li> <li>Short TTL (5-60 seconds)</li> <li> <p>Process-local</p> </li> <li> <p>L2 Cache (Redis)</p> </li> <li>Distributed cache</li> <li>Larger capacity</li> <li>Longer TTL (minutes to hours)</li> <li>Shared across processes</li> </ol>"},{"location":"cache/#key-naming-convention","title":"Key Naming Convention","text":"<p>Cache keys follow a structured format:</p> <pre><code>{prefix}:{version}:{namespace}:{identifier}:{hash}\n</code></pre> <p>Examples: - <code>search:v1:query:security:a3f4b2c1</code> - <code>standards:v1:data:ISO27001:latest</code> - <code>rules:v1:evaluation:rule_123:ctx_hash</code></p>"},{"location":"cache/#configuration","title":"Configuration","text":""},{"location":"cache/#cacheconfig-options","title":"CacheConfig Options","text":"<pre><code>@dataclass\nclass CacheConfig:\n    # Connection settings\n    host: str = \"localhost\"\n    port: int = 6379\n    db: int = 0\n    password: Optional[str] = None\n\n    # Pool settings\n    max_connections: int = 50\n    socket_keepalive: bool = True\n\n    # Retry settings\n    max_retries: int = 3\n    retry_delay: float = 0.1\n    retry_backoff: float = 2.0\n\n    # Cache settings\n    default_ttl: int = 300  # 5 minutes\n    key_prefix: str = \"mcp\"\n    enable_compression: bool = True\n    compression_threshold: int = 1024  # bytes\n\n    # L1 cache settings\n    l1_max_size: int = 1000\n    l1_ttl: int = 30  # seconds\n\n    # Circuit breaker\n    circuit_breaker_threshold: int = 5\n    circuit_breaker_timeout: int = 30\n</code></pre>"},{"location":"cache/#ttl-policies","title":"TTL Policies","text":"Data Type L1 TTL L2 TTL Use Case Search Results 30s 5m Frequently changing Standards Data 60s 1h Relatively static Rule Results 15s 2m Context-dependent Sync Metadata 5s 30s Real-time updates"},{"location":"cache/#advanced-features","title":"Advanced Features","text":""},{"location":"cache/#circuit-breaker","title":"Circuit Breaker","text":"<p>The cache includes a circuit breaker to handle Redis failures gracefully:</p> <pre><code># Circuit breaker states:\n# - Closed: Normal operation\n# - Open: Failing, requests blocked\n# - Half-open: Testing recovery\n\n# Configuration\nconfig = CacheConfig(\n    circuit_breaker_threshold=5,  # Open after 5 failures\n    circuit_breaker_timeout=30     # Try recovery after 30s\n)\n</code></pre>"},{"location":"cache/#compression","title":"Compression","text":"<p>Large values are automatically compressed:</p> <pre><code>config = CacheConfig(\n    enable_compression=True,\n    compression_threshold=1024  # Compress values &gt; 1KB\n)\n</code></pre>"},{"location":"cache/#serialization","title":"Serialization","text":"<p>The cache supports multiple serialization formats: - MessagePack (default, fastest) - Pickle (fallback for complex objects) - Automatic format detection on deserialization</p>"},{"location":"cache/#batch-operations","title":"Batch Operations","text":"<p>Efficient batch operations for multiple keys:</p> <pre><code># Batch set\ncache.mset({\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}, ttl=300)\n\n# Batch get\nvalues = cache.mget([\"key1\", \"key2\", \"key3\"])\n# Returns: {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"}\n</code></pre>"},{"location":"cache/#pattern-based-operations","title":"Pattern-Based Operations","text":"<p>Delete keys matching patterns:</p> <pre><code># Delete all user cache entries\ndeleted_count = cache.delete_pattern(\"user:*\")\n\n# Delete specific user's cache\ndeleted_count = cache.delete_pattern(\"user:123:*\")\n</code></pre>"},{"location":"cache/#integration-examples","title":"Integration Examples","text":""},{"location":"cache/#semantic-search-integration","title":"Semantic Search Integration","text":"<pre><code>from src.core.cache.integration import CachedSemanticSearch\n\n# Wrap semantic search with caching\ncached_search = CachedSemanticSearch(semantic_search_engine)\n\n# Search with automatic caching\nresults = await cached_search.search(\"security compliance\", k=10)\n\n# Find similar standards\nsimilar = await cached_search.find_similar(\"ISO27001\", k=5)\n</code></pre>"},{"location":"cache/#standards-engine-integration","title":"Standards Engine Integration","text":"<pre><code>from src.core.cache.integration import CachedStandardsEngine\n\n# Wrap standards engine\ncached_engine = CachedStandardsEngine(standards_engine)\n\n# Get standard with caching\nstandard = await cached_engine.get_standard(\"NIST-CSF\")\n\n# List standards\nstandards = await cached_engine.list_standards(\n    category=\"security\",\n    limit=50\n)\n</code></pre>"},{"location":"cache/#cache-warming","title":"Cache Warming","text":"<p>Pre-populate cache with frequently accessed data:</p> <pre><code>from src.core.cache.integration import CacheWarmer\n\nwarmer = CacheWarmer(cached_engine, cached_search)\n\n# Warm popular searches\nawait warmer.warm_popular_searches([\n    \"security\",\n    \"compliance\",\n    \"data protection\",\n    \"privacy\"\n])\n\n# Warm frequently accessed standards\nawait warmer.warm_standards([\n    \"ISO27001\",\n    \"NIST-CSF\",\n    \"GDPR\",\n    \"SOC2\"\n])\n</code></pre>"},{"location":"cache/#monitoring-and-metrics","title":"Monitoring and Metrics","text":""},{"location":"cache/#health-checks","title":"Health Checks","text":"<pre><code># Sync health check\nhealth = cache.health_check()\n# {\n#     \"status\": \"healthy\",\n#     \"redis_connected\": true,\n#     \"latency_ms\": 0.5,\n#     \"l1_cache_size\": 234,\n#     \"circuit_breaker_state\": \"closed\"\n# }\n\n# Async health check\nhealth = await cache.async_health_check()\n</code></pre>"},{"location":"cache/#metrics-collection","title":"Metrics Collection","text":"<pre><code>metrics = cache.get_metrics()\n# {\n#     \"l1_hits\": 1520,\n#     \"l1_misses\": 480,\n#     \"l1_hit_rate\": 0.76,\n#     \"l2_hits\": 350,\n#     \"l2_misses\": 130,\n#     \"l2_hit_rate\": 0.73,\n#     \"errors\": 2,\n#     \"slow_queries\": 5\n# }\n</code></pre>"},{"location":"cache/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>from src.core.cache.integration import CacheMetricsCollector\n\ncollector = CacheMetricsCollector()\nmetrics = collector.collect_metrics()\n\n# Report to monitoring system\nawait collector.report_metrics(destination=\"prometheus\")\n</code></pre>"},{"location":"cache/#error-handling","title":"Error Handling","text":"<p>The cache is designed to fail gracefully:</p> <pre><code># If Redis is unavailable:\n# 1. L1 cache continues to work\n# 2. Circuit breaker prevents cascade failures\n# 3. Operations fall back to computation\n# 4. No exceptions bubble up to application\n\n# Example with fallback\nvalue = cache.get(\"key\")\nif value is None:\n    # Cache miss or error - compute value\n    value = expensive_computation()\n    # Try to cache (won't throw if Redis is down)\n    cache.set(\"key\", value)\n</code></pre>"},{"location":"cache/#performance","title":"Performance","text":"<p>Based on benchmarks with local Redis:</p> Operation L1 Cache L2 Cache No Cache Small value GET &lt; 1\u03bcs &lt; 100\u03bcs N/A Medium value GET &lt; 1\u03bcs &lt; 200\u03bcs N/A Batch GET (100 keys) &lt; 10\u03bcs &lt; 5ms N/A Decorator overhead &lt; 10\u03bcs &lt; 10\u03bcs 0"},{"location":"cache/#cache-hit-rates","title":"Cache Hit Rates","text":"<p>Typical hit rates in production: - L1 Cache: 70-80% - L2 Cache: 85-95% - Overall: 95-99%</p>"},{"location":"cache/#best-practices","title":"Best Practices","text":"<ol> <li>Choose appropriate TTLs</li> <li>Shorter for frequently changing data</li> <li>Longer for static data</li> <li> <p>Consider data freshness requirements</p> </li> <li> <p>Use meaningful key prefixes</p> </li> <li>Helps with debugging</li> <li>Enables pattern-based operations</li> <li> <p>Prevents key collisions</p> </li> <li> <p>Handle cache misses gracefully</p> </li> <li>Always have a fallback</li> <li>Don't assume cache will always work</li> <li> <p>Log cache errors for monitoring</p> </li> <li> <p>Warm cache for critical data</p> </li> <li>Pre-populate on startup</li> <li>Refresh before expiration</li> <li> <p>Monitor cache hit rates</p> </li> <li> <p>Use batch operations</p> </li> <li>More efficient than individual calls</li> <li>Reduces network overhead</li> <li> <p>Better performance</p> </li> <li> <p>Monitor cache health</p> </li> <li>Set up alerts for low hit rates</li> <li>Monitor Redis memory usage</li> <li>Track error rates</li> </ol>"},{"location":"cache/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cache/#common-issues","title":"Common Issues","text":"<ol> <li>Low hit rates</li> <li>Check TTL settings</li> <li>Verify key generation</li> <li> <p>Look for cache invalidation issues</p> </li> <li> <p>High latency</p> </li> <li>Check Redis connection</li> <li>Monitor network latency</li> <li> <p>Verify compression settings</p> </li> <li> <p>Memory issues</p> </li> <li>Adjust L1 cache size</li> <li>Check Redis memory limits</li> <li> <p>Review data sizes</p> </li> <li> <p>Connection errors</p> </li> <li>Verify Redis is running</li> <li>Check firewall rules</li> <li>Review connection pool settings</li> </ol>"},{"location":"cache/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code>import logging\nlogging.getLogger(\"src.core.cache\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"cache/#migration-guide","title":"Migration Guide","text":""},{"location":"cache/#from-no-cache","title":"From No Cache","text":"<ol> <li>Install Redis</li> <li>Add cache configuration</li> <li>Wrap expensive operations with <code>@cache_result</code></li> <li>Add cache invalidation where needed</li> <li>Monitor performance improvements</li> </ol>"},{"location":"cache/#from-other-cache-systems","title":"From Other Cache Systems","text":"<ol> <li>Map existing cache keys to new format</li> <li>Adjust TTL policies</li> <li>Update serialization if needed</li> <li>Test thoroughly before switching</li> </ol>"},{"location":"cache/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements: - Redis Cluster support - Cache tagging for group invalidation - Automatic cache warming based on access patterns - GraphQL query result caching - Edge caching integration</p>"},{"location":"cli/","title":"MCP Standards Server CLI Documentation","text":"<p>The MCP Standards Server CLI (<code>mcp-standards</code>) provides a comprehensive command-line interface for managing, syncing, and querying development standards. This documentation covers all aspects of using the CLI effectively.</p>"},{"location":"cli/#quick-links","title":"Quick Links","text":"<ul> <li>Command Reference - Complete reference for all CLI commands</li> <li>Getting Started - Quick start guide for new users</li> <li>Configuration Guide - Detailed configuration options</li> <li>Troubleshooting - Common issues and solutions</li> <li>Examples - Real-world usage examples</li> </ul>"},{"location":"cli/#overview","title":"Overview","text":"<p>The MCP Standards Server CLI is designed to:</p> <ul> <li>Sync Standards: Download and cache standards from GitHub repositories</li> <li>Query Standards: Search and retrieve applicable standards based on project context</li> <li>Manage Cache: Control local caching of standards files</li> <li>Validate Code: Check code against defined standards</li> <li>Integration: Work seamlessly with IDEs, CI/CD pipelines, and development workflows</li> </ul>"},{"location":"cli/#installation","title":"Installation","text":""},{"location":"cli/#from-source-currently-available","title":"From Source (Currently Available)","text":"<pre><code>git clone https://github.com/williamzujkowski/mcp-standards-server\ncd mcp-standards-server\npip install -e .\n</code></pre>"},{"location":"cli/#future-installation-methods","title":"Future Installation Methods","text":"<p>Once published to PyPI: <pre><code>pip install mcp-standards-server\n# or\npipx install mcp-standards-server\n</code></pre></p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code># Sync standards from repository\nmcp-standards sync\n\n# Check sync status\nmcp-standards status\n\n# Generate a new standard from template\nmcp-standards generate --template technical --title \"GraphQL Standards\"\n\n# Clear cache\nmcp-standards cache --clear\n\n# List available templates\nmcp-standards generate list-templates\n</code></pre>"},{"location":"cli/#command-structure","title":"Command Structure","text":"<p>The CLI follows a consistent command structure:</p> <pre><code>mcp-standards [global-options] &lt;command&gt; [command-options]\n</code></pre>"},{"location":"cli/#global-options","title":"Global Options","text":"<ul> <li><code>-v, --verbose</code>: Enable verbose output</li> <li><code>-c, --config</code>: Specify configuration file path</li> <li><code>--no-color</code>: Disable colored output</li> <li><code>--json</code>: Output in JSON format (where applicable)</li> <li><code>-h, --help</code>: Show help message</li> </ul>"},{"location":"cli/#available-commands","title":"Available Commands","text":"<ul> <li><code>sync</code>: Synchronize standards from repository</li> <li><code>status</code>: Show sync status and statistics  </li> <li><code>cache</code>: Manage local cache</li> <li><code>config</code>: Show or validate configuration</li> <li><code>generate</code>: Generate standards from templates</li> <li><code>list-templates</code>: List available templates</li> <li><code>template-info</code>: Get template information</li> <li><code>customize</code>: Create custom template</li> <li><code>validate</code>: Validate existing standard</li> </ul>"},{"location":"cli/#additional-tools","title":"Additional Tools","text":"<p>The following tools are available through separate entry points:</p> <ul> <li>MCP Server: <code>python -m src</code></li> <li>Web UI: <code>python -m src.web</code> (if web UI is implemented)</li> <li>Query Tool: Use the Python API or MCP server for querying standards</li> </ul>"},{"location":"cli/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Getting Started Guide</li> <li>Explore Command Reference</li> <li>Learn about Configuration Options</li> <li>See Integration Examples</li> </ul>"},{"location":"cli/configuration/","title":"Configuration Guide","text":"<p>The MCP Standards Server uses a flexible configuration system that supports multiple formats, sources, and environments. This guide covers all configuration options and best practices.</p>"},{"location":"cli/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"cli/configuration/#file-locations","title":"File Locations","text":"<p>Configuration files are loaded in the following order (later files override earlier ones):</p> <ol> <li>Built-in Defaults - Hardcoded defaults</li> <li>System Configuration - <code>/etc/mcp-standards/config.yaml</code></li> <li>User Configuration - <code>~/.config/mcp-standards/config.yaml</code></li> <li>Project Configuration - <code>./.mcp-standards.yaml</code></li> <li>Environment Variables - <code>MCP_STANDARDS_*</code></li> <li>Command Line Options - <code>--config</code>, <code>--set</code></li> </ol>"},{"location":"cli/configuration/#file-formats","title":"File Formats","text":"<p>The server supports multiple configuration formats:</p> <ul> <li>YAML (recommended): <code>.yaml</code>, <code>.yml</code></li> <li>JSON: <code>.json</code></li> <li>TOML: <code>.toml</code></li> <li>Environment: <code>.env</code></li> </ul>"},{"location":"cli/configuration/#complete-configuration-reference","title":"Complete Configuration Reference","text":"<pre><code># Complete configuration with all options\n# ~/.config/mcp-standards/config.yaml\n\n# Repository settings\nrepository:\n  # GitHub repository details\n  owner: williamzujkowski\n  repo: standards\n  branch: main\n  path: standards  # Path within repository\n\n  # Authentication (optional)\n  auth:\n    type: none  # Options: none, token, app\n    # For token auth:\n    token: ghp_xxxxxxxxxxxx\n    # For GitHub App auth:\n    app_id: 123456\n    private_key_path: ~/.config/mcp-standards/github-app.pem\n    installation_id: 789012\n\n# Synchronization settings\nsync:\n  # Cache time-to-live in hours\n  cache_ttl_hours: 24\n\n  # Parallel download settings\n  parallel_downloads: 5\n  max_retries: 3\n  timeout_seconds: 30\n\n  # File patterns\n  include_patterns:\n    - \"*.yaml\"\n    - \"*.yml\"\n    - \"*.md\"\n    - \"*.json\"\n\n  exclude_patterns:\n    - \"*.draft.*\"\n    - \"*.backup.*\"\n    - \".git*\"\n    - \"_*\"\n\n  # Sync behavior\n  auto_sync: true\n  sync_on_startup: true\n  verify_checksums: true\n\n# Cache configuration\ncache:\n  # Cache directory\n  directory: ~/.cache/mcp-standards\n\n  # Size limits\n  max_size_mb: 500\n  warning_threshold_mb: 400\n\n  # Compression\n  compression:\n    enabled: true\n    algorithm: gzip  # Options: gzip, zstd, lz4\n    level: 6\n\n  # Automatic cleanup\n  auto_cleanup:\n    enabled: true\n    threshold_percent: 80\n    remove_oldest: true\n    keep_recent_hours: 168  # 7 days\n    run_interval_hours: 24\n\n# Search configuration\nsearch:\n  # Semantic search\n  enabled: true\n  model: sentence-transformers/all-MiniLM-L6-v2\n\n  # Indexing\n  index_on_sync: true\n  index_format: faiss  # Options: faiss, annoy, simple\n\n  # Performance\n  cache_embeddings: true\n  embedding_batch_size: 32\n  max_results: 10\n\n  # Advanced settings\n  similarity_threshold: 0.7\n  use_gpu: false\n  num_workers: 4\n\n# Server configuration\nserver:\n  # Network settings\n  host: localhost\n  port: 3000\n  public_url: https://standards.example.com\n\n  # Performance\n  workers: auto  # auto = CPU count\n  max_connections: 1000\n  request_timeout: 30\n  keepalive_timeout: 65\n\n  # Logging\n  log_level: info  # debug, info, warning, error\n  log_file: /var/log/mcp-standards.log\n  log_format: json  # json, text\n  log_rotation:\n    enabled: true\n    max_size_mb: 100\n    max_files: 5\n\n  # Security\n  auth:\n    type: token  # none, token, oauth\n    token_file: ~/.config/mcp-standards/tokens.json\n    session_timeout: 3600\n\n    # OAuth settings\n    oauth:\n      provider: github  # github, google, okta\n      client_id: ${OAUTH_CLIENT_ID}\n      client_secret: ${OAUTH_CLIENT_SECRET}\n      redirect_uri: https://standards.example.com/auth/callback\n      scopes:\n        - read:user\n        - read:org\n\n  # TLS/SSL\n  tls:\n    enabled: false\n    cert: /etc/ssl/certs/server.crt\n    key: /etc/ssl/private/server.key\n    ca: /etc/ssl/certs/ca.crt\n    min_version: \"1.2\"\n    ciphers:\n      - ECDHE-RSA-AES256-GCM-SHA384\n      - ECDHE-RSA-AES128-GCM-SHA256\n\n  # CORS\n  cors:\n    enabled: true\n    origins:\n      - http://localhost:3001\n      - https://app.example.com\n    methods:\n      - GET\n      - POST\n      - OPTIONS\n    headers:\n      - Content-Type\n      - Authorization\n    credentials: true\n\n  # Rate limiting\n  rate_limit:\n    enabled: true\n    window_minutes: 1\n    max_requests: 60\n    burst: 100\n    by_ip: true\n    by_token: true\n    whitelist:\n      - 127.0.0.1\n      - 10.0.0.0/8\n\n# Token optimization\ntoken_optimization:\n  # Default settings\n  enabled: true\n  default_budget: 8000\n  model_type: gpt-4  # gpt-4, gpt-3.5, claude, custom\n\n  # Format preferences\n  prefer_formats:\n    - condensed\n    - structured\n    - full\n\n  # Compression settings\n  compression:\n    enabled: true\n    min_size_bytes: 1000\n    algorithms:\n      - sentencepiece\n      - bpe\n\n  # Caching\n  cache_optimized: true\n  cache_ttl_hours: 168\n\n# Validation configuration\nvalidation:\n  # General settings\n  enabled: true\n  strict_mode: false\n  parallel_workers: 4\n\n  # File patterns\n  include_patterns:\n    - \"**/*.js\"\n    - \"**/*.jsx\"\n    - \"**/*.ts\"\n    - \"**/*.tsx\"\n    - \"**/*.py\"\n    - \"**/*.yaml\"\n\n  exclude_patterns:\n    - \"**/node_modules/**\"\n    - \"**/dist/**\"\n    - \"**/build/**\"\n    - \"**/.git/**\"\n\n  # Rules configuration\n  rules:\n    # Global rule settings\n    global:\n      severity: warning\n      auto_fix: true\n\n    # Specific rule overrides\n    overrides:\n      no-console: off\n      max-line-length:\n        severity: warning\n        options:\n          limit: 100\n          ignore_comments: true\n\n      security-headers:\n        severity: error\n        auto_fix: false\n\n  # Reporting\n  report:\n    format: text  # text, json, junit, sarif\n    file: validation-report.json\n    fail_on: error\n    summary: true\n    details: true\n\n# Development settings\ndevelopment:\n  # Debug options\n  debug: false\n  verbose: false\n  trace: false\n\n  # Hot reload\n  watch: true\n  watch_patterns:\n    - \"**/*.yaml\"\n    - \"**/*.json\"\n\n  # Testing\n  test_mode: false\n  mock_data: false\n  fixtures_path: ./tests/fixtures\n\n# Analytics (optional)\nanalytics:\n  enabled: false\n  provider: mixpanel  # mixpanel, segment, custom\n  api_key: ${ANALYTICS_API_KEY}\n  track_usage: true\n  track_errors: true\n  anonymize_ip: true\n\n# Experimental features\nexperimental:\n  # AI-powered features\n  ai_suggestions: false\n  auto_fix_complex: false\n  natural_language_rules: false\n\n  # Performance features\n  lazy_loading: true\n  incremental_sync: true\n  distributed_cache: false\n\n# Plugin system\nplugins:\n  enabled: true\n  directory: ~/.config/mcp-standards/plugins\n  auto_load: true\n  allowed:\n    - official/*\n    - community/verified/*\n</code></pre>"},{"location":"cli/configuration/#environment-variables","title":"Environment Variables","text":"<p>All configuration options can be set via environment variables using the <code>MCP_STANDARDS_</code> prefix:</p> <pre><code># Repository settings\nexport MCP_STANDARDS_REPOSITORY_OWNER=williamzujkowski\nexport MCP_STANDARDS_REPOSITORY_REPO=standards\nexport MCP_STANDARDS_REPOSITORY_BRANCH=main\nexport MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=ghp_xxxxxxxxxxxx\n\n# Sync settings\nexport MCP_STANDARDS_SYNC_CACHE_TTL_HOURS=48\nexport MCP_STANDARDS_SYNC_PARALLEL_DOWNLOADS=10\n\n# Cache settings\nexport MCP_STANDARDS_CACHE_DIRECTORY=/var/cache/mcp-standards\nexport MCP_STANDARDS_CACHE_MAX_SIZE_MB=1000\n\n# Server settings\nexport MCP_STANDARDS_SERVER_HOST=0.0.0.0\nexport MCP_STANDARDS_SERVER_PORT=8080\nexport MCP_STANDARDS_SERVER_LOG_LEVEL=debug\n\n# Feature flags\nexport MCP_STANDARDS_SEARCH_ENABLED=true\nexport MCP_STANDARDS_VALIDATION_ENABLED=true\n</code></pre>"},{"location":"cli/configuration/#configuration-profiles","title":"Configuration Profiles","text":""},{"location":"cli/configuration/#development-profile","title":"Development Profile","text":"<pre><code># .mcp-standards.dev.yaml\ndevelopment:\n  debug: true\n  verbose: true\n\nserver:\n  host: localhost\n  port: 3001\n  log_level: debug\n  auth:\n    type: none\n\nsync:\n  cache_ttl_hours: 1\n  auto_sync: true\n\nvalidation:\n  strict_mode: true\n  auto_fix: true\n</code></pre>"},{"location":"cli/configuration/#production-profile","title":"Production Profile","text":"<pre><code># .mcp-standards.prod.yaml\nserver:\n  host: 0.0.0.0\n  port: 443\n  workers: 16\n  log_level: warning\n\n  tls:\n    enabled: true\n    cert: /etc/ssl/certs/server.crt\n    key: /etc/ssl/private/server.key\n\n  auth:\n    type: oauth\n    oauth:\n      provider: github\n\n  rate_limit:\n    enabled: true\n    max_requests: 30\n    burst: 50\n\ncache:\n  compression:\n    enabled: true\n    algorithm: zstd\n    level: 9\n\nsync:\n  verify_checksums: true\n  cache_ttl_hours: 168  # 1 week\n</code></pre>"},{"location":"cli/configuration/#cicd-profile","title":"CI/CD Profile","text":"<pre><code># .mcp-standards.ci.yaml\nsync:\n  cache_ttl_hours: 24\n  parallel_downloads: 1  # Avoid rate limits\n\nvalidation:\n  enabled: true\n  fail_on: error\n  report:\n    format: junit\n    file: test-results.xml\n\nserver:\n  auth:\n    type: token\n    token_file: /secrets/mcp-token\n\ncache:\n  directory: /tmp/mcp-cache\n</code></pre>"},{"location":"cli/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"cli/configuration/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code># Use environment variable substitution\nrepository:\n  owner: ${GITHUB_OWNER}\n  repo: ${GITHUB_REPO:-standards}  # With default\n  auth:\n    token: ${GITHUB_TOKEN:?Error: GITHUB_TOKEN required}\n\n# Conditional configuration\n$if: ${ENV} == \"production\"\nserver:\n  workers: 16\n  log_level: warning\n$else:\nserver:\n  workers: 2\n  log_level: debug\n</code></pre>"},{"location":"cli/configuration/#multi-repository-configuration","title":"Multi-Repository Configuration","text":"<pre><code># Support multiple standard sources\nrepositories:\n  - name: main\n    owner: williamzujkowski\n    repo: standards\n    branch: main\n    priority: 1\n\n  - name: enterprise\n    owner: company\n    repo: enterprise-standards\n    branch: master\n    priority: 2\n    auth:\n      token: ${ENTERPRISE_TOKEN}\n</code></pre>"},{"location":"cli/configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration\nmcp-standards config --validate\n\n# Test specific values\nmcp-standards config --test repository.auth\n\n# Dry run with config\nmcp-standards --dry-run -c custom-config.yaml sync\n</code></pre>"},{"location":"cli/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Use YAML for human-readable configuration</li> <li>Environment variables for secrets and deployment-specific values</li> <li>Separate profiles for dev/staging/production</li> <li>Version control your configuration (except secrets)</li> <li>Validate configuration in CI/CD pipelines</li> <li>Document custom configuration options</li> <li>Use defaults where possible to minimize configuration</li> </ol>"},{"location":"cli/configuration/#migration-guide","title":"Migration Guide","text":""},{"location":"cli/configuration/#from-v1x-to-v2x","title":"From v1.x to v2.x","text":"<pre><code># Automatic migration\nmcp-standards config --migrate\n\n# Manual migration\nmcp-standards config --export-v1 &gt; old-config.json\nmcp-standards config --import-v2 old-config.json\n</code></pre>"},{"location":"cli/configuration/#from-other-tools","title":"From Other Tools","text":"<pre><code># Import from ESLint config\nmcp-standards config --import-eslint .eslintrc.json\n\n# Import from Prettier config\nmcp-standards config --import-prettier .prettierrc\n</code></pre>"},{"location":"cli/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/configuration/#debug-configuration-loading","title":"Debug Configuration Loading","text":"<pre><code># Show configuration sources\nMCP_DEBUG_CONFIG=1 mcp-standards config --show-sources\n\n# Trace configuration resolution\nmcp-standards config --trace\n</code></pre>"},{"location":"cli/configuration/#common-issues","title":"Common Issues","text":"<ol> <li>Configuration not loading</li> <li>Check file permissions</li> <li>Verify YAML syntax</li> <li> <p>Ensure correct file extension</p> </li> <li> <p>Environment variables not working</p> </li> <li>Check variable naming (MCP_STANDARDS_ prefix)</li> <li>Verify shell export</li> <li> <p>Check for typos in nested paths</p> </li> <li> <p>Validation failures</p> </li> <li>Run with --validate flag</li> <li>Check required fields</li> <li>Verify value types and ranges</li> </ol>"},{"location":"cli/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with the MCP Standards Server CLI.</p>"},{"location":"cli/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run the built-in diagnostic command to check for common issues:</p> <pre><code>mcp-standards diagnose\n</code></pre> <p>This will check: - Configuration validity - Network connectivity - GitHub API access - Cache permissions - Dependencies - System resources</p>"},{"location":"cli/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"cli/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"cli/troubleshooting/#command-not-found","title":"Command Not Found","text":"<p>Problem: <code>mcp-standards: command not found</code></p> <p>Solutions:</p> <ol> <li> <p>Check installation:    <pre><code>pip show mcp-standards-server\n</code></pre></p> </li> <li> <p>Verify PATH:    <pre><code>echo $PATH\nwhich mcp-standards\n</code></pre></p> </li> <li> <p>Reinstall:    <pre><code>pip uninstall mcp-standards-server\npip install --user mcp-standards-server\n# Add to PATH if needed\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> </li> <li> <p>Use pipx (recommended):    <pre><code>pipx install mcp-standards-server\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#permission-denied","title":"Permission Denied","text":"<p>Problem: <code>Permission denied</code> when installing</p> <p>Solution: <pre><code># Install in user directory\npip install --user mcp-standards-server\n\n# Or use virtual environment\npython -m venv venv\nsource venv/bin/activate\npip install mcp-standards-server\n</code></pre></p>"},{"location":"cli/troubleshooting/#sync-issues","title":"Sync Issues","text":""},{"location":"cli/troubleshooting/#github-api-rate-limit","title":"GitHub API Rate Limit","text":"<p>Problem: <code>Error: API rate limit exceeded (60 requests per hour)</code></p> <p>Solutions:</p> <ol> <li> <p>Configure authentication:    <pre><code># Set GitHub token\nexport MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=ghp_xxxxxxxxxxxx\nmcp-standards sync\n</code></pre></p> </li> <li> <p>Check rate limit status:    <pre><code>mcp-standards status --json | jq '.rate_limit'\n</code></pre></p> </li> <li> <p>Wait for reset:    <pre><code># Show when rate limit resets\nmcp-standards status | grep \"Resets at\"\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#network-connection-errors","title":"Network Connection Errors","text":"<p>Problem: <code>Failed to connect to GitHub API</code></p> <p>Diagnostics: <pre><code># Test GitHub connectivity\ncurl -I https://api.github.com\n\n# Check proxy settings\necho $HTTP_PROXY $HTTPS_PROXY\n\n# Test with verbose output\nmcp-standards -v sync\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Configure proxy:    <pre><code>export HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nmcp-standards sync\n</code></pre></p> </li> <li> <p>Use custom GitHub API URL:    <pre><code>export MCP_STANDARDS_GITHUB_API_URL=https://github.company.com/api/v3\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#sync-hanging-or-timing-out","title":"Sync Hanging or Timing Out","text":"<p>Problem: Sync process hangs or times out</p> <p>Solutions:</p> <ol> <li> <p>Reduce parallel downloads:    <pre><code>mcp-standards sync --parallel 1\n</code></pre></p> </li> <li> <p>Increase timeout:    <pre><code>mcp-standards sync --timeout 120\n</code></pre></p> </li> <li> <p>Enable debug logging:    <pre><code>MCP_LOG_LEVEL=DEBUG mcp-standards -v sync\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#cache-issues","title":"Cache Issues","text":""},{"location":"cli/troubleshooting/#cache-directory-not-writable","title":"Cache Directory Not Writable","text":"<p>Problem: <code>Error: Cannot write to cache directory</code></p> <p>Solutions:</p> <ol> <li> <p>Check permissions:    <pre><code>ls -la ~/.cache/mcp-standards\n# Fix permissions\nchmod 755 ~/.cache/mcp-standards\n</code></pre></p> </li> <li> <p>Use different cache directory:    <pre><code>export MCP_STANDARDS_CACHE_DIRECTORY=/tmp/mcp-cache\nmcp-standards sync\n</code></pre></p> </li> <li> <p>Clear corrupted cache:    <pre><code>rm -rf ~/.cache/mcp-standards\nmcp-standards sync --force\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#cache-size-exceeded","title":"Cache Size Exceeded","text":"<p>Problem: <code>Warning: Cache size exceeds limit</code></p> <p>Solutions:</p> <ol> <li> <p>Clear old files:    <pre><code>mcp-standards cache --clear-outdated\n</code></pre></p> </li> <li> <p>Increase cache limit:    <pre><code>mcp-standards config --set cache.max_size_mb 1000\n</code></pre></p> </li> <li> <p>Enable auto-cleanup:    <pre><code># .mcp-standards.yaml\ncache:\n  auto_cleanup:\n    enabled: true\n    threshold_percent: 80\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"cli/troubleshooting/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Problem: Custom configuration ignored</p> <p>Diagnostics: <pre><code># Check which config is loaded\nmcp-standards config --which\n\n# Debug config loading\nMCP_DEBUG_CONFIG=1 mcp-standards config --show\n\n# Validate config syntax\nmcp-standards config --validate\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check file location:    <pre><code># Correct locations:\n~/.config/mcp-standards/config.yaml  # User config\n./.mcp-standards.yaml                # Project config\n</code></pre></p> </li> <li> <p>Fix YAML syntax:    <pre><code># Validate YAML\nyamllint .mcp-standards.yaml\n\n# Common issues:\n# - Tabs instead of spaces\n# - Missing colons\n# - Incorrect indentation\n</code></pre></p> </li> <li> <p>Use explicit config:    <pre><code>mcp-standards -c /path/to/config.yaml sync\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#environment-variables-not-working","title":"Environment Variables Not Working","text":"<p>Problem: Environment variables ignored</p> <p>Solutions:</p> <ol> <li> <p>Check variable naming:    <pre><code># Correct format: MCP_STANDARDS_&lt;SECTION&gt;_&lt;KEY&gt;\nexport MCP_STANDARDS_REPOSITORY_OWNER=williamzujkowski\nexport MCP_STANDARDS_SYNC_CACHE_TTL_HOURS=48\n</code></pre></p> </li> <li> <p>Verify export:    <pre><code># Check if exported\nenv | grep MCP_STANDARDS\n</code></pre></p> </li> <li> <p>Debug environment loading:    <pre><code>MCP_DEBUG_ENV=1 mcp-standards config --show\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#validation-issues","title":"Validation Issues","text":""},{"location":"cli/troubleshooting/#false-positives","title":"False Positives","text":"<p>Problem: Validation reports errors incorrectly</p> <p>Solutions:</p> <ol> <li> <p>Update standards:    <pre><code>mcp-standards sync --force\n</code></pre></p> </li> <li> <p>Adjust rule severity:    <pre><code># .mcp-validate.yaml\nrules:\n  overrides:\n    rule-name:\n      severity: warning  # or 'off'\n</code></pre></p> </li> <li> <p>Ignore specific files:    <pre><code>mcp-standards validate --ignore \"*.generated.js\"\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#validation-not-finding-files","title":"Validation Not Finding Files","text":"<p>Problem: No files validated</p> <p>Solutions:</p> <ol> <li> <p>Check patterns:    <pre><code># List files that would be validated\nmcp-standards validate --dry-run --verbose\n</code></pre></p> </li> <li> <p>Adjust include patterns:    <pre><code>validation:\n  include_patterns:\n    - \"**/*.js\"\n    - \"**/*.jsx\"\n    - \"src/**/*.ts\"\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#server-issues","title":"Server Issues","text":""},{"location":"cli/troubleshooting/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: <code>Error: Address already in use</code></p> <p>Solutions:</p> <ol> <li> <p>Find process using port:    <pre><code>lsof -i :3000\n# or\nnetstat -tulpn | grep 3000\n</code></pre></p> </li> <li> <p>Kill existing process:    <pre><code>kill -9 &lt;PID&gt;\n</code></pre></p> </li> <li> <p>Use different port:    <pre><code>mcp-standards serve --port 3001\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#server-crashes","title":"Server Crashes","text":"<p>Problem: Server crashes or restarts frequently</p> <p>Diagnostics: <pre><code># Check system resources\nfree -h\ndf -h\ntop\n\n# Check logs\ntail -f /var/log/mcp-standards.log\n\n# Run in debug mode\nmcp-standards serve --log-level debug\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Increase memory limit:    <pre><code>server:\n  memory:\n    max_heap_mb: 2048\n</code></pre></p> </li> <li> <p>Reduce workers:    <pre><code>mcp-standards serve --workers 2\n</code></pre></p> </li> <li> <p>Enable crash dumps:    <pre><code>export MCP_ENABLE_CRASH_DUMPS=1\nmcp-standards serve\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"cli/troubleshooting/#slow-sync","title":"Slow Sync","text":"<p>Problem: Sync takes too long</p> <p>Solutions:</p> <ol> <li> <p>Increase parallel downloads:    <pre><code>mcp-standards sync --parallel 10\n</code></pre></p> </li> <li> <p>Sync specific files:    <pre><code>mcp-standards sync --include \"web-*.yaml\"\n</code></pre></p> </li> <li> <p>Use incremental sync:    <pre><code># Only sync outdated files\nmcp-standards sync  # Default behavior\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: Excessive memory consumption</p> <p>Solutions:</p> <ol> <li> <p>Disable search indexing:    <pre><code>search:\n  enabled: false\n</code></pre></p> </li> <li> <p>Reduce cache size:    <pre><code>mcp-standards cache --clear\nmcp-standards config --set cache.max_size_mb 100\n</code></pre></p> </li> <li> <p>Use token optimization:    <pre><code>token_optimization:\n  compression:\n    enabled: true\n</code></pre></p> </li> </ol>"},{"location":"cli/troubleshooting/#debug-mode","title":"Debug Mode","text":"<p>Enable comprehensive debugging:</p> <pre><code># Maximum verbosity\nexport MCP_DEBUG=1\nexport MCP_LOG_LEVEL=DEBUG\nexport MCP_DEBUG_CONFIG=1\nexport MCP_DEBUG_ENV=1\nexport MCP_TRACE_REQUESTS=1\n\nmcp-standards -v sync\n</code></pre>"},{"location":"cli/troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"cli/troubleshooting/#log-locations","title":"Log Locations","text":"<ul> <li>User logs: <code>~/.cache/mcp-standards/logs/</code></li> <li>System logs: <code>/var/log/mcp-standards.log</code></li> <li>Crash dumps: <code>~/.cache/mcp-standards/crashes/</code></li> </ul>"},{"location":"cli/troubleshooting/#analyzing-logs","title":"Analyzing Logs","text":"<pre><code># Search for errors\ngrep ERROR ~/.cache/mcp-standards/logs/mcp-standards.log\n\n# Recent errors with context\ngrep -B5 -A5 ERROR ~/.cache/mcp-standards/logs/mcp-standards.log | tail -50\n\n# Parse JSON logs\ncat /var/log/mcp-standards.log | jq 'select(.level == \"ERROR\")'\n</code></pre>"},{"location":"cli/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"cli/troubleshooting/#generate-diagnostic-report","title":"Generate Diagnostic Report","text":"<pre><code>mcp-standards diagnose --report &gt; diagnostic-report.txt\n</code></pre> <p>This report includes: - System information - Configuration (sanitized) - Recent errors - Performance metrics - Dependency versions</p>"},{"location":"cli/troubleshooting/#community-support","title":"Community Support","text":"<ol> <li>GitHub Issues: https://github.com/williamzujkowski/mcp-standards-server/issues</li> <li>Discord: Join the MCP community Discord</li> <li>Stack Overflow: Tag questions with <code>mcp-standards</code></li> </ol>"},{"location":"cli/troubleshooting/#enterprise-support","title":"Enterprise Support","text":"<p>For enterprise support options: <pre><code>mcp-standards support --info\n</code></pre></p>"},{"location":"cli/troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"cli/troubleshooting/#reset-to-clean-state","title":"Reset to Clean State","text":"<pre><code>#!/bin/bash\n# reset-mcp-standards.sh\n\necho \"Backing up configuration...\"\ncp ~/.config/mcp-standards/config.yaml ~/mcp-standards-config.backup.yaml\n\necho \"Clearing cache...\"\nrm -rf ~/.cache/mcp-standards\n\necho \"Removing user configuration...\"\nrm -rf ~/.config/mcp-standards\n\necho \"Reinstalling...\"\npip uninstall -y mcp-standards-server\npip install mcp-standards-server\n\necho \"Initializing fresh configuration...\"\nmcp-standards config --init\n\necho \"Reset complete. Restore config from ~/mcp-standards-config.backup.yaml if needed.\"\n</code></pre>"},{"location":"cli/troubleshooting/#emergency-mode","title":"Emergency Mode","text":"<p>If the server won't start normally:</p> <pre><code># Start in safe mode\nmcp-standards serve --safe-mode\n\n# This disables:\n# - Plugins\n# - Search indexing  \n# - Auto-sync\n# - Custom validators\n</code></pre>"},{"location":"cli/troubleshooting/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"cli/troubleshooting/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# health-check.sh\n\n# Check if server is responsive\nif ! curl -f http://localhost:3000/health &gt; /dev/null 2&gt;&amp;1; then\n    echo \"Server not responding\"\n    # Send alert or restart\n    systemctl restart mcp-standards\nfi\n\n# Check cache size\nCACHE_SIZE=$(du -sm ~/.cache/mcp-standards | cut -f1)\nif [ $CACHE_SIZE -gt 500 ]; then\n    echo \"Cache size warning: ${CACHE_SIZE}MB\"\n    mcp-standards cache --clear-outdated\nfi\n\n# Check for sync failures\nif mcp-standards status --json | jq -e '.last_sync_error' &gt; /dev/null; then\n    echo \"Sync errors detected\"\n    mcp-standards sync --force\nfi\n</code></pre>"},{"location":"cli/troubleshooting/#known-issues","title":"Known Issues","text":""},{"location":"cli/troubleshooting/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"cli/troubleshooting/#macos","title":"macOS","text":"<ul> <li>File watching may require additional permissions</li> <li>Homebrew Python may have PATH issues</li> </ul>"},{"location":"cli/troubleshooting/#windows","title":"Windows","text":"<ul> <li>Path separators in config files must use forward slashes</li> <li>Long path names may cause issues</li> </ul>"},{"location":"cli/troubleshooting/#linux","title":"Linux","text":"<ul> <li>SELinux may block cache writes</li> <li>systemd service may need additional capabilities</li> </ul>"},{"location":"cli/troubleshooting/#version-specific-issues","title":"Version-Specific Issues","text":"<p>Check the CHANGELOG for version-specific known issues and fixes.</p>"},{"location":"cli/commands/","title":"Command Reference","text":"<p>This section provides detailed documentation for all MCP Standards Server CLI commands.</p>"},{"location":"cli/commands/#command-index","title":"Command Index","text":""},{"location":"cli/commands/#core-commands","title":"Core Commands","text":"<ul> <li>sync - Synchronize standards from repository</li> <li>status - Show sync status and statistics</li> <li>cache - Manage local cache</li> <li>config - Show or validate configuration</li> <li>generate - Generate standards from templates</li> </ul>"},{"location":"cli/commands/#planned-commands","title":"Planned Commands","text":"<p>The following commands are documented but not yet fully implemented in the CLI:</p> <ul> <li>query - Query standards based on context (use Python API or MCP server)</li> <li>validate - Validate code against standards (available as generate subcommand)</li> <li>serve - Start MCP server (use <code>python -m src</code>)</li> </ul>"},{"location":"cli/commands/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p>"},{"location":"cli/commands/#-v-verbose","title":"<code>-v, --verbose</code>","text":"<p>Enable verbose output for debugging.</p> <pre><code>mcp-standards -v sync\n</code></pre>"},{"location":"cli/commands/#-c-config-path","title":"<code>-c, --config &lt;path&gt;</code>","text":"<p>Specify a custom configuration file.</p> <pre><code>mcp-standards -c /path/to/config.yaml sync\n</code></pre>"},{"location":"cli/commands/#-no-color","title":"<code>--no-color</code>","text":"<p>Disable colored output (useful for CI/CD environments).</p> <pre><code>mcp-standards --no-color status\n</code></pre>"},{"location":"cli/commands/#-json","title":"<code>--json</code>","text":"<p>Output results in JSON format where applicable.</p> <pre><code>mcp-standards --json status\n</code></pre>"},{"location":"cli/commands/#-h-help","title":"<code>-h, --help</code>","text":"<p>Show help message for any command.</p> <pre><code>mcp-standards --help\nmcp-standards sync --help\n</code></pre>"},{"location":"cli/commands/#exit-codes","title":"Exit Codes","text":"<p>The CLI uses standard exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error</li> <li><code>2</code>: Command line syntax error</li> <li><code>3</code>: Configuration error</li> <li><code>4</code>: Network/sync error</li> <li><code>5</code>: Validation error</li> </ul>"},{"location":"cli/commands/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables affect CLI behavior:</p> <ul> <li><code>MCP_STANDARDS_CONFIG</code>: Default configuration file path</li> <li><code>MCP_STANDARDS_DATA_DIR</code>: Data directory location</li> <li><code>MCP_STANDARDS_CACHE_DIR</code>: Cache directory location</li> <li><code>MCP_DISABLE_SEARCH</code>: Disable semantic search features</li> <li><code>NO_COLOR</code>: Disable colored output (same as --no-color)</li> <li><code>MCP_LOG_LEVEL</code>: Set logging level (DEBUG, INFO, WARNING, ERROR)</li> </ul>"},{"location":"cli/commands/#configuration-precedence","title":"Configuration Precedence","text":"<p>Configuration is loaded in the following order (later sources override earlier ones):</p> <ol> <li>Default configuration</li> <li>System-wide configuration (<code>/etc/mcp-standards/config.yaml</code>)</li> <li>User configuration (<code>~/.config/mcp-standards/config.yaml</code>)</li> <li>Project configuration (<code>./.mcp-standards.yaml</code>)</li> <li>Environment variables</li> <li>Command-line options</li> </ol>"},{"location":"cli/commands/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/commands/#automated-sync-in-cicd","title":"Automated Sync in CI/CD","text":"<pre><code># In CI/CD pipeline\nmcp-standards sync --check || mcp-standards sync --force\n</code></pre>"},{"location":"cli/commands/#project-specific-configuration","title":"Project-Specific Configuration","text":"<pre><code># Use project-specific config\nmcp-standards -c .mcp-standards.yaml sync\n</code></pre>"},{"location":"cli/commands/#json-output-for-scripting","title":"JSON Output for Scripting","text":"<pre><code># Get status as JSON for processing\nSTATUS=$(mcp-standards --json status)\necho $STATUS | jq '.total_files'\n</code></pre>"},{"location":"cli/commands/#verbose-debugging","title":"Verbose Debugging","text":"<pre><code># Debug sync issues\nMCP_LOG_LEVEL=DEBUG mcp-standards -v sync\n</code></pre>"},{"location":"cli/commands/cache/","title":"cache Command","text":"<p>Manage the local standards cache.</p>"},{"location":"cli/commands/cache/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards cache [options]\n</code></pre>"},{"location":"cli/commands/cache/#description","title":"Description","text":"<p>The <code>cache</code> command provides tools for managing the local cache of standards files, including listing, clearing, exporting, and analyzing cached content.</p>"},{"location":"cli/commands/cache/#options","title":"Options","text":""},{"location":"cli/commands/cache/#-list","title":"<code>--list</code>","text":"<p>List all cached files with details.</p> <pre><code>mcp-standards cache --list\n</code></pre>"},{"location":"cli/commands/cache/#-clear","title":"<code>--clear</code>","text":"<p>Clear all cached files.</p> <pre><code>mcp-standards cache --clear\n</code></pre>"},{"location":"cli/commands/cache/#-clear-outdated","title":"<code>--clear-outdated</code>","text":"<p>Clear only outdated files (based on TTL).</p> <pre><code>mcp-standards cache --clear-outdated\n</code></pre>"},{"location":"cli/commands/cache/#-export-path","title":"<code>--export &lt;path&gt;</code>","text":"<p>Export cache to a directory or archive.</p> <pre><code>mcp-standards cache --export /path/to/export\nmcp-standards cache --export backup.tar.gz\n</code></pre>"},{"location":"cli/commands/cache/#-import-path","title":"<code>--import &lt;path&gt;</code>","text":"<p>Import cache from a directory or archive.</p> <pre><code>mcp-standards cache --import /path/to/import\nmcp-standards cache --import backup.tar.gz\n</code></pre>"},{"location":"cli/commands/cache/#-analyze","title":"<code>--analyze</code>","text":"<p>Analyze cache usage and provide statistics.</p> <pre><code>mcp-standards cache --analyze\n</code></pre>"},{"location":"cli/commands/cache/#-verify","title":"<code>--verify</code>","text":"<p>Verify cache integrity.</p> <pre><code>mcp-standards cache --verify\n</code></pre>"},{"location":"cli/commands/cache/#-size-limit-mb","title":"<code>--size-limit &lt;MB&gt;</code>","text":"<p>Set or check cache size limit.</p> <pre><code>mcp-standards cache --size-limit 500\n</code></pre>"},{"location":"cli/commands/cache/#examples","title":"Examples","text":""},{"location":"cli/commands/cache/#list-cached-files","title":"List Cached Files","text":"<pre><code>mcp-standards cache --list\n</code></pre> <p>Output: <pre><code>Cached files (25):\n\nweb-development/\n  html5-standards.yaml (12.3 KB) - cached 2h ago, expires in 22h\n  css3-standards.yaml (15.7 KB) - cached 2h ago, expires in 22h\n  javascript-es2025.yaml (23.1 KB) - cached 2h ago, expires in 22h\n\napi-design/\n  rest-api-standards.yaml (18.9 KB) - cached 25h ago, OUTDATED\n  graphql-standards.yaml (21.4 KB) - cached 2h ago, expires in 22h\n\ntesting/\n  javascript-testing.yaml (16.2 KB) - cached 2h ago, expires in 22h\n  python-testing.yaml (14.8 KB) - cached 2h ago, expires in 22h\n\nTotal: 25 files, 3.42 MB\nOutdated: 1 file\nCache directory: /home/user/.cache/mcp-standards\n</code></pre></p>"},{"location":"cli/commands/cache/#clear-cache","title":"Clear Cache","text":"<pre><code># Clear all cached files\nmcp-standards cache --clear\n</code></pre> <p>Output: <pre><code>Clearing cache...\nRemoved 25 files (3.42 MB)\nCache cleared successfully!\n</code></pre></p>"},{"location":"cli/commands/cache/#clear-outdated-files","title":"Clear Outdated Files","text":"<pre><code># Clear only outdated files\nmcp-standards cache --clear-outdated\n</code></pre> <p>Output: <pre><code>Clearing outdated files...\nRemoved 3 files:\n  - rest-api-standards.yaml (25h old)\n  - legacy-patterns.yaml (48h old)\n  - deprecated-standards.yaml (72h old)\n\nFreed 156 KB of disk space\n</code></pre></p>"},{"location":"cli/commands/cache/#export-cache","title":"Export Cache","text":"<pre><code># Export to directory\nmcp-standards cache --export ./standards-backup\n\n# Export to archive\nmcp-standards cache --export standards-backup.tar.gz\n</code></pre> <p>Output: <pre><code>Exporting cache to standards-backup.tar.gz...\nExported 25 files (3.42 MB)\nArchive created successfully\n</code></pre></p>"},{"location":"cli/commands/cache/#import-cache","title":"Import Cache","text":"<pre><code># Import from another installation\nmcp-standards cache --import /mnt/backup/standards-cache.tar.gz\n</code></pre> <p>Output: <pre><code>Importing cache from standards-cache.tar.gz...\nExtracted 25 files\nVerified checksums: OK\nImport completed successfully\n</code></pre></p>"},{"location":"cli/commands/cache/#analyze-cache-usage","title":"Analyze Cache Usage","text":"<pre><code>mcp-standards cache --analyze\n</code></pre> <p>Output: <pre><code>Cache Analysis Report\n====================\n\nLocation: /home/user/.cache/mcp-standards\nTotal size: 3.42 MB (3,588,096 bytes)\nFile count: 25\nAverage file size: 139.7 KB\n\nSize by category:\n  Web Development: 892 KB (26.1%) - 8 files\n  API Design: 654 KB (19.1%) - 6 files\n  Testing: 543 KB (15.9%) - 5 files\n  Security: 487 KB (14.2%) - 4 files\n  Other: 844 KB (24.7%) - 2 files\n\nAge distribution:\n  &lt; 1 hour: 5 files\n  1-6 hours: 12 files\n  6-24 hours: 5 files\n  &gt; 24 hours: 3 files (outdated)\n\nCompression ratio: 2.3:1 (files are compressed)\nDisk space available: 45.2 GB\n\nRecommendations:\n- 3 files are outdated and can be cleared\n- Cache is within size limits (3.42 MB / 500 MB)\n- Consider running 'sync' to update outdated files\n</code></pre></p>"},{"location":"cli/commands/cache/#verify-cache-integrity","title":"Verify Cache Integrity","text":"<pre><code>mcp-standards cache --verify\n</code></pre> <p>Output: <pre><code>Verifying cache integrity...\n\nChecking file structure... OK\nChecking metadata... OK\nVerifying checksums... \n\n\u2713 web-development/html5-standards.yaml\n\u2713 web-development/css3-standards.yaml\n\u2713 web-development/javascript-es2025.yaml\n\u2717 api-design/rest-api-standards.yaml - checksum mismatch!\n\u2713 api-design/graphql-standards.yaml\n\nResults:\n- Files checked: 25\n- Valid files: 24\n- Corrupted files: 1\n\nRecommendation: Run 'mcp-standards sync --force' to repair corrupted files\n</code></pre></p>"},{"location":"cli/commands/cache/#cache-management","title":"Cache Management","text":""},{"location":"cli/commands/cache/#setting-size-limits","title":"Setting Size Limits","text":"<pre><code># Set cache size limit to 100 MB\nmcp-standards cache --size-limit 100\n\n# Check current usage against limit\nmcp-standards cache --size-limit\n</code></pre> <p>Output: <pre><code>Current cache usage: 3.42 MB / 100 MB (3.4%)\nWarning threshold: 80 MB (80%)\nAction threshold: 95 MB (95%)\n</code></pre></p>"},{"location":"cli/commands/cache/#automatic-cleanup","title":"Automatic Cleanup","text":"<p>Configure automatic cleanup in your configuration:</p> <pre><code># .mcp-standards.yaml\ncache:\n  directory: ~/.cache/mcp-standards\n  max_size_mb: 500\n  auto_cleanup:\n    enabled: true\n    threshold_percent: 80\n    remove_oldest: true\n    keep_recent_hours: 24\n</code></pre>"},{"location":"cli/commands/cache/#cache-warming","title":"Cache Warming","text":"<pre><code># Pre-populate cache with all standards\nmcp-standards sync --force --all\n\n# Warm cache with specific patterns\nmcp-standards sync --include \"web-*\" --include \"api-*\"\n</code></pre>"},{"location":"cli/commands/cache/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/commands/cache/#cache-statistics-script","title":"Cache Statistics Script","text":"<pre><code>#!/bin/bash\n# cache-stats.sh - Monitor cache usage over time\n\nwhile true; do\n    STATS=$(mcp-standards cache --analyze --json)\n    TIMESTAMP=$(date +%s)\n    SIZE_MB=$(echo $STATS | jq '.total_size_mb')\n    FILE_COUNT=$(echo $STATS | jq '.file_count')\n\n    echo \"$TIMESTAMP,$SIZE_MB,$FILE_COUNT\" &gt;&gt; cache-stats.csv\n    sleep 3600  # Check every hour\ndone\n</code></pre>"},{"location":"cli/commands/cache/#backup-script","title":"Backup Script","text":"<pre><code>#!/bin/bash\n# backup-cache.sh - Regular cache backups\n\nBACKUP_DIR=\"/var/backups/mcp-standards\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\n# Create backup\nmcp-standards cache --export \"$BACKUP_DIR/cache_$TIMESTAMP.tar.gz\"\n\n# Keep only last 7 backups\nls -t \"$BACKUP_DIR\"/cache_*.tar.gz | tail -n +8 | xargs -r rm\n</code></pre>"},{"location":"cli/commands/cache/#cache-sync-between-machines","title":"Cache Sync Between Machines","text":"<pre><code># On source machine\nmcp-standards cache --export - | ssh target \"mcp-standards cache --import -\"\n\n# Using rsync for incremental sync\nrsync -av ~/.cache/mcp-standards/ remote:~/.cache/mcp-standards/\n</code></pre>"},{"location":"cli/commands/cache/#performance-tips","title":"Performance Tips","text":"<ol> <li>Regular Cleanup: Schedule regular cleanup of outdated files</li> <li>Size Monitoring: Monitor cache size to prevent disk space issues</li> <li>Compression: Cache files are automatically compressed</li> <li>Network Cache: Consider sharing cache across team using network storage</li> <li>CI/CD Cache: Export and import cache in CI/CD pipelines for faster builds</li> </ol>"},{"location":"cli/commands/cache/#related-commands","title":"Related Commands","text":"<ul> <li>sync - Synchronize standards</li> <li>status - Check cache status</li> <li>config - Configure cache settings</li> </ul>"},{"location":"cli/commands/config/","title":"config Command","text":"<p>Show, validate, and manage MCP Standards Server configuration.</p>"},{"location":"cli/commands/config/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards config [options]\n</code></pre>"},{"location":"cli/commands/config/#description","title":"Description","text":"<p>The <code>config</code> command helps you view, validate, and manage configuration files for the MCP Standards Server. It supports multiple configuration formats and provides tools for migration and validation.</p>"},{"location":"cli/commands/config/#options","title":"Options","text":""},{"location":"cli/commands/config/#-show","title":"<code>--show</code>","text":"<p>Display current configuration.</p> <pre><code>mcp-standards config --show\n</code></pre>"},{"location":"cli/commands/config/#-validate","title":"<code>--validate</code>","text":"<p>Validate configuration file syntax and values.</p> <pre><code>mcp-standards config --validate\n</code></pre>"},{"location":"cli/commands/config/#-init","title":"<code>--init</code>","text":"<p>Initialize a new configuration file with defaults.</p> <pre><code>mcp-standards config --init\n</code></pre>"},{"location":"cli/commands/config/#-edit","title":"<code>--edit</code>","text":"<p>Open configuration in default editor.</p> <pre><code>mcp-standards config --edit\n</code></pre>"},{"location":"cli/commands/config/#-get-key","title":"<code>--get &lt;key&gt;</code>","text":"<p>Get a specific configuration value.</p> <pre><code>mcp-standards config --get repository.owner\n</code></pre>"},{"location":"cli/commands/config/#-set-key-value","title":"<code>--set &lt;key&gt; &lt;value&gt;</code>","text":"<p>Set a specific configuration value.</p> <pre><code>mcp-standards config --set sync.cache_ttl_hours 48\n</code></pre>"},{"location":"cli/commands/config/#-migrate","title":"<code>--migrate</code>","text":"<p>Migrate configuration from older format.</p> <pre><code>mcp-standards config --migrate\n</code></pre>"},{"location":"cli/commands/config/#-schema","title":"<code>--schema</code>","text":"<p>Show configuration schema.</p> <pre><code>mcp-standards config --schema\n</code></pre>"},{"location":"cli/commands/config/#examples","title":"Examples","text":""},{"location":"cli/commands/config/#show-configuration","title":"Show Configuration","text":"<pre><code>mcp-standards config --show\n</code></pre> <p>Output: <pre><code># Current configuration from: /home/user/.config/mcp-standards/config.yaml\n\nrepository:\n  owner: williamzujkowski\n  repo: standards\n  branch: main\n  path: standards\n  auth:\n    type: none  # or 'token', 'app'\n\nsync:\n  cache_ttl_hours: 24\n  parallel_downloads: 5\n  retry_attempts: 3\n  timeout_seconds: 30\n  include_patterns:\n    - \"*.yaml\"\n    - \"*.md\"\n  exclude_patterns:\n    - \"*.draft.*\"\n    - \".git*\"\n\ncache:\n  directory: ~/.cache/mcp-standards\n  max_size_mb: 500\n  compression: true\n  auto_cleanup:\n    enabled: true\n    threshold_percent: 80\n\nsearch:\n  enabled: true\n  model: sentence-transformers/all-MiniLM-L6-v2\n  index_on_sync: true\n  cache_embeddings: true\n\nserver:\n  host: localhost\n  port: 3000\n  log_level: info\n  token_optimization:\n    enabled: true\n    default_budget: 8000\n    model_type: gpt-4\n\nvalidation:\n  enabled: true\n  strict_mode: false\n  custom_rules: []\n</code></pre></p>"},{"location":"cli/commands/config/#validate-configuration","title":"Validate Configuration","text":"<pre><code>mcp-standards config --validate\n</code></pre> <p>Output: <pre><code>Validating configuration file: /home/user/.config/mcp-standards/config.yaml\n\n\u2713 File exists and is readable\n\u2713 YAML syntax is valid\n\u2713 Required fields present\n\u2713 Repository configuration valid\n\u2713 Sync settings within allowed ranges\n\u2713 Cache directory writable\n\u26a0 Authentication not configured (using anonymous access)\n\nConfiguration is valid with 1 warning\n\nSuggestions:\n- Consider configuring GitHub authentication for higher rate limits\n- Run 'mcp-standards config --set repository.auth.type token' to configure\n</code></pre></p>"},{"location":"cli/commands/config/#initialize-configuration","title":"Initialize Configuration","text":"<pre><code># Create default configuration\nmcp-standards config --init\n</code></pre> <p>Output: <pre><code>Creating configuration file: /home/user/.config/mcp-standards/config.yaml\n\n? Repository owner: williamzujkowski\n? Repository name: standards\n? Branch: main\n? Path in repository: standards\n? Cache directory: (~/.cache/mcp-standards) \n? Configure GitHub authentication? No\n? Enable semantic search? Yes\n\nConfiguration file created successfully!\n\nNext steps:\n- Review configuration: mcp-standards config --show\n- Test sync: mcp-standards sync --check\n- Start server: mcp-standards serve\n</code></pre></p>"},{"location":"cli/commands/config/#getset-configuration-values","title":"Get/Set Configuration Values","text":"<pre><code># Get a specific value\nmcp-standards config --get sync.cache_ttl_hours\n24\n\n# Set a value\nmcp-standards config --set sync.cache_ttl_hours 48\nConfiguration updated: sync.cache_ttl_hours = 48\n\n# Get nested values\nmcp-standards config --get repository.owner\nwilliamzujkowski\n\n# Set complex values\nmcp-standards config --set sync.include_patterns '[\"*.yaml\", \"*.json\", \"*.md\"]'\nConfiguration updated: sync.include_patterns = [\"*.yaml\", \"*.json\", \"*.md\"]\n</code></pre>"},{"location":"cli/commands/config/#edit-configuration","title":"Edit Configuration","text":"<pre><code># Open in default editor\nmcp-standards config --edit\n\n# Opens $EDITOR or falls back to nano/vi\n</code></pre>"},{"location":"cli/commands/config/#show-configuration-schema","title":"Show Configuration Schema","text":"<pre><code>mcp-standards config --schema\n</code></pre> <p>Output: <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"MCP Standards Server Configuration\",\n  \"type\": \"object\",\n  \"required\": [\"repository\", \"sync\", \"cache\"],\n  \"properties\": {\n    \"repository\": {\n      \"type\": \"object\",\n      \"required\": [\"owner\", \"repo\", \"branch\", \"path\"],\n      \"properties\": {\n        \"owner\": {\n          \"type\": \"string\",\n          \"description\": \"GitHub repository owner\"\n        },\n        \"repo\": {\n          \"type\": \"string\",\n          \"description\": \"GitHub repository name\"\n        },\n        \"branch\": {\n          \"type\": \"string\",\n          \"default\": \"main\",\n          \"description\": \"Branch to sync from\"\n        },\n        \"path\": {\n          \"type\": \"string\",\n          \"description\": \"Path within repository\"\n        },\n        \"auth\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"type\": {\n              \"enum\": [\"none\", \"token\", \"app\"],\n              \"default\": \"none\"\n            },\n            \"token\": {\n              \"type\": \"string\",\n              \"description\": \"GitHub personal access token\"\n            }\n          }\n        }\n      }\n    },\n    \"sync\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"cache_ttl_hours\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"default\": 24\n        },\n        \"parallel_downloads\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"maximum\": 20,\n          \"default\": 5\n        }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"cli/commands/config/#configuration-sources","title":"Configuration Sources","text":"<p>Configuration is loaded from multiple sources in order of precedence:</p> <ol> <li>Default Configuration (built-in)</li> <li>System Configuration: <code>/etc/mcp-standards/config.yaml</code></li> <li>User Configuration: <code>~/.config/mcp-standards/config.yaml</code></li> <li>Project Configuration: <code>./.mcp-standards.yaml</code></li> <li>Environment Variables: <code>MCP_STANDARDS_*</code></li> <li>Command Line Options: <code>--config</code>, <code>--set</code></li> </ol>"},{"location":"cli/commands/config/#environment-variables","title":"Environment Variables","text":"<p>All configuration options can be set via environment variables:</p> <pre><code># Repository settings\nexport MCP_STANDARDS_REPOSITORY_OWNER=williamzujkowski\nexport MCP_STANDARDS_REPOSITORY_REPO=standards\nexport MCP_STANDARDS_REPOSITORY_BRANCH=main\n\n# Sync settings\nexport MCP_STANDARDS_SYNC_CACHE_TTL_HOURS=48\nexport MCP_STANDARDS_SYNC_PARALLEL_DOWNLOADS=10\n\n# Cache settings\nexport MCP_STANDARDS_CACHE_DIRECTORY=/var/cache/mcp-standards\nexport MCP_STANDARDS_CACHE_MAX_SIZE_MB=1000\n\n# Authentication\nexport MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=ghp_xxxxxxxxxxxx\n</code></pre>"},{"location":"cli/commands/config/#authentication-configuration","title":"Authentication Configuration","text":""},{"location":"cli/commands/config/#personal-access-token","title":"Personal Access Token","text":"<pre><code># Set GitHub token\nmcp-standards config --set repository.auth.type token\nmcp-standards config --set repository.auth.token \"ghp_xxxxxxxxxxxx\"\n\n# Or use environment variable\nexport MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=ghp_xxxxxxxxxxxx\n</code></pre>"},{"location":"cli/commands/config/#github-app","title":"GitHub App","text":"<pre><code>repository:\n  auth:\n    type: app\n    app_id: 123456\n    private_key_path: ~/.config/mcp-standards/github-app.pem\n    installation_id: 789012\n</code></pre>"},{"location":"cli/commands/config/#migration-from-older-versions","title":"Migration from Older Versions","text":"<pre><code># Migrate from v1 configuration\nmcp-standards config --migrate\n</code></pre> <p>Output: <pre><code>Detecting configuration format...\nFound v1 configuration at: ~/.mcp-standards.json\n\nMigrating configuration:\n\u2713 Repository settings\n\u2713 Cache settings\n\u2713 New sync options added with defaults\n\u2713 Search configuration added\n\nBackup created: ~/.mcp-standards.json.backup\nNew configuration saved: ~/.config/mcp-standards/config.yaml\n\nMigration completed successfully!\nPlease review the new configuration: mcp-standards config --show\n</code></pre></p>"},{"location":"cli/commands/config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"cli/commands/config/#multiple-profiles","title":"Multiple Profiles","text":"<pre><code># Use different configurations for different projects\nmcp-standards -c ./web-project.yaml sync\nmcp-standards -c ./api-project.yaml sync\n\n# Or use environment variable\nexport MCP_STANDARDS_CONFIG=./custom-config.yaml\nmcp-standards sync\n</code></pre>"},{"location":"cli/commands/config/#configuration-templates","title":"Configuration Templates","text":"<pre><code># Generate template for CI/CD\nmcp-standards config --template ci &gt; .github/mcp-standards.yaml\n\n# Generate template for development\nmcp-standards config --template dev &gt; .mcp-standards.dev.yaml\n</code></pre>"},{"location":"cli/commands/config/#validation-rules","title":"Validation Rules","text":"<pre><code># Custom validation rules\nvalidation:\n  enabled: true\n  custom_rules:\n    - name: require-auth\n      description: Ensure authentication is configured\n      rule: repository.auth.type != \"none\"\n      severity: warning\n\n    - name: min-cache-ttl\n      description: Ensure reasonable cache TTL\n      rule: sync.cache_ttl_hours &gt;= 12\n      severity: error\n</code></pre>"},{"location":"cli/commands/config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/commands/config/#common-issues","title":"Common Issues","text":"<pre><code># Debug configuration loading\nMCP_LOG_LEVEL=DEBUG mcp-standards config --show\n\n# Check which config file is being used\nmcp-standards config --which\n/home/user/.config/mcp-standards/config.yaml\n\n# Validate without loading\nmcp-standards config --validate --file ./test-config.yaml\n</code></pre>"},{"location":"cli/commands/config/#configuration-conflicts","title":"Configuration Conflicts","text":"<p>When multiple configuration sources are present:</p> <pre><code># Show effective configuration with sources\nmcp-standards config --show --sources\n</code></pre> <p>Output: <pre><code># Effective configuration (merged from multiple sources)\nrepository:\n  owner: williamzujkowski  # from: user config\n  repo: standards         # from: user config\n  branch: develop        # from: environment variable\n\nsync:\n  cache_ttl_hours: 48    # from: command line --set\n  parallel_downloads: 5   # from: default config\n</code></pre></p>"},{"location":"cli/commands/config/#related-commands","title":"Related Commands","text":"<ul> <li>sync - Use the configuration to sync standards</li> <li>serve - Start server with configuration</li> <li>validate - Validate code using configuration</li> </ul>"},{"location":"cli/commands/generate/","title":"generate","text":"<p>Generate standards from templates.</p>"},{"location":"cli/commands/generate/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards generate [options]\nmcp-standards generate list-templates\nmcp-standards generate template-info &lt;template_name&gt;\nmcp-standards generate customize [options]\nmcp-standards generate validate &lt;standard_file&gt;\n</code></pre>"},{"location":"cli/commands/generate/#description","title":"Description","text":"<p>The <code>generate</code> command provides a comprehensive system for creating new standards using pre-defined templates. It supports multiple workflows for standard creation, from simple generation to advanced customization.</p>"},{"location":"cli/commands/generate/#options","title":"Options","text":""},{"location":"cli/commands/generate/#main-generate-options","title":"Main Generate Options","text":""},{"location":"cli/commands/generate/#-template-t-name","title":"<code>--template, -t &lt;name&gt;</code>","text":"<p>Specify the template to use for generation.</p> <pre><code>mcp-standards generate --template technical --title \"GraphQL API Standards\"\n</code></pre>"},{"location":"cli/commands/generate/#-domain-d-name","title":"<code>--domain, -d &lt;name&gt;</code>","text":"<p>Use a domain-specific template.</p> <pre><code>mcp-standards generate --domain ai_ml --title \"Machine Learning Pipeline Standards\"\n</code></pre>"},{"location":"cli/commands/generate/#-output-o-path","title":"<code>--output, -o &lt;path&gt;</code>","text":"<p>Specify the output file path.</p> <pre><code>mcp-standards generate --template process --output ./standards/code-review.md\n</code></pre>"},{"location":"cli/commands/generate/#-title-title","title":"<code>--title &lt;title&gt;</code>","text":"<p>Set the standard title.</p> <pre><code>mcp-standards generate --template technical --title \"REST API Design Standards\"\n</code></pre>"},{"location":"cli/commands/generate/#-version-version","title":"<code>--version &lt;version&gt;</code>","text":"<p>Set the standard version (default: 1.0.0).</p> <pre><code>mcp-standards generate --template technical --version 2.0.0\n</code></pre>"},{"location":"cli/commands/generate/#-author-name","title":"<code>--author &lt;name&gt;</code>","text":"<p>Specify the standard author.</p> <pre><code>mcp-standards generate --template technical --author \"Jane Doe\"\n</code></pre>"},{"location":"cli/commands/generate/#-description-desc","title":"<code>--description &lt;desc&gt;</code>","text":"<p>Provide a brief description.</p> <pre><code>mcp-standards generate --template technical --description \"Standards for GraphQL API development\"\n</code></pre>"},{"location":"cli/commands/generate/#-interactive-i","title":"<code>--interactive, -i</code>","text":"<p>Run in interactive mode for guided generation.</p> <pre><code>mcp-standards generate --interactive\n</code></pre>"},{"location":"cli/commands/generate/#-preview-p","title":"<code>--preview, -p</code>","text":"<p>Preview the generated standard without saving.</p> <pre><code>mcp-standards generate --template technical --preview\n</code></pre>"},{"location":"cli/commands/generate/#-validate","title":"<code>--validate</code>","text":"<p>Validate the generated standard (default: true).</p> <pre><code>mcp-standards generate --template technical --no-validate\n</code></pre>"},{"location":"cli/commands/generate/#-config-file-path","title":"<code>--config-file &lt;path&gt;</code>","text":"<p>Use a configuration file for generation.</p> <pre><code>mcp-standards generate --config-file ./my-standard-config.yaml\n</code></pre>"},{"location":"cli/commands/generate/#subcommands","title":"Subcommands","text":""},{"location":"cli/commands/generate/#list-templates","title":"list-templates","text":"<p>List all available templates.</p> <pre><code>mcp-standards generate list-templates\n</code></pre> <p>Output example: <pre><code>Available Templates:\n\nBase Templates:\n  - base: General-purpose standard template\n  - technical: Technical implementation standards\n  - process: Process and workflow standards\n  - compliance: Compliance and regulatory standards\n  - operational: Operations and monitoring standards\n\nDomain Templates:\n  - ai_ml: AI/ML operations standards\n  - blockchain: Blockchain/Web3 standards\n  - gaming: Gaming development standards\n  - iot: IoT/Edge computing standards\n</code></pre></p>"},{"location":"cli/commands/generate/#template-info","title":"template-info","text":"<p>Get detailed information about a specific template.</p> <pre><code>mcp-standards generate template-info technical\n</code></pre> <p>Output example: <pre><code>Template: technical\nDescription: Template for technical implementation standards\nVersion: 1.2.0\n\nRequired Fields:\n  - title: Standard title\n  - version: Standard version\n  - category: Technical category\n  - domain: Technical domain\n\nOptional Fields:\n  - frameworks: Applicable frameworks\n  - languages: Programming languages\n  - tools: Required tools\n</code></pre></p>"},{"location":"cli/commands/generate/#customize","title":"customize","text":"<p>Create a custom template based on an existing one.</p> <pre><code>mcp-standards generate customize --template base --name my-custom-template\n</code></pre> <p>Options: - <code>--template, -t</code>: Base template to customize (required) - <code>--name, -n</code>: Name for the custom template (required) - <code>--config</code>: Configuration file for customization - <code>--interactive, -i</code>: Interactive customization mode</p>"},{"location":"cli/commands/generate/#validate","title":"validate","text":"<p>Validate an existing standard file.</p> <pre><code>mcp-standards generate validate ./standards/my-standard.md\n</code></pre> <p>Options: - <code>--report, -r</code>: Output validation report to file</p>"},{"location":"cli/commands/generate/#examples","title":"Examples","text":""},{"location":"cli/commands/generate/#basic-generation","title":"Basic Generation","text":"<p>Generate a technical standard: <pre><code>mcp-standards generate \\\n  --template technical \\\n  --title \"Python Async Programming Standards\" \\\n  --author \"John Smith\" \\\n  --output ./standards/python-async.md\n</code></pre></p>"},{"location":"cli/commands/generate/#interactive-mode","title":"Interactive Mode","text":"<p>Use interactive mode for guided generation: <pre><code>mcp-standards generate --interactive\n\n? Select template type: technical\n? Enter standard title: GraphQL API Standards\n? Enter version (1.0.0): 1.0.0\n? Enter author name: Jane Doe\n? Enter description: Best practices for GraphQL API design\n? Select category: API Design\n? Add frameworks? Yes\n? Enter frameworks (comma-separated): Apollo, GraphQL-JS\n? Preview before saving? Yes\n</code></pre></p>"},{"location":"cli/commands/generate/#using-configuration-file","title":"Using Configuration File","text":"<p>Create a configuration file (<code>graphql-standard.yaml</code>): <pre><code>template: technical\ntitle: \"GraphQL API Standards\"\nversion: \"1.0.0\"\nauthor: \"API Team\"\ncategory: \"API Design\"\ndomain: \"Web Development\"\ndescription: \"Comprehensive GraphQL API design and implementation standards\"\nmetadata:\n  frameworks:\n    - Apollo Server\n    - GraphQL-JS\n  languages:\n    - JavaScript\n    - TypeScript\n  compliance:\n    - \"NIST-800-53:AC-2\"\n    - \"NIST-800-53:AC-3\"\n</code></pre></p> <p>Generate using the config: <pre><code>mcp-standards generate --config-file graphql-standard.yaml\n</code></pre></p>"},{"location":"cli/commands/generate/#domain-specific-generation","title":"Domain-Specific Generation","text":"<p>Generate an AI/ML standard: <pre><code>mcp-standards generate \\\n  --domain ai_ml \\\n  --title \"ML Model Deployment Standards\" \\\n  --description \"Standards for deploying ML models in production\"\n</code></pre></p>"},{"location":"cli/commands/generate/#preview-mode","title":"Preview Mode","text":"<p>Preview without saving: <pre><code>mcp-standards generate \\\n  --template operational \\\n  --title \"Incident Response Standards\" \\\n  --preview\n</code></pre></p>"},{"location":"cli/commands/generate/#batch-generation","title":"Batch Generation","text":"<p>Generate multiple standards using a script: <pre><code>#!/bin/bash\ntemplates=(\"technical\" \"process\" \"operational\")\ntitles=(\"API Standards\" \"Code Review Standards\" \"Monitoring Standards\")\n\nfor i in ${!templates[@]}; do\n  mcp-standards generate \\\n    --template ${templates[$i]} \\\n    --title \"${titles[$i]}\" \\\n    --output \"./standards/${templates[$i]}-standard.md\"\ndone\n</code></pre></p>"},{"location":"cli/commands/generate/#template-selection-guide","title":"Template Selection Guide","text":"<p>Choose the appropriate template based on your needs:</p> <ul> <li>base: General standards, custom domains</li> <li>technical: Code, APIs, frameworks, languages</li> <li>process: Workflows, reviews, methodologies</li> <li>compliance: Security, privacy, regulations</li> <li>operational: Monitoring, incidents, SRE</li> </ul> <p>Domain-specific templates: - ai_ml: Machine learning pipelines, model management - blockchain: Smart contracts, DeFi, Web3 - gaming: Game engines, multiplayer, performance - iot: Edge computing, device management</p>"},{"location":"cli/commands/generate/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration files support all generation options:</p> <pre><code># Template selection\ntemplate: technical  # or domain template\ndomain: web_development\n\n# Basic information\ntitle: \"Standard Title\"\nversion: \"1.0.0\"\nauthor: \"Author Name\"\ndescription: \"Brief description\"\n\n# Categories and tags\ncategory: \"API Design\"\ntags:\n  - rest\n  - graphql\n  - api\n\n# Metadata\nmetadata:\n  frameworks:\n    - Express.js\n    - FastAPI\n  languages:\n    - JavaScript\n    - Python\n  tools:\n    - Postman\n    - Swagger\n\n# Compliance mapping\ncompliance:\n  - \"NIST-800-53:AC-2\"\n  - \"ISO-27001:A.9\"\n\n# Custom sections\nsections:\n  requirements:\n    - \"Use OpenAPI 3.0 specification\"\n    - \"Implement rate limiting\"\n  best_practices:\n    - title: \"API Versioning\"\n      content: \"Use semantic versioning in URLs\"\n    - title: \"Error Handling\"\n      content: \"Return consistent error responses\"\n</code></pre>"},{"location":"cli/commands/generate/#quality-validation","title":"Quality Validation","text":"<p>Generated standards are automatically validated for:</p> <ol> <li>Completeness: All required sections present</li> <li>Formatting: Proper markdown structure</li> <li>Metadata: Valid frontmatter</li> <li>References: Working links and citations</li> <li>Compliance: Valid NIST control mappings</li> </ol> <p>To skip validation: <pre><code>mcp-standards generate --template technical --no-validate\n</code></pre></p> <p>To validate existing standards: <pre><code>mcp-standards generate validate ./my-standard.md --report validation-report.json\n</code></pre></p>"},{"location":"cli/commands/generate/#tips","title":"Tips","text":"<ol> <li>Start with templates: Use existing templates rather than starting from scratch</li> <li>Use interactive mode: Helpful for first-time users or complex standards</li> <li>Preview first: Always preview before saving, especially for complex standards</li> <li>Version control: Commit generated standards to version control</li> <li>Customize templates: Create custom templates for repeated use</li> </ol>"},{"location":"cli/commands/generate/#see-also","title":"See Also","text":"<ul> <li>Template Index</li> <li>Creating Standards Guide</li> <li>sync - Sync standards from repository</li> </ul>"},{"location":"cli/commands/query/","title":"query Command","text":"<p>Query standards based on project context and requirements.</p>"},{"location":"cli/commands/query/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards query [options]\n</code></pre>"},{"location":"cli/commands/query/#description","title":"Description","text":"<p>The <code>query</code> command allows you to search and retrieve applicable standards based on your project's context, technology stack, and specific requirements. It uses intelligent matching and can provide results in various formats.</p>"},{"location":"cli/commands/query/#options","title":"Options","text":""},{"location":"cli/commands/query/#-project-type-type","title":"<code>--project-type &lt;type&gt;</code>","text":"<p>Specify the type of project.</p> <pre><code>mcp-standards query --project-type web-application\n</code></pre>"},{"location":"cli/commands/query/#-framework-name","title":"<code>--framework &lt;name&gt;</code>","text":"<p>Specify frameworks being used.</p> <pre><code>mcp-standards query --framework react --framework express\n</code></pre>"},{"location":"cli/commands/query/#-language-name","title":"<code>--language &lt;name&gt;</code>","text":"<p>Specify programming languages.</p> <pre><code>mcp-standards query --language javascript --language typescript\n</code></pre>"},{"location":"cli/commands/query/#-requirements-req","title":"<code>--requirements &lt;req&gt;</code>","text":"<p>Specify special requirements.</p> <pre><code>mcp-standards query --requirements accessibility --requirements security\n</code></pre>"},{"location":"cli/commands/query/#-tags-tag","title":"<code>--tags &lt;tag&gt;</code>","text":"<p>Filter by specific tags.</p> <pre><code>mcp-standards query --tags frontend --tags testing\n</code></pre>"},{"location":"cli/commands/query/#-format-format","title":"<code>--format &lt;format&gt;</code>","text":"<p>Output format (text, json, yaml, markdown).</p> <pre><code>mcp-standards query --format json\n</code></pre>"},{"location":"cli/commands/query/#-detailed","title":"<code>--detailed</code>","text":"<p>Include detailed standard content.</p> <pre><code>mcp-standards query --detailed\n</code></pre>"},{"location":"cli/commands/query/#-token-budget-number","title":"<code>--token-budget &lt;number&gt;</code>","text":"<p>Limit response to token budget.</p> <pre><code>mcp-standards query --token-budget 4000\n</code></pre>"},{"location":"cli/commands/query/#-semantic","title":"<code>--semantic</code>","text":"<p>Use semantic search for natural language queries.</p> <pre><code>mcp-standards query --semantic \"How do I implement authentication in React?\"\n</code></pre>"},{"location":"cli/commands/query/#examples","title":"Examples","text":""},{"location":"cli/commands/query/#basic-query","title":"Basic Query","text":"<pre><code>mcp-standards query --project-type web-application --framework react\n</code></pre> <p>Output: <pre><code>Applicable Standards Found: 7\n\n1. React 18 Patterns (react-18-patterns.yaml)\n   Tags: frontend, react, javascript, components\n   Priority: HIGH\n   Summary: Modern React patterns including hooks, Server Components, and performance optimization\n\n2. JavaScript ES2025 Standards (javascript-es2025.yaml)\n   Tags: javascript, ecmascript, language\n   Priority: HIGH\n   Summary: Modern JavaScript language features and best practices\n\n3. Web Accessibility Standards (wcag-2.2-accessibility.yaml)\n   Tags: accessibility, a11y, web\n   Priority: MEDIUM\n   Summary: WCAG 2.2 compliance guidelines and ARIA patterns\n\n4. Frontend Testing Standards (frontend-testing.yaml)\n   Tags: testing, frontend, jest, react-testing-library\n   Priority: MEDIUM\n   Summary: Testing patterns for React components and applications\n\n[... more results ...]\n\nUse --detailed to see full content or --format json for programmatic access\n</code></pre></p>"},{"location":"cli/commands/query/#detailed-query-with-content","title":"Detailed Query with Content","text":"<pre><code>mcp-standards query --project-type api --language python --detailed\n</code></pre> <p>Output: <pre><code>Applicable Standards Found: 5\n\n==============================\n1. Python API Standards\n==============================\nFile: python-api-standards.yaml\nTags: python, api, backend, rest\nPriority: HIGH\n\n## Overview\nStandards for building RESTful APIs with Python frameworks like FastAPI and Flask.\n\n## Key Standards\n\n### API Structure\n- Use consistent URL patterns: /api/v1/resources\n- Implement proper HTTP methods (GET, POST, PUT, DELETE)\n- Return appropriate status codes\n\n### Error Handling\n```python\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError):\n    return JSONResponse(\n        status_code=400,\n        content={\"error\": str(exc), \"type\": \"validation_error\"}\n    )\n</code></pre></p>"},{"location":"cli/commands/query/#authentication","title":"Authentication","text":"<ul> <li>Use JWT tokens for stateless authentication</li> <li>Implement OAuth2 for third-party integrations</li> <li>Always use HTTPS in production</li> </ul> <p>[... full standard content ...]</p> <p>============================== 2. Python Testing Standards ============================== [... next standard ...] <pre><code>### JSON Output for Integration\n\n```bash\nmcp-standards query --project-type web --framework vue --format json\n</code></pre></p> <p>Output: <pre><code>{\n  \"query\": {\n    \"project_type\": \"web\",\n    \"frameworks\": [\"vue\"],\n    \"timestamp\": \"2025-07-08T10:30:00Z\"\n  },\n  \"results\": [\n    {\n      \"id\": \"vue-3-composition-api\",\n      \"file\": \"vue-3-composition-api.yaml\",\n      \"title\": \"Vue 3 Composition API Standards\",\n      \"tags\": [\"frontend\", \"vue\", \"javascript\", \"composition-api\"],\n      \"priority\": \"HIGH\",\n      \"relevance_score\": 0.95,\n      \"summary\": \"Best practices for Vue 3 including Composition API and performance patterns\",\n      \"content_preview\": \"Standards for modern Vue 3 development...\",\n      \"size_bytes\": 18432,\n      \"last_updated\": \"2025-07-01T00:00:00Z\"\n    },\n    {\n      \"id\": \"javascript-es2025\",\n      \"file\": \"javascript-es2025.yaml\",\n      \"title\": \"JavaScript ES2025 Standards\",\n      \"tags\": [\"javascript\", \"ecmascript\", \"language\"],\n      \"priority\": \"HIGH\",\n      \"relevance_score\": 0.88,\n      \"summary\": \"Modern JavaScript language features and best practices\"\n    }\n  ],\n  \"metadata\": {\n    \"total_results\": 8,\n    \"query_time_ms\": 45,\n    \"cache_hit\": true,\n    \"semantic_search_used\": false\n  }\n}\n</code></pre></p>"},{"location":"cli/commands/query/#semantic-search-query","title":"Semantic Search Query","text":"<pre><code>mcp-standards query --semantic \"How do I implement secure authentication in a Node.js API?\"\n</code></pre> <p>Output: <pre><code>Semantic Search Results for: \"How do I implement secure authentication in a Node.js API?\"\n\n1. Node.js Security Standards (relevance: 94%)\n   - JWT implementation patterns\n   - bcrypt for password hashing\n   - Session management best practices\n   - OAuth2 integration examples\n\n2. API Authentication Standards (relevance: 89%)\n   - Token-based authentication\n   - API key management\n   - Rate limiting and throttling\n   - CORS configuration\n\n3. Express.js Security Middleware (relevance: 85%)\n   - Helmet.js configuration\n   - Session security\n   - CSRF protection\n   - Input validation\n\nShowing top 3 results. Use --detailed for full content.\n</code></pre></p>"},{"location":"cli/commands/query/#token-limited-query","title":"Token-Limited Query","text":"<pre><code>mcp-standards query --project-type web --token-budget 2000\n</code></pre> <p>Output: <pre><code>Applicable Standards (Token-Optimized Summary - 1,847 tokens):\n\n1. **React 18 Patterns** (250 tokens)\n   - Use functional components with hooks\n   - Implement React.memo for performance\n   - Use Suspense for data fetching\n   - Server Components for SSR\n\n2. **Web Performance Standards** (300 tokens)\n   - Achieve Core Web Vitals targets\n   - Implement lazy loading\n   - Optimize bundle sizes\n   - Use CDN for static assets\n\n3. **Accessibility Checklist** (200 tokens)\n   - ARIA labels for interactive elements\n   - Keyboard navigation support\n   - Color contrast ratios\n   - Screen reader compatibility\n\n[... more condensed standards ...]\n\nNote: Content condensed to fit token budget. Use --detailed for full versions.\n</code></pre></p>"},{"location":"cli/commands/query/#query-with-multiple-filters","title":"Query with Multiple Filters","text":"<pre><code>mcp-standards query \\\n  --project-type web-application \\\n  --framework react \\\n  --framework tailwind \\\n  --language typescript \\\n  --requirements accessibility \\\n  --requirements security \\\n  --tags testing\n</code></pre>"},{"location":"cli/commands/query/#export-query-results","title":"Export Query Results","text":"<pre><code># Export to Markdown for documentation\nmcp-standards query --project-type api --format markdown &gt; api-standards.md\n\n# Export to YAML for processing\nmcp-standards query --framework django --format yaml &gt; django-standards.yaml\n</code></pre>"},{"location":"cli/commands/query/#advanced-queries","title":"Advanced Queries","text":""},{"location":"cli/commands/query/#complex-context-object","title":"Complex Context Object","text":"<pre><code># Using a context file\ncat &gt; context.json &lt;&lt; EOF\n{\n  \"project_type\": \"microservice\",\n  \"languages\": [\"python\", \"go\"],\n  \"frameworks\": [\"fastapi\", \"gin\"],\n  \"infrastructure\": [\"kubernetes\", \"docker\"],\n  \"requirements\": {\n    \"compliance\": [\"pci-dss\", \"gdpr\"],\n    \"performance\": \"high-throughput\",\n    \"security\": \"critical\"\n  },\n  \"team_size\": \"medium\",\n  \"timeline\": \"6-months\"\n}\nEOF\n\nmcp-standards query --context context.json\n</code></pre>"},{"location":"cli/commands/query/#query-with-rule-engine","title":"Query with Rule Engine","text":"<pre><code># Show how standards were selected\nmcp-standards query --project-type web --show-rules\n</code></pre> <p>Output: <pre><code>Applied Selection Rules:\n\nRule: web-application-base\n  Condition: project_type == \"web-application\"\n  Applied Standards: [html5-standards, css3-standards, javascript-es2025]\n\nRule: react-ecosystem\n  Condition: framework.includes(\"react\")\n  Applied Standards: [react-18-patterns, jsx-best-practices]\n\nRule: accessibility-required\n  Condition: requirements.includes(\"accessibility\")\n  Applied Standards: [wcag-2.2-accessibility]\n\nFinal Standards: 6 (after de-duplication and priority sorting)\n</code></pre></p>"},{"location":"cli/commands/query/#batch-queries","title":"Batch Queries","text":"<pre><code># Query multiple contexts at once\ncat &gt; queries.json &lt;&lt; EOF\n[\n  {\n    \"name\": \"frontend\",\n    \"project_type\": \"web\",\n    \"framework\": \"react\"\n  },\n  {\n    \"name\": \"backend\", \n    \"project_type\": \"api\",\n    \"language\": \"python\"\n  }\n]\nEOF\n\nmcp-standards query --batch queries.json\n</code></pre>"},{"location":"cli/commands/query/#integration-examples","title":"Integration Examples","text":""},{"location":"cli/commands/query/#ide-integration","title":"IDE Integration","text":"<pre><code># VS Code task\n{\n  \"label\": \"Get Project Standards\",\n  \"type\": \"shell\",\n  \"command\": \"mcp-standards query --context ${workspaceFolder}/.mcp-context.json --format json\",\n  \"problemMatcher\": []\n}\n</code></pre>"},{"location":"cli/commands/query/#git-hook","title":"Git Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n# Ensure code follows applicable standards\n\nSTANDARDS=$(mcp-standards query --project-type web --format json)\n# Process standards and run validators\n</code></pre>"},{"location":"cli/commands/query/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># GitHub Actions example\n- name: Query Applicable Standards\n  run: |\n    mcp-standards query \\\n      --project-type ${{ matrix.project-type }} \\\n      --framework ${{ matrix.framework }} \\\n      --format json &gt; standards.json\n\n- name: Validate Against Standards\n  run: |\n    mcp-standards validate --standards standards.json\n</code></pre>"},{"location":"cli/commands/query/#query-performance","title":"Query Performance","text":"<ul> <li>Caching: Query results are cached for repeated queries</li> <li>Indexing: Standards are indexed for fast retrieval</li> <li>Semantic Search: Optional embeddings for natural language queries</li> <li>Token Optimization: Results can be condensed to fit token budgets</li> </ul>"},{"location":"cli/commands/query/#related-commands","title":"Related Commands","text":"<ul> <li>validate - Validate code against queried standards</li> <li>sync - Ensure standards are up to date</li> <li>serve - Start MCP server for programmatic queries</li> </ul>"},{"location":"cli/commands/serve/","title":"serve Command","text":"<p>Start the MCP Standards Server for Model Context Protocol integration.</p>"},{"location":"cli/commands/serve/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards serve [options]\n</code></pre>"},{"location":"cli/commands/serve/#description","title":"Description","text":"<p>The <code>serve</code> command starts the MCP Standards Server, which provides a Model Context Protocol interface for LLMs and development tools to interact with standards programmatically. This enables real-time standard queries, validation, and code generation assistance.</p>"},{"location":"cli/commands/serve/#options","title":"Options","text":""},{"location":"cli/commands/serve/#-host-address","title":"<code>--host &lt;address&gt;</code>","text":"<p>Host address to bind to (default: localhost).</p> <pre><code>mcp-standards serve --host 0.0.0.0\n</code></pre>"},{"location":"cli/commands/serve/#-port-number","title":"<code>--port &lt;number&gt;</code>","text":"<p>Port to listen on (default: 3000).</p> <pre><code>mcp-standards serve --port 8080\n</code></pre>"},{"location":"cli/commands/serve/#-stdio","title":"<code>--stdio</code>","text":"<p>Run in stdio mode for direct tool integration.</p> <pre><code>mcp-standards serve --stdio\n</code></pre>"},{"location":"cli/commands/serve/#-socket-path","title":"<code>--socket &lt;path&gt;</code>","text":"<p>Use Unix domain socket instead of TCP.</p> <pre><code>mcp-standards serve --socket /tmp/mcp-standards.sock\n</code></pre>"},{"location":"cli/commands/serve/#-workers-n","title":"<code>--workers &lt;n&gt;</code>","text":"<p>Number of worker processes (default: CPU count).</p> <pre><code>mcp-standards serve --workers 4\n</code></pre>"},{"location":"cli/commands/serve/#-log-level-level","title":"<code>--log-level &lt;level&gt;</code>","text":"<p>Set logging level (debug, info, warning, error).</p> <pre><code>mcp-standards serve --log-level debug\n</code></pre>"},{"location":"cli/commands/serve/#-auth-type","title":"<code>--auth &lt;type&gt;</code>","text":"<p>Enable authentication (none, token, oauth).</p> <pre><code>mcp-standards serve --auth token\n</code></pre>"},{"location":"cli/commands/serve/#-tls-cert-file","title":"<code>--tls-cert &lt;file&gt;</code>","text":"<p>TLS certificate file for HTTPS.</p> <pre><code>mcp-standards serve --tls-cert cert.pem --tls-key key.pem\n</code></pre>"},{"location":"cli/commands/serve/#-daemon","title":"<code>--daemon</code>","text":"<p>Run as background daemon.</p> <pre><code>mcp-standards serve --daemon\n</code></pre>"},{"location":"cli/commands/serve/#examples","title":"Examples","text":""},{"location":"cli/commands/serve/#basic-server-start","title":"Basic Server Start","text":"<pre><code>mcp-standards serve\n</code></pre> <p>Output: <pre><code>Starting MCP Standards Server v1.0.0\nLoading standards from cache...\n\u2713 Loaded 45 standards files\n\u2713 Initialized rule engine\n\u2713 Search index ready\n\u2713 Token optimizer configured (gpt-4, 8000 tokens)\n\nServer listening on http://localhost:3000\nAvailable MCP tools:\n  - get_applicable_standards\n  - validate_code\n  - search_standards\n  - get_standard_content\n  - check_compliance\n\nPress Ctrl+C to stop\n</code></pre></p>"},{"location":"cli/commands/serve/#production-server","title":"Production Server","text":"<pre><code>mcp-standards serve \\\n  --host 0.0.0.0 \\\n  --port 443 \\\n  --workers 8 \\\n  --auth token \\\n  --tls-cert /etc/ssl/certs/mcp.crt \\\n  --tls-key /etc/ssl/private/mcp.key \\\n  --log-level info \\\n  --daemon\n</code></pre>"},{"location":"cli/commands/serve/#stdio-mode-for-tool-integration","title":"Stdio Mode for Tool Integration","text":"<pre><code># For direct integration with LLM tools\nmcp-standards serve --stdio\n</code></pre> <p>When running in stdio mode, the server communicates via standard input/output: <pre><code>{\"jsonrpc\": \"2.0\", \"method\": \"initialize\", \"params\": {}, \"id\": 1}\n{\"jsonrpc\": \"2.0\", \"result\": {\"capabilities\": {...}}, \"id\": 1}\n</code></pre></p>"},{"location":"cli/commands/serve/#unix-socket-mode","title":"Unix Socket Mode","text":"<pre><code># For local IPC communication\nmcp-standards serve --socket /var/run/mcp-standards.sock\n</code></pre>"},{"location":"cli/commands/serve/#mcp-tools-available","title":"MCP Tools Available","text":""},{"location":"cli/commands/serve/#get_applicable_standards","title":"get_applicable_standards","text":"<p>Get standards based on project context:</p> <pre><code>{\n  \"tool\": \"get_applicable_standards\",\n  \"arguments\": {\n    \"context\": {\n      \"project_type\": \"web-application\",\n      \"frameworks\": [\"react\", \"nextjs\"],\n      \"languages\": [\"typescript\"],\n      \"requirements\": [\"accessibility\", \"performance\"]\n    },\n    \"include_resolution_details\": true\n  }\n}\n</code></pre>"},{"location":"cli/commands/serve/#validate_code","title":"validate_code","text":"<p>Validate code against standards:</p> <pre><code>{\n  \"tool\": \"validate_code\",\n  \"arguments\": {\n    \"code\": \"const Button = ({onClick}) =&gt; &lt;button onClick={onClick}&gt;Click&lt;/button&gt;\",\n    \"language\": \"javascript\",\n    \"standards\": [\"react-18-patterns\", \"wcag-2.2-accessibility\"]\n  }\n}\n</code></pre>"},{"location":"cli/commands/serve/#search_standards","title":"search_standards","text":"<p>Search standards using natural language:</p> <pre><code>{\n  \"tool\": \"search_standards\",\n  \"arguments\": {\n    \"query\": \"How to implement secure authentication in Node.js?\",\n    \"limit\": 5,\n    \"include_content\": true\n  }\n}\n</code></pre>"},{"location":"cli/commands/serve/#get_standard_content","title":"get_standard_content","text":"<p>Retrieve specific standard content:</p> <pre><code>{\n  \"tool\": \"get_standard_content\",\n  \"arguments\": {\n    \"standard_id\": \"react-18-patterns\",\n    \"format\": \"condensed\",\n    \"token_budget\": 2000\n  }\n}\n</code></pre>"},{"location":"cli/commands/serve/#configuration","title":"Configuration","text":"<p>Server configuration in <code>.mcp-standards.yaml</code>:</p> <pre><code>server:\n  host: localhost\n  port: 3000\n  workers: auto  # or specific number\n\n  # Logging\n  log_level: info\n  log_file: /var/log/mcp-standards.log\n\n  # Authentication\n  auth:\n    type: token  # none, token, oauth\n    token_file: /etc/mcp-standards/tokens.json\n    oauth:\n      provider: github\n      client_id: xxx\n      client_secret: xxx\n\n  # TLS/SSL\n  tls:\n    enabled: false\n    cert: /path/to/cert.pem\n    key: /path/to/key.pem\n    ca: /path/to/ca.pem\n\n  # Performance\n  cache:\n    enabled: true\n    ttl: 3600\n    max_size: 1000\n\n  # Token optimization\n  token_optimization:\n    enabled: true\n    default_budget: 8000\n    model_type: gpt-4\n\n  # Rate limiting\n  rate_limit:\n    enabled: true\n    requests_per_minute: 60\n    burst: 100\n</code></pre>"},{"location":"cli/commands/serve/#authentication","title":"Authentication","text":""},{"location":"cli/commands/serve/#token-authentication","title":"Token Authentication","text":"<pre><code># Generate tokens\nmcp-standards serve --generate-token --name \"vscode-client\"\nToken generated: mcp_token_a1b2c3d4e5f6\n\n# Start server with token auth\nmcp-standards serve --auth token\n</code></pre> <p>Client usage: <pre><code>curl -H \"Authorization: Bearer mcp_token_a1b2c3d4e5f6\" \\\n  http://localhost:3000/tools/get_applicable_standards\n</code></pre></p>"},{"location":"cli/commands/serve/#oauth-authentication","title":"OAuth Authentication","text":"<pre><code># Configure OAuth\nmcp-standards config --set server.auth.type oauth\nmcp-standards config --set server.auth.oauth.provider github\n\n# Start server\nmcp-standards serve --auth oauth\n</code></pre>"},{"location":"cli/commands/serve/#monitoring","title":"Monitoring","text":""},{"location":"cli/commands/serve/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>curl http://localhost:3000/health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"standards_loaded\": 45,\n  \"cache_size\": 3.42,\n  \"workers\": 4,\n  \"memory_usage_mb\": 128.5,\n  \"last_sync\": \"2025-07-08T10:15:30Z\"\n}\n</code></pre></p>"},{"location":"cli/commands/serve/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code>curl http://localhost:3000/metrics\n</code></pre> <p>Prometheus format output: <pre><code># HELP mcp_requests_total Total number of MCP requests\n# TYPE mcp_requests_total counter\nmcp_requests_total{tool=\"get_applicable_standards\"} 1234\n\n# HELP mcp_request_duration_seconds Request duration in seconds\n# TYPE mcp_request_duration_seconds histogram\nmcp_request_duration_seconds_bucket{le=\"0.1\"} 950\n</code></pre></p>"},{"location":"cli/commands/serve/#logging","title":"Logging","text":"<pre><code># View logs\ntail -f /var/log/mcp-standards.log\n\n# Log format\n2025-07-08 10:30:45 INFO: Request received: get_applicable_standards\n2025-07-08 10:30:45 DEBUG: Context: {project_type: \"web\", frameworks: [\"react\"]}\n2025-07-08 10:30:45 INFO: Found 7 applicable standards\n2025-07-08 10:30:45 INFO: Response sent in 45ms\n</code></pre>"},{"location":"cli/commands/serve/#integration-examples","title":"Integration Examples","text":""},{"location":"cli/commands/serve/#vs-code-extension","title":"VS Code Extension","text":"<pre><code>// .vscode/settings.json\n{\n  \"mcp-standards.server.url\": \"http://localhost:3000\",\n  \"mcp-standards.server.token\": \"mcp_token_xxx\",\n  \"mcp-standards.validation.onSave\": true,\n  \"mcp-standards.suggestions.enabled\": true\n}\n</code></pre>"},{"location":"cli/commands/serve/#claude-desktop-configuration","title":"Claude Desktop Configuration","text":"<pre><code>// claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"standards\": {\n      \"command\": \"mcp-standards\",\n      \"args\": [\"serve\", \"--stdio\"],\n      \"env\": {\n        \"MCP_STANDARDS_CONFIG\": \"/home/user/.config/mcp-standards/config.yaml\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"cli/commands/serve/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.11-slim\n\nRUN pip install mcp-standards-server\n\nCOPY config.yaml /etc/mcp-standards/\n\nEXPOSE 3000\n\nCMD [\"mcp-standards\", \"serve\", \\\n     \"--host\", \"0.0.0.0\", \\\n     \"--port\", \"3000\", \\\n     \"--config\", \"/etc/mcp-standards/config.yaml\"]\n</code></pre>"},{"location":"cli/commands/serve/#systemd-service","title":"Systemd Service","text":"<pre><code># /etc/systemd/system/mcp-standards.service\n[Unit]\nDescription=MCP Standards Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=mcp-standards\nGroup=mcp-standards\nWorkingDirectory=/var/lib/mcp-standards\nExecStart=/usr/local/bin/mcp-standards serve --daemon\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"cli/commands/serve/#nginx-reverse-proxy","title":"Nginx Reverse Proxy","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name standards.example.com;\n\n    ssl_certificate /etc/ssl/certs/example.crt;\n    ssl_certificate_key /etc/ssl/private/example.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n\n        # MCP specific headers\n        proxy_set_header X-MCP-Client $remote_addr;\n        proxy_read_timeout 300s;\n    }\n}\n</code></pre>"},{"location":"cli/commands/serve/#performance-tuning","title":"Performance Tuning","text":""},{"location":"cli/commands/serve/#worker-configuration","title":"Worker Configuration","text":"<pre><code># Auto-detect optimal workers\nmcp-standards serve --workers auto\n\n# Manual configuration for high load\nmcp-standards serve --workers 16 --log-level warning\n</code></pre>"},{"location":"cli/commands/serve/#memory-optimization","title":"Memory Optimization","text":"<pre><code># config.yaml\nserver:\n  memory:\n    max_heap_mb: 2048\n    gc_interval: 300  # seconds\n    cache_strategy: lru\n    preload_standards: true\n</code></pre>"},{"location":"cli/commands/serve/#connection-pooling","title":"Connection Pooling","text":"<pre><code>server:\n  connections:\n    max_concurrent: 1000\n    timeout_seconds: 30\n    keepalive: true\n    compression: gzip\n</code></pre>"},{"location":"cli/commands/serve/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/commands/serve/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable detailed debugging\nMCP_DEBUG=1 mcp-standards serve --log-level debug\n</code></pre>"},{"location":"cli/commands/serve/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port Already in Use <pre><code># Find process using port\nlsof -i :3000\n# Use different port\nmcp-standards serve --port 3001\n</code></pre></p> </li> <li> <p>Standards Not Loading <pre><code># Ensure standards are synced\nmcp-standards sync\n# Check cache\nmcp-standards cache --verify\n</code></pre></p> </li> <li> <p>Authentication Failures <pre><code># Regenerate tokens\nmcp-standards serve --regenerate-tokens\n# Check token permissions\nmcp-standards serve --list-tokens\n</code></pre></p> </li> </ol>"},{"location":"cli/commands/serve/#related-commands","title":"Related Commands","text":"<ul> <li>sync - Sync standards before serving</li> <li>status - Check server readiness</li> <li>config - Configure server settings</li> </ul>"},{"location":"cli/commands/status/","title":"status Command","text":"<p>Show synchronization status and statistics for the MCP Standards Server.</p>"},{"location":"cli/commands/status/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards status [options]\n</code></pre>"},{"location":"cli/commands/status/#description","title":"Description","text":"<p>The <code>status</code> command displays comprehensive information about the current state of the standards cache, synchronization history, and system health.</p>"},{"location":"cli/commands/status/#options","title":"Options","text":""},{"location":"cli/commands/status/#-json","title":"<code>--json</code>","text":"<p>Output status in JSON format for programmatic access.</p> <pre><code>mcp-standards status --json\n</code></pre>"},{"location":"cli/commands/status/#-detailed","title":"<code>--detailed</code>","text":"<p>Show detailed information including all cached files.</p> <pre><code>mcp-standards status --detailed\n</code></pre>"},{"location":"cli/commands/status/#-check-health","title":"<code>--check-health</code>","text":"<p>Perform health checks and report issues.</p> <pre><code>mcp-standards status --check-health\n</code></pre>"},{"location":"cli/commands/status/#-summary","title":"<code>--summary</code>","text":"<p>Show only summary information (default: false).</p> <pre><code>mcp-standards status --summary\n</code></pre>"},{"location":"cli/commands/status/#examples","title":"Examples","text":""},{"location":"cli/commands/status/#basic-status","title":"Basic Status","text":"<pre><code>mcp-standards status\n</code></pre> <p>Output: <pre><code>MCP Standards Server - Sync Status\n\nTotal files cached: 25\nTotal cache size: 3.42 MB\n\nGitHub API Rate Limit:\n  Remaining: 58/60\n  Resets at: 2025-07-08 15:30:00\n\nRecent syncs:\n  - web-development-standards.yaml: 2025-07-08 10:15:30\n  - api-design-standards.yaml: 2025-07-08 10:15:31\n  - testing-standards.yaml: 2025-07-08 10:15:32\n  - security-standards.yaml: 2025-07-08 10:15:33\n  - mcp-server-patterns.yaml: 2025-07-08 10:15:34\n\nRepository: williamzujkowski/standards\nBranch: main\nPath: standards\n</code></pre></p>"},{"location":"cli/commands/status/#json-output","title":"JSON Output","text":"<pre><code>mcp-standards status --json | jq .\n</code></pre> <p>Output: <pre><code>{\n  \"total_files\": 25,\n  \"total_size_mb\": 3.42,\n  \"rate_limit\": {\n    \"remaining\": 58,\n    \"limit\": 60,\n    \"reset_time\": \"2025-07-08T15:30:00Z\",\n    \"reset_timestamp\": 1736349000\n  },\n  \"last_sync_times\": {\n    \"web-development-standards.yaml\": \"2025-07-08T10:15:30Z\",\n    \"api-design-standards.yaml\": \"2025-07-08T10:15:31Z\",\n    \"testing-standards.yaml\": \"2025-07-08T10:15:32Z\",\n    \"security-standards.yaml\": \"2025-07-08T10:15:33Z\",\n    \"mcp-server-patterns.yaml\": \"2025-07-08T10:15:34Z\"\n  },\n  \"config\": {\n    \"repository\": {\n      \"owner\": \"williamzujkowski\",\n      \"repo\": \"standards\",\n      \"branch\": \"main\",\n      \"path\": \"standards\"\n    },\n    \"sync\": {\n      \"cache_ttl_hours\": 24,\n      \"parallel_downloads\": 5\n    }\n  },\n  \"cache_health\": {\n    \"status\": \"healthy\",\n    \"writable\": true,\n    \"space_available_gb\": 45.2\n  }\n}\n</code></pre></p>"},{"location":"cli/commands/status/#detailed-status","title":"Detailed Status","text":"<pre><code>mcp-standards status --detailed\n</code></pre> <p>Output: <pre><code>MCP Standards Server - Detailed Status\n\n=== Cache Information ===\nLocation: /home/user/.cache/mcp-standards\nTotal files: 25\nTotal size: 3.42 MB\nSpace available: 45.2 GB\n\n=== Cached Files ===\nweb-development/\n  \u251c\u2500\u2500 html5-standards.yaml (12.3 KB) - synced 2h ago\n  \u251c\u2500\u2500 css3-standards.yaml (15.7 KB) - synced 2h ago\n  \u2514\u2500\u2500 javascript-es2025.yaml (23.1 KB) - synced 2h ago\n\napi-design/\n  \u251c\u2500\u2500 rest-api-standards.yaml (18.9 KB) - synced 2h ago\n  \u2514\u2500\u2500 graphql-standards.yaml (21.4 KB) - synced 2h ago\n\ntesting/\n  \u251c\u2500\u2500 javascript-testing.yaml (16.2 KB) - synced 2h ago\n  \u2514\u2500\u2500 python-testing.yaml (14.8 KB) - synced 2h ago\n\n[... more files ...]\n\n=== Sync History ===\nLast successful sync: 2025-07-08 10:15:30\nTotal syncs today: 3\nFailed syncs today: 0\nAverage sync duration: 12.3 seconds\n\n=== System Health ===\n\u2713 Cache directory writable\n\u2713 Network connectivity OK\n\u2713 GitHub API accessible\n\u2713 No rate limit issues\n</code></pre></p>"},{"location":"cli/commands/status/#health-check","title":"Health Check","text":"<pre><code>mcp-standards status --check-health\n</code></pre> <p>Output: <pre><code>Performing health checks...\n\n\u2713 Cache directory accessible\n\u2713 Configuration valid\n\u2713 Network connectivity OK\n\u2713 GitHub API reachable\n\u2713 Rate limit healthy (58/60)\n\u26a0 3 files outdated (older than 24h)\n\u2713 Disk space adequate (45.2 GB free)\n\nOverall health: GOOD (1 warning)\n\nRecommendations:\n- Run 'mcp-standards sync' to update outdated files\n</code></pre></p>"},{"location":"cli/commands/status/#status-information","title":"Status Information","text":""},{"location":"cli/commands/status/#cache-metrics","title":"Cache Metrics","text":"<ul> <li>Total Files: Number of standards files in cache</li> <li>Cache Size: Total disk space used by cached files</li> <li>Space Available: Free disk space in cache directory</li> </ul>"},{"location":"cli/commands/status/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Remaining/Limit: Current API calls available</li> <li>Reset Time: When the rate limit resets</li> <li>Authenticated: Whether using authenticated requests</li> </ul>"},{"location":"cli/commands/status/#sync-history","title":"Sync History","text":"<ul> <li>Recent Syncs: Last 5 synchronized files</li> <li>Last Sync: Timestamp of most recent sync</li> <li>Sync Statistics: Success/failure counts</li> </ul>"},{"location":"cli/commands/status/#health-indicators","title":"Health Indicators","text":"<ul> <li>Cache Writable: Can write to cache directory</li> <li>Network OK: Internet connectivity available</li> <li>API Accessible: Can reach GitHub API</li> <li>Rate Limit OK: Sufficient API calls remaining</li> </ul>"},{"location":"cli/commands/status/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"cli/commands/status/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># Export metrics in Prometheus format\nmcp-standards status --format prometheus\n</code></pre> <p>Output: <pre><code># HELP mcp_standards_cache_files_total Total number of cached files\n# TYPE mcp_standards_cache_files_total gauge\nmcp_standards_cache_files_total 25\n\n# HELP mcp_standards_cache_size_bytes Total size of cache in bytes\n# TYPE mcp_standards_cache_size_bytes gauge\nmcp_standards_cache_size_bytes 3588096\n\n# HELP mcp_standards_rate_limit_remaining GitHub API rate limit remaining\n# TYPE mcp_standards_rate_limit_remaining gauge\nmcp_standards_rate_limit_remaining 58\n</code></pre></p>"},{"location":"cli/commands/status/#nagiosicinga-check","title":"Nagios/Icinga Check","text":"<pre><code>#!/bin/bash\n# check_mcp_standards.sh\n\nSTATUS=$(mcp-standards status --json)\nOUTDATED=$(echo $STATUS | jq '.outdated_files | length')\n\nif [ $OUTDATED -gt 10 ]; then\n    echo \"CRITICAL: $OUTDATED outdated files\"\n    exit 2\nelif [ $OUTDATED -gt 5 ]; then\n    echo \"WARNING: $OUTDATED outdated files\"\n    exit 1\nelse\n    echo \"OK: All files up to date\"\n    exit 0\nfi\n</code></pre>"},{"location":"cli/commands/status/#scripting-examples","title":"Scripting Examples","text":""},{"location":"cli/commands/status/#check-if-sync-needed","title":"Check if Sync Needed","text":"<pre><code>#!/bin/bash\n# Check if any files are outdated\n\nif mcp-standards status --json | jq -e '.outdated_files | length &gt; 0' &gt; /dev/null; then\n    echo \"Sync needed\"\n    mcp-standards sync\nelse\n    echo \"All files up to date\"\nfi\n</code></pre>"},{"location":"cli/commands/status/#monitor-cache-size","title":"Monitor Cache Size","text":"<pre><code>#!/bin/bash\n# Alert if cache exceeds size limit\n\nMAX_SIZE_MB=500\nCURRENT_SIZE=$(mcp-standards status --json | jq '.total_size_mb')\n\nif (( $(echo \"$CURRENT_SIZE &gt; $MAX_SIZE_MB\" | bc -l) )); then\n    echo \"Warning: Cache size ($CURRENT_SIZE MB) exceeds limit ($MAX_SIZE_MB MB)\"\n    # Could trigger cache cleanup here\nfi\n</code></pre>"},{"location":"cli/commands/status/#related-commands","title":"Related Commands","text":"<ul> <li>sync - Synchronize standards</li> <li>cache - Manage cache</li> <li>config - View configuration</li> </ul>"},{"location":"cli/commands/sync/","title":"sync Command","text":"<p>Synchronize standards from the configured GitHub repository.</p>"},{"location":"cli/commands/sync/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards sync [options]\n</code></pre>"},{"location":"cli/commands/sync/#description","title":"Description","text":"<p>The <code>sync</code> command downloads standards files from a GitHub repository and caches them locally. It supports incremental updates, force synchronization, and checking for updates without downloading.</p>"},{"location":"cli/commands/sync/#options","title":"Options","text":""},{"location":"cli/commands/sync/#-f-force","title":"<code>-f, --force</code>","text":"<p>Force synchronization of all files, ignoring cache TTL.</p> <pre><code>mcp-standards sync --force\n</code></pre>"},{"location":"cli/commands/sync/#-check","title":"<code>--check</code>","text":"<p>Check for updates without downloading files.</p> <pre><code>mcp-standards sync --check\n</code></pre>"},{"location":"cli/commands/sync/#-include-pattern","title":"<code>--include &lt;pattern&gt;</code>","text":"<p>Include only files matching the pattern (glob syntax).</p> <pre><code>mcp-standards sync --include \"*.yaml\"\nmcp-standards sync --include \"web-*\"\n</code></pre>"},{"location":"cli/commands/sync/#-exclude-pattern","title":"<code>--exclude &lt;pattern&gt;</code>","text":"<p>Exclude files matching the pattern.</p> <pre><code>mcp-standards sync --exclude \"*.draft.yaml\"\n</code></pre>"},{"location":"cli/commands/sync/#-parallel-n","title":"<code>--parallel &lt;n&gt;</code>","text":"<p>Number of parallel downloads (default: 5).</p> <pre><code>mcp-standards sync --parallel 10\n</code></pre>"},{"location":"cli/commands/sync/#-retry-n","title":"<code>--retry &lt;n&gt;</code>","text":"<p>Number of retry attempts for failed downloads (default: 3).</p> <pre><code>mcp-standards sync --retry 5\n</code></pre>"},{"location":"cli/commands/sync/#-timeout-seconds","title":"<code>--timeout &lt;seconds&gt;</code>","text":"<p>Timeout for each file download (default: 30).</p> <pre><code>mcp-standards sync --timeout 60\n</code></pre>"},{"location":"cli/commands/sync/#examples","title":"Examples","text":""},{"location":"cli/commands/sync/#basic-sync","title":"Basic Sync","text":"<pre><code># Sync all standards files\nmcp-standards sync\n</code></pre> <p>Output: <pre><code>Starting standards synchronization...\nFetching file list from williamzujkowski/standards...\nFiles to sync: 25\nDownloading: web-development-standards.yaml... [OK]\nDownloading: api-design-standards.yaml... [OK]\n...\nSync completed with status: success\nDuration: 12.34 seconds\nFiles synced: 25/25\n</code></pre></p>"},{"location":"cli/commands/sync/#check-for-updates","title":"Check for Updates","text":"<pre><code># Check which files need updating\nmcp-standards sync --check\n</code></pre> <p>Output: <pre><code>Checking for updates...\n\nOutdated files (3):\n  - web-development-standards.yaml (last synced 48.2 hours ago)\n  - testing-standards.yaml (last synced 72.5 hours ago)\n  - security-standards.yaml (last synced 96.1 hours ago)\n\nTotal cached files: 25\nCache TTL: 24 hours\n</code></pre></p>"},{"location":"cli/commands/sync/#force-sync-specific-files","title":"Force Sync Specific Files","text":"<pre><code># Force sync only web-related standards\nmcp-standards sync --force --include \"web-*.yaml\"\n</code></pre>"},{"location":"cli/commands/sync/#sync-with-custom-configuration","title":"Sync with Custom Configuration","text":"<pre><code># Use project-specific sync configuration\nmcp-standards -c .mcp-standards.yaml sync\n</code></pre>"},{"location":"cli/commands/sync/#configuration","title":"Configuration","text":"<p>The sync command uses the following configuration section:</p> <pre><code># .mcp-standards.yaml\nrepository:\n  owner: williamzujkowski\n  repo: standards\n  branch: main\n  path: standards\n\nsync:\n  cache_ttl_hours: 24\n  parallel_downloads: 5\n  retry_attempts: 3\n  timeout_seconds: 30\n  include_patterns:\n    - \"*.yaml\"\n    - \"*.md\"\n  exclude_patterns:\n    - \"*.draft.*\"\n    - \".git*\"\n\ncache:\n  directory: ~/.cache/mcp-standards\n  max_size_mb: 500\n</code></pre>"},{"location":"cli/commands/sync/#error-handling","title":"Error Handling","text":"<p>The sync command handles various error scenarios:</p>"},{"location":"cli/commands/sync/#network-errors","title":"Network Errors","text":"<pre><code>mcp-standards sync\n# Error: Failed to connect to GitHub API\n# Suggestion: Check internet connection and GitHub status\n</code></pre>"},{"location":"cli/commands/sync/#rate-limiting","title":"Rate Limiting","text":"<pre><code>mcp-standards sync\n# Warning: GitHub API rate limit reached (60/60)\n# Suggestion: Wait until 2025-07-08 15:30:00 or configure authentication\n</code></pre>"},{"location":"cli/commands/sync/#permission-errors","title":"Permission Errors","text":"<pre><code>mcp-standards sync\n# Error: Permission denied writing to cache directory\n# Suggestion: Check directory permissions or use --cache-dir\n</code></pre>"},{"location":"cli/commands/sync/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Parallel Downloads: Increase <code>--parallel</code> for faster syncs on good connections</li> <li>Caching: Files are cached based on TTL to minimize API calls</li> <li>Incremental Sync: Only outdated files are downloaded by default</li> <li>Compression: Files are compressed in cache to save disk space</li> </ul>"},{"location":"cli/commands/sync/#integration-examples","title":"Integration Examples","text":""},{"location":"cli/commands/sync/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>#!/bin/bash\n# ci-sync-standards.sh\n\n# Check if sync is needed\nif mcp-standards sync --check | grep -q \"Outdated files\"; then\n    echo \"Syncing outdated standards...\"\n    mcp-standards sync --retry 5 --timeout 60\nelse\n    echo \"Standards are up to date\"\nfi\n</code></pre>"},{"location":"cli/commands/sync/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\n# Ensure standards are synced before commit\nmcp-standards sync --check || {\n    echo \"Standards are outdated. Run 'mcp-standards sync' first.\"\n    exit 1\n}\n</code></pre>"},{"location":"cli/commands/sync/#scheduled-sync","title":"Scheduled Sync","text":"<pre><code># Crontab entry - sync standards daily at 2 AM\n0 2 * * * /usr/local/bin/mcp-standards sync &gt;&gt; /var/log/mcp-standards-sync.log 2&gt;&amp;1\n</code></pre>"},{"location":"cli/commands/sync/#related-commands","title":"Related Commands","text":"<ul> <li>status - Check sync status</li> <li>cache - Manage cached files</li> <li>config - View sync configuration</li> </ul>"},{"location":"cli/commands/validate/","title":"validate Command","text":"<p>Validate code against MCP standards.</p>"},{"location":"cli/commands/validate/#synopsis","title":"Synopsis","text":"<pre><code>mcp-standards validate [options] [path...]\n</code></pre>"},{"location":"cli/commands/validate/#description","title":"Description","text":"<p>The <code>validate</code> command checks your code against applicable standards, providing detailed feedback on compliance issues, suggestions for improvement, and automated fixes where possible.</p>"},{"location":"cli/commands/validate/#options","title":"Options","text":""},{"location":"cli/commands/validate/#-standards-file","title":"<code>--standards &lt;file&gt;</code>","text":"<p>Use specific standards file or query result.</p> <pre><code>mcp-standards validate --standards standards.json\n</code></pre>"},{"location":"cli/commands/validate/#-auto-detect","title":"<code>--auto-detect</code>","text":"<p>Automatically detect applicable standards (default).</p> <pre><code>mcp-standards validate --auto-detect\n</code></pre>"},{"location":"cli/commands/validate/#-fix","title":"<code>--fix</code>","text":"<p>Automatically fix issues where possible.</p> <pre><code>mcp-standards validate --fix\n</code></pre>"},{"location":"cli/commands/validate/#-dry-run","title":"<code>--dry-run</code>","text":"<p>Show what would be fixed without making changes.</p> <pre><code>mcp-standards validate --fix --dry-run\n</code></pre>"},{"location":"cli/commands/validate/#-format-format","title":"<code>--format &lt;format&gt;</code>","text":"<p>Output format (text, json, junit, sarif).</p> <pre><code>mcp-standards validate --format junit\n</code></pre>"},{"location":"cli/commands/validate/#-severity-level","title":"<code>--severity &lt;level&gt;</code>","text":"<p>Minimum severity level to report (error, warning, info).</p> <pre><code>mcp-standards validate --severity warning\n</code></pre>"},{"location":"cli/commands/validate/#-ignore-pattern","title":"<code>--ignore &lt;pattern&gt;</code>","text":"<p>Ignore files matching pattern.</p> <pre><code>mcp-standards validate --ignore \"*.test.js\" --ignore \"dist/*\"\n</code></pre>"},{"location":"cli/commands/validate/#-config-file","title":"<code>--config &lt;file&gt;</code>","text":"<p>Use custom validation configuration.</p> <pre><code>mcp-standards validate --config .mcp-validate.yaml\n</code></pre>"},{"location":"cli/commands/validate/#-parallel-n","title":"<code>--parallel &lt;n&gt;</code>","text":"<p>Number of parallel validation workers.</p> <pre><code>mcp-standards validate --parallel 4\n</code></pre>"},{"location":"cli/commands/validate/#-fail-on-level","title":"<code>--fail-on &lt;level&gt;</code>","text":"<p>Exit with error code if issues found at level.</p> <pre><code>mcp-standards validate --fail-on error\n</code></pre>"},{"location":"cli/commands/validate/#examples","title":"Examples","text":""},{"location":"cli/commands/validate/#basic-validation","title":"Basic Validation","text":"<pre><code>mcp-standards validate src/\n</code></pre> <p>Output: <pre><code>Detecting project context...\nProject Type: web-application\nFrameworks: react, tailwind\nLanguages: javascript, typescript\n\nLoading applicable standards...\n\u2713 React 18 Patterns\n\u2713 TypeScript Best Practices\n\u2713 Web Accessibility Standards\n\u2713 JavaScript ES2025 Standards\n\nValidating files...\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100% | 45/45 files\n\nResults:\n========\n\nsrc/components/Button.tsx\n  Line 15: ERROR - Missing accessible label\n    Standard: wcag-2.2-accessibility\n    Rule: interactive-elements-labels\n\n    &lt;button onClick={handleClick}&gt;\n      {icon}\n    &lt;/button&gt;\n\n    Fix: Add aria-label or visible text content\n\n  Line 23: WARNING - Using deprecated pattern\n    Standard: react-18-patterns\n    Rule: no-default-props\n\n    Button.defaultProps = { size: 'medium' }\n\n    Fix: Use default parameters in function signature\n\nsrc/api/client.js\n  Line 8: WARNING - Missing error boundary\n    Standard: javascript-error-handling\n    Rule: async-error-handling\n\n    async function fetchData(url) {\n      const response = await fetch(url);\n      return response.json();\n    }\n\n    Fix: Add try-catch block or .catch() handler\n\nsrc/styles/global.css\n  Line 145: INFO - Consider using CSS custom properties\n    Standard: modern-css-architecture\n    Rule: prefer-custom-properties\n\n    .theme-dark { background: #000; color: #fff; }\n\n    Suggestion: Use CSS variables for theme values\n\nSummary:\n  Files scanned: 45\n  Issues found: 12\n    Errors: 3\n    Warnings: 7\n    Info: 2\n\n  Standards applied: 4\n  Time: 2.34s\n\nExit code: 1 (errors found)\n</code></pre></p>"},{"location":"cli/commands/validate/#auto-fix-issues","title":"Auto-Fix Issues","text":"<pre><code>mcp-standards validate --fix src/\n</code></pre> <p>Output: <pre><code>Validating and fixing issues...\n\nFixed: src/components/Button.tsx\n  \u2713 Added aria-label to button (line 15)\n  \u2713 Converted defaultProps to default parameters (line 23)\n\nFixed: src/api/client.js\n  \u2713 Added error handling to async function (line 8)\n\nCould not auto-fix:\n  src/styles/global.css - Manual review required for CSS architecture\n\nSummary:\n  Files fixed: 2\n  Issues fixed: 3\n  Issues remaining: 1\n\nPlease review the changes before committing.\n</code></pre></p>"},{"location":"cli/commands/validate/#dry-run-mode","title":"Dry Run Mode","text":"<pre><code>mcp-standards validate --fix --dry-run\n</code></pre> <p>Output: <pre><code>DRY RUN MODE - No files will be modified\n\nWould fix: src/components/Button.tsx\n  - Line 15: Add aria-label=\"Submit\" to button\n  - Line 23: Convert to: function Button({ size = 'medium' })\n\nWould fix: src/api/client.js\n  - Line 8-12: Wrap in try-catch block:\n\n    async function fetchData(url) {\n      try {\n        const response = await fetch(url);\n        return response.json();\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        throw error;\n      }\n    }\n\nTotal changes that would be made: 3 fixes in 2 files\n</code></pre></p>"},{"location":"cli/commands/validate/#json-output-for-cicd","title":"JSON Output for CI/CD","text":"<pre><code>mcp-standards validate --format json src/ &gt; validation-results.json\n</code></pre> <p>Output (validation-results.json): <pre><code>{\n  \"summary\": {\n    \"files_scanned\": 45,\n    \"total_issues\": 12,\n    \"errors\": 3,\n    \"warnings\": 7,\n    \"info\": 2,\n    \"standards_applied\": 4,\n    \"duration_ms\": 2340\n  },\n  \"issues\": [\n    {\n      \"file\": \"src/components/Button.tsx\",\n      \"line\": 15,\n      \"column\": 5,\n      \"severity\": \"error\",\n      \"standard\": \"wcag-2.2-accessibility\",\n      \"rule\": \"interactive-elements-labels\",\n      \"message\": \"Missing accessible label\",\n      \"code\": \"A11Y001\",\n      \"snippet\": \"&lt;button onClick={handleClick}&gt;\",\n      \"fix\": {\n        \"available\": true,\n        \"description\": \"Add aria-label attribute\",\n        \"diff\": \"+ &lt;button onClick={handleClick} aria-label=\\\"Submit\\\"&gt;\"\n      }\n    }\n  ],\n  \"standards\": [\n    {\n      \"id\": \"wcag-2.2-accessibility\",\n      \"title\": \"Web Accessibility Standards\",\n      \"rules_applied\": 15,\n      \"issues_found\": 3\n    }\n  ]\n}\n</code></pre></p>"},{"location":"cli/commands/validate/#junit-format-for-ci","title":"JUnit Format for CI","text":"<pre><code>mcp-standards validate --format junit &gt; test-results.xml\n</code></pre>"},{"location":"cli/commands/validate/#sarif-format-for-github","title":"SARIF Format for GitHub","text":"<pre><code>mcp-standards validate --format sarif &gt; results.sarif\n</code></pre>"},{"location":"cli/commands/validate/#custom-validation-config","title":"Custom Validation Config","text":"<pre><code># .mcp-validate.yaml\nvalidation:\n  # Override detected standards\n  standards:\n    - react-18-patterns\n    - typescript-strict\n    - security-best-practices\n\n  # Ignore patterns\n  ignore:\n    - \"**/*.test.*\"\n    - \"**/*.spec.*\"\n    - \"build/**\"\n    - \"dist/**\"\n    - \"node_modules/**\"\n\n  # Rule overrides\n  rules:\n    # Disable specific rules\n    no-console: off\n    no-default-props: warning  # Downgrade from error\n\n    # Configure rule options\n    max-line-length:\n      severity: warning\n      options:\n        limit: 100\n        ignore-comments: true\n\n  # Auto-fix settings\n  fix:\n    enabled: true\n    safe-only: true  # Only apply safe fixes\n\n  # Reporting\n  report:\n    severity: warning  # Minimum level to report\n    fail-on: error    # Exit code 1 if errors found\n</code></pre>"},{"location":"cli/commands/validate/#validate-specific-standards","title":"Validate Specific Standards","text":"<pre><code># First, query standards\nmcp-standards query --project-type api --format json &gt; api-standards.json\n\n# Then validate against them\nmcp-standards validate --standards api-standards.json src/api/\n</code></pre>"},{"location":"cli/commands/validate/#parallel-validation","title":"Parallel Validation","text":"<pre><code># Use multiple workers for large codebases\nmcp-standards validate --parallel 8 .\n</code></pre> <p>Output: <pre><code>Starting validation with 8 workers...\n\nWorker 1: Scanning src/components/...\nWorker 2: Scanning src/api/...\nWorker 3: Scanning src/utils/...\nWorker 4: Scanning src/styles/...\n[... parallel progress ...]\n\nMerged results from all workers.\nTotal issues: 45\n</code></pre></p>"},{"location":"cli/commands/validate/#integration-examples","title":"Integration Examples","text":""},{"location":"cli/commands/validate/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\n# Validate staged files\nSTAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\\.(js|jsx|ts|tsx)$')\n\nif [ -n \"$STAGED_FILES\" ]; then\n    echo \"Validating staged files...\"\n    mcp-standards validate $STAGED_FILES --fail-on error\n\n    if [ $? -ne 0 ]; then\n        echo \"Validation failed. Fix errors before committing.\"\n        exit 1\n    fi\nfi\n</code></pre>"},{"location":"cli/commands/validate/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Standards Validation\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup MCP Standards\n        run: pip install mcp-standards-server\n\n      - name: Sync Standards\n        run: mcp-standards sync\n\n      - name: Validate Code\n        run: |\n          mcp-standards validate \\\n            --format sarif \\\n            --fail-on error \\\n            . &gt; results.sarif\n\n      - name: Upload SARIF\n        uses: github/codeql-action/upload-sarif@v2\n        if: always()\n        with:\n          sarif_file: results.sarif\n</code></pre>"},{"location":"cli/commands/validate/#vs-code-task","title":"VS Code Task","text":"<pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Validate Current File\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards\",\n      \"args\": [\n        \"validate\",\n        \"${file}\",\n        \"--format\", \"json\"\n      ],\n      \"problemMatcher\": {\n        \"pattern\": {\n          \"regexp\": \"^(.+):(\\\\d+):(\\\\d+):\\\\s+(error|warning)\\\\s+(.+)$\",\n          \"file\": 1,\n          \"line\": 2,\n          \"column\": 3,\n          \"severity\": 4,\n          \"message\": 5\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"cli/commands/validate/#custom-validator-plugin","title":"Custom Validator Plugin","text":"<pre><code># validators/custom_security.py\nfrom mcp_standards.validators import BaseValidator\n\nclass CustomSecurityValidator(BaseValidator):\n    \"\"\"Custom security validation rules.\"\"\"\n\n    def validate_file(self, file_path, content):\n        issues = []\n\n        # Check for hardcoded secrets\n        if 'api_key' in content.lower():\n            issues.append({\n                'severity': 'error',\n                'message': 'Possible hardcoded API key',\n                'line': self.find_line_number('api_key', content),\n                'rule': 'no-hardcoded-secrets'\n            })\n\n        return issues\n</code></pre>"},{"location":"cli/commands/validate/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use Parallel Workers: For large codebases, increase parallel workers</li> <li>Ignore Patterns: Exclude generated files and dependencies</li> <li>Incremental Validation: Only validate changed files in CI</li> <li>Cache Standards: Ensure standards are synced before validation</li> <li>Severity Filtering: Focus on errors first, then warnings</li> </ol>"},{"location":"cli/commands/validate/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: Validation passed, no issues found</li> <li><code>1</code>: Validation failed, issues found at fail-on level</li> <li><code>2</code>: Command line error</li> <li><code>3</code>: Configuration error</li> <li><code>4</code>: Standards loading error</li> <li><code>5</code>: File access error</li> </ul>"},{"location":"cli/commands/validate/#related-commands","title":"Related Commands","text":"<ul> <li>query - Find applicable standards</li> <li>sync - Update standards</li> <li>serve - Run as MCP server for IDE integration</li> </ul>"},{"location":"cli/examples/","title":"CLI Examples","text":"<p>This directory contains practical examples of using the MCP Standards Server CLI in various scenarios.</p>"},{"location":"cli/examples/#quick-examples","title":"Quick Examples","text":""},{"location":"cli/examples/#basic-commands","title":"Basic Commands","text":"<pre><code># Initialize configuration\nmcp-standards config --init\n\n# Sync standards\nmcp-standards sync\n\n# Check status\nmcp-standards status\n\n# Query standards for a React project\nmcp-standards query --project-type web-application --framework react\n\n# Validate current directory\nmcp-standards validate .\n\n# Start MCP server\nmcp-standards serve\n</code></pre>"},{"location":"cli/examples/#common-use-cases","title":"Common Use Cases","text":"<pre><code># Validate and auto-fix issues\nmcp-standards validate src/ --fix\n\n# Check for standards updates without downloading\nmcp-standards sync --check\n\n# Export standards for documentation\nmcp-standards query --project-type api --format markdown &gt; api-standards.md\n\n# Clear outdated cache entries\nmcp-standards cache --clear-outdated\n\n# Validate with custom config\nmcp-standards -c custom-config.yaml validate\n</code></pre>"},{"location":"cli/examples/#example-scripts","title":"Example Scripts","text":""},{"location":"cli/examples/#daily-development-script","title":"Daily Development Script","text":"<pre><code>#!/bin/bash\n# dev-start.sh - Start development with standards check\n\necho \"\ud83d\ude80 Starting development environment...\"\n\n# Update standards if needed\nif mcp-standards sync --check | grep -q \"outdated\"; then\n    echo \"\ud83d\udce5 Updating standards...\"\n    mcp-standards sync\nfi\n\n# Validate workspace\necho \"\u2705 Checking code standards...\"\nmcp-standards validate . --severity warning --quiet\n\n# Start MCP server in background\necho \"\ud83d\udda5\ufe0f  Starting MCP server...\"\nmcp-standards serve --daemon\n\necho \"\u2728 Ready to code! MCP server running on http://localhost:3000\"\n</code></pre>"},{"location":"cli/examples/#pre-commit-validation","title":"Pre-commit Validation","text":"<pre><code>#!/bin/bash\n# pre-commit.sh - Validate before committing\n\n# Get staged files\nSTAGED=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\\.(js|jsx|ts|tsx|py)$')\n\nif [ -z \"$STAGED\" ]; then\n    echo \"No files to validate\"\n    exit 0\nfi\n\necho \"Validating staged files...\"\necho \"$STAGED\" | xargs mcp-standards validate --fix\n\n# Re-stage fixed files\necho \"$STAGED\" | xargs git add\n\n# Final validation\nif ! echo \"$STAGED\" | xargs mcp-standards validate --fail-on error; then\n    echo \"\u274c Validation failed. Please fix errors before committing.\"\n    exit 1\nfi\n\necho \"\u2705 All checks passed!\"\n</code></pre>"},{"location":"cli/examples/#project-setup-script","title":"Project Setup Script","text":"<pre><code>#!/bin/bash\n# setup-project.sh - Set up new project with standards\n\nPROJECT_NAME=$1\nPROJECT_TYPE=${2:-web-application}\n\nif [ -z \"$PROJECT_NAME\" ]; then\n    echo \"Usage: $0 &lt;project-name&gt; [project-type]\"\n    exit 1\nfi\n\necho \"\ud83c\udfd7\ufe0f  Setting up project: $PROJECT_NAME\"\n\n# Create project directory\nmkdir -p \"$PROJECT_NAME\"\ncd \"$PROJECT_NAME\"\n\n# Initialize git\ngit init\n\n# Create MCP context\ncat &gt; .mcp-context.json &lt;&lt; EOF\n{\n  \"project_type\": \"$PROJECT_TYPE\",\n  \"name\": \"$PROJECT_NAME\",\n  \"created\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n\n# Query and save applicable standards\necho \"\ud83d\udccb Fetching applicable standards...\"\nmcp-standards query --context .mcp-context.json --format markdown &gt; PROJECT_STANDARDS.md\n\n# Create project config\ncat &gt; .mcp-standards.yaml &lt;&lt; EOF\n# MCP Standards Configuration for $PROJECT_NAME\nproject:\n  name: $PROJECT_NAME\n  type: $PROJECT_TYPE\n\nvalidation:\n  on_save: true\n  severity: error\n\nsync:\n  auto_sync: true\nEOF\n\n# Set up pre-commit hooks\ncat &gt; .pre-commit-config.yaml &lt;&lt; EOF\nrepos:\n  - repo: local\n    hooks:\n      - id: mcp-standards\n        name: MCP Standards Check\n        entry: mcp-standards validate\n        language: system\n        files: '\\.(js|jsx|ts|tsx|py)$'\n        pass_filenames: true\nEOF\n\necho \"\u2705 Project setup complete!\"\necho \"\ud83d\udcc4 See PROJECT_STANDARDS.md for applicable standards\"\n</code></pre>"},{"location":"cli/examples/#cicd-integration-script","title":"CI/CD Integration Script","text":"<pre><code>#!/bin/bash\n# ci-validate.sh - Validation script for CI/CD\n\nset -e  # Exit on error\n\n# Configuration\nSEVERITY=${MCP_SEVERITY:-error}\nFORMAT=${MCP_FORMAT:-json}\nOUTPUT_FILE=\"validation-results.$FORMAT\"\n\necho \"\ud83d\udd0d MCP Standards Validation\"\necho \"==========================\"\n\n# Ensure standards are synced\necho \"\ud83d\udcda Syncing standards...\"\nmcp-standards sync\n\n# Run validation\necho \"\u2705 Validating code...\"\nif mcp-standards validate . \\\n    --severity \"$SEVERITY\" \\\n    --format \"$FORMAT\" \\\n    --output \"$OUTPUT_FILE\"; then\n    echo \"\u2728 Validation passed!\"\n    EXIT_CODE=0\nelse\n    echo \"\u274c Validation failed!\"\n    EXIT_CODE=1\nfi\n\n# Generate report\necho \"\ud83d\udcca Generating report...\"\nmcp-standards report \\\n    --input \"$OUTPUT_FILE\" \\\n    --format html \\\n    --output standards-report.html\n\n# Show summary\necho \"\"\necho \"Summary:\"\necho \"--------\"\nmcp-standards report \\\n    --input \"$OUTPUT_FILE\" \\\n    --format summary\n\nexit $EXIT_CODE\n</code></pre>"},{"location":"cli/examples/#batch-processing-script","title":"Batch Processing Script","text":"<pre><code>#!/bin/bash\n# batch-validate.sh - Validate multiple projects\n\nPROJECTS_DIR=${1:-./projects}\nREPORT_DIR=${2:-./reports}\n\nmkdir -p \"$REPORT_DIR\"\n\necho \"\ud83d\udd04 Batch validation of projects in $PROJECTS_DIR\"\necho \"Reports will be saved to $REPORT_DIR\"\necho \"\"\n\n# Find all projects with .mcp-standards.yaml\nfind \"$PROJECTS_DIR\" -name \".mcp-standards.yaml\" -type f | while read -r config_file; do\n    PROJECT_DIR=$(dirname \"$config_file\")\n    PROJECT_NAME=$(basename \"$PROJECT_DIR\")\n\n    echo \"\ud83d\udcc1 Processing: $PROJECT_NAME\"\n\n    # Run validation\n    if mcp-standards -c \"$config_file\" validate \"$PROJECT_DIR\" \\\n        --format json \\\n        --output \"$REPORT_DIR/$PROJECT_NAME.json\" 2&gt;/dev/null; then\n        echo \"  \u2705 Passed\"\n    else\n        echo \"  \u274c Failed\"\n    fi\ndone\n\n# Generate summary report\necho \"\"\necho \"\ud83d\udcca Generating summary report...\"\nmcp-standards report \\\n    --merge \"$REPORT_DIR\"/*.json \\\n    --format html \\\n    --output \"$REPORT_DIR/summary.html\"\n\necho \"\u2728 Batch validation complete!\"\necho \"\ud83d\udcc4 View summary: $REPORT_DIR/summary.html\"\n</code></pre>"},{"location":"cli/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"cli/examples/#git-hooks","title":"Git Hooks","text":"<pre><code># .git/hooks/pre-commit\n#!/bin/bash\n# Validate before commit\n\n# Only validate if MCP standards is installed\nif ! command -v mcp-standards &amp;&gt; /dev/null; then\n    echo \"Warning: mcp-standards not installed, skipping validation\"\n    exit 0\nfi\n\n# Get changed files\nCHANGED=$(git diff --cached --name-only --diff-filter=ACM)\n\nif [ -n \"$CHANGED\" ]; then\n    echo \"$CHANGED\" | xargs mcp-standards validate --fail-on error\nfi\n</code></pre>"},{"location":"cli/examples/#vs-code-tasks","title":"VS Code Tasks","text":"<pre><code>// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Validate Current File\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards validate ${file}\",\n      \"problemMatcher\": \"$tsc\",\n      \"presentation\": {\n        \"reveal\": \"silent\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    },\n    {\n      \"label\": \"Fix Current File\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards validate --fix ${file}\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"focus\": false\n      }\n    },\n    {\n      \"label\": \"Query Standards\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards query --context .mcp-context.json --format markdown\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"cli/examples/#shell-aliases","title":"Shell Aliases","text":"<pre><code># Add to ~/.bashrc or ~/.zshrc\n\n# Quick validation\nalias mcpv='mcp-standards validate'\nalias mcpvf='mcp-standards validate --fix'\n\n# Query shortcuts\nalias mcpq='mcp-standards query'\nalias mcpqa='mcp-standards query --project-type api'\nalias mcpqw='mcp-standards query --project-type web-application'\n\n# Status and sync\nalias mcps='mcp-standards status'\nalias mcpsync='mcp-standards sync'\n\n# Function for validating specific file types\nmcpvalidate() {\n    local file_type=\"${1:-js}\"\n    find . -name \"*.$file_type\" -type f | xargs mcp-standards validate\n}\n\n# Function for quick project analysis\nmcpanalyze() {\n    echo \"\ud83d\udd0d Analyzing project...\"\n    mcp-standards query --context . --format json | jq -r '.results[] | \"- \\(.title): \\(.summary)\"'\n}\n</code></pre>"},{"location":"cli/examples/#docker-integration","title":"Docker Integration","text":"<pre><code># Dockerfile with MCP validation\nFROM node:18 AS validator\n\n# Install MCP Standards\nRUN pip install mcp-standards-server\n\n# Copy source code\nCOPY . /app\nWORKDIR /app\n\n# Validate during build\nRUN mcp-standards validate . --fail-on error\n\n# Continue with regular build...\nFROM node:18-slim\nCOPY --from=validator /app /app\nWORKDIR /app\nRUN npm ci --only=production\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"cli/examples/#makefile-integration","title":"Makefile Integration","text":"<pre><code># Makefile with MCP standards\n\n.PHONY: validate fix sync standards help\n\nvalidate: ## Validate code against standards\n    @echo \"\ud83d\udd0d Validating code...\"\n    @mcp-standards validate src/ --fail-on error\n\nfix: ## Auto-fix standards violations\n    @echo \"\ud83d\udd27 Fixing violations...\"\n    @mcp-standards validate src/ --fix\n\nsync: ## Sync latest standards\n    @echo \"\ud83d\udce5 Syncing standards...\"\n    @mcp-standards sync\n\nstandards: ## Show applicable standards\n    @echo \"\ud83d\udccb Applicable standards:\"\n    @mcp-standards query --context .mcp-context.json --format summary\n\ncheck: validate ## Run all checks\n\nhelp: ## Show this help\n    @grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.DEFAULT_GOAL := help\n</code></pre>"},{"location":"cli/examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"cli/examples/#custom-validation-pipeline","title":"Custom Validation Pipeline","text":"<pre><code>#!/usr/bin/env python3\n# validate_pipeline.py - Custom validation pipeline\n\nimport subprocess\nimport json\nimport sys\nfrom pathlib import Path\n\ndef run_validation(path, standards=None):\n    \"\"\"Run MCP validation with specific standards.\"\"\"\n    cmd = [\"mcp-standards\", \"validate\", str(path), \"--format\", \"json\"]\n\n    if standards:\n        cmd.extend([\"--standards\", \",\".join(standards)])\n\n    result = subprocess.run(cmd, capture_output=True, text=True)\n    return json.loads(result.stdout) if result.stdout else {}\n\ndef main():\n    # Define validation stages\n    stages = [\n        {\n            \"name\": \"Security\",\n            \"standards\": [\"security-*\", \"auth-*\"],\n            \"severity\": \"error\"\n        },\n        {\n            \"name\": \"Performance\",\n            \"standards\": [\"performance-*\", \"optimization-*\"],\n            \"severity\": \"warning\"\n        },\n        {\n            \"name\": \"Accessibility\",\n            \"standards\": [\"wcag-*\", \"a11y-*\"],\n            \"severity\": \"error\"\n        }\n    ]\n\n    all_passed = True\n\n    for stage in stages:\n        print(f\"\\n\ud83d\udd0d Running {stage['name']} validation...\")\n        result = run_validation(\".\", stage['standards'])\n\n        issues = result.get('issues', [])\n        errors = [i for i in issues if i['severity'] == 'error']\n\n        if errors and stage['severity'] == 'error':\n            print(f\"\u274c {stage['name']}: {len(errors)} errors found\")\n            all_passed = False\n        else:\n            print(f\"\u2705 {stage['name']}: Passed\")\n\n    sys.exit(0 if all_passed else 1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"cli/examples/#monitoring-script","title":"Monitoring Script","text":"<pre><code>#!/bin/bash\n# monitor-standards.sh - Monitor standards compliance over time\n\nMETRICS_FILE=\"standards-metrics.csv\"\nTIMESTAMP=$(date +%s)\n\n# Run validation and extract metrics\nRESULT=$(mcp-standards validate . --format json)\nTOTAL_FILES=$(echo \"$RESULT\" | jq '.summary.files_scanned')\nERRORS=$(echo \"$RESULT\" | jq '.summary.errors')\nWARNINGS=$(echo \"$RESULT\" | jq '.summary.warnings')\n\n# Append to metrics file\necho \"$TIMESTAMP,$TOTAL_FILES,$ERRORS,$WARNINGS\" &gt;&gt; \"$METRICS_FILE\"\n\n# Generate trend report if enough data\nif [ $(wc -l &lt; \"$METRICS_FILE\") -gt 10 ]; then\n    echo \"\ud83d\udcca Compliance Trend (last 10 checks):\"\n    tail -10 \"$METRICS_FILE\" | awk -F, '\n        BEGIN { print \"Errors | Warnings\" }\n        { printf \"%6d | %8d\\n\", $3, $4 }\n    '\nfi\n\n# Alert if errors increase\nif [ -f \".last_error_count\" ]; then\n    LAST_ERRORS=$(cat .last_error_count)\n    if [ \"$ERRORS\" -gt \"$LAST_ERRORS\" ]; then\n        echo \"\u26a0\ufe0f  Error count increased from $LAST_ERRORS to $ERRORS\"\n    fi\nfi\necho \"$ERRORS\" &gt; .last_error_count\n</code></pre>"},{"location":"cli/examples/#tips-and-tricks","title":"Tips and Tricks","text":"<ol> <li>Use JSON output for scripting and automation</li> <li>Cache standards to avoid repeated downloads</li> <li>Create project-specific configs for consistent validation</li> <li>Integrate with existing tools using format converters</li> <li>Monitor trends to track improvement over time</li> <li>Automate fixes where possible to save time</li> <li>Document exceptions when overriding standards</li> </ol>"},{"location":"cli/tutorials/cicd-integration/","title":"CI/CD Integration Guide","text":"<p>This guide covers how to integrate MCP Standards Server into your continuous integration and deployment pipelines.</p>"},{"location":"cli/tutorials/cicd-integration/#table-of-contents","title":"Table of Contents","text":"<ol> <li>GitHub Actions</li> <li>GitLab CI/CD</li> <li>Jenkins</li> <li>CircleCI</li> <li>Azure DevOps</li> <li>Bitbucket Pipelines</li> <li>Docker-based CI</li> <li>Performance Optimization</li> <li>Reporting and Notifications</li> </ol>"},{"location":"cli/tutorials/cicd-integration/#github-actions","title":"GitHub Actions","text":""},{"location":"cli/tutorials/cicd-integration/#basic-workflow","title":"Basic Workflow","text":"<pre><code># .github/workflows/mcp-standards.yml\nname: MCP Standards Validation\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Cache MCP Standards\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/mcp-standards\n            ~/.cache/pip\n          key: ${{ runner.os }}-mcp-${{ hashFiles('.mcp-standards.yaml') }}-${{ hashFiles('**/requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-mcp-${{ hashFiles('.mcp-standards.yaml') }}-\n            ${{ runner.os }}-mcp-\n\n      - name: Install MCP Standards Server\n        run: |\n          python -m pip install --upgrade pip\n          pip install mcp-standards-server\n          mcp-standards --version\n\n      - name: Sync Standards\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          export MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=$GITHUB_TOKEN\n          mcp-standards sync\n\n      - name: Validate Code\n        run: |\n          mcp-standards validate . \\\n            --format sarif \\\n            --output results.sarif \\\n            --fail-on error\n\n      - name: Upload SARIF results\n        uses: github/codeql-action/upload-sarif@v2\n        if: always()\n        with:\n          sarif_file: results.sarif\n\n      - name: Comment PR\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const fs = require('fs');\n            const { execSync } = require('child_process');\n\n            // Generate markdown report\n            execSync('mcp-standards report --format markdown &gt; report.md');\n            const report = fs.readFileSync('report.md', 'utf8');\n\n            // Find or create comment\n            const { data: comments } = await github.rest.issues.listComments({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n            });\n\n            const botComment = comments.find(comment =&gt; \n              comment.body.includes('MCP Standards Validation Report'));\n\n            const body = `## \ud83d\udd0d MCP Standards Validation Report\\n\\n${report}`;\n\n            if (botComment) {\n              await github.rest.issues.updateComment({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                comment_id: botComment.id,\n                body\n              });\n            } else {\n              await github.rest.issues.createComment({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: context.issue.number,\n                body\n              });\n            }\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#matrix-strategy-for-multiple-environments","title":"Matrix Strategy for Multiple Environments","text":"<pre><code>name: Multi-Environment Validation\n\non: [push, pull_request]\n\njobs:\n  validate:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.8', '3.9', '3.10', '3.11']\n        node-version: ['16.x', '18.x', '20.x']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install dependencies\n        run: |\n          pip install mcp-standards-server\n          npm ci\n\n      - name: Run validation\n        run: |\n          mcp-standards validate . --fail-on warning\n\n      - name: Upload results\n        uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: validation-results-${{ matrix.os }}-py${{ matrix.python-version }}-node${{ matrix.node-version }}\n          path: |\n            validation-report.*\n            **/*.log\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#reusable-workflow","title":"Reusable Workflow","text":"<pre><code># .github/workflows/mcp-standards-reusable.yml\nname: MCP Standards Check\n\non:\n  workflow_call:\n    inputs:\n      severity:\n        required: false\n        type: string\n        default: 'error'\n      config-file:\n        required: false\n        type: string\n        default: '.mcp-standards.yaml'\n    secrets:\n      github-token:\n        required: true\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: MCP Standards Validation\n        uses: williamzujkowski/mcp-standards-action@v1\n        with:\n          severity: ${{ inputs.severity }}\n          config-file: ${{ inputs.config-file }}\n          github-token: ${{ secrets.github-token }}\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#gitlab-cicd","title":"GitLab CI/CD","text":""},{"location":"cli/tutorials/cicd-integration/#basic-pipeline","title":"Basic Pipeline","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - prepare\n  - validate\n  - report\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  MCP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/mcp-standards\"\n\ncache:\n  key: \"$CI_JOB_NAME-$CI_COMMIT_REF_SLUG\"\n  paths:\n    - .cache/pip\n    - .cache/mcp-standards\n\nbefore_script:\n  - python -m pip install --upgrade pip\n  - pip install mcp-standards-server\n  - export MCP_STANDARDS_CACHE_DIRECTORY=$MCP_CACHE_DIR\n\nsync-standards:\n  stage: prepare\n  script:\n    - mcp-standards sync\n  artifacts:\n    paths:\n      - .cache/mcp-standards\n    expire_in: 1 week\n\nvalidate-code:\n  stage: validate\n  dependencies:\n    - sync-standards\n  script:\n    - mcp-standards validate . --format junit --output standards-report.xml\n  artifacts:\n    reports:\n      junit: standards-report.xml\n    paths:\n      - standards-report.xml\n      - validation-details.json\n    when: always\n    expire_in: 1 month\n\ngenerate-report:\n  stage: report\n  dependencies:\n    - validate-code\n  script:\n    - mcp-standards report --input validation-details.json --format html --output standards-report.html\n  artifacts:\n    paths:\n      - standards-report.html\n    expose_as: 'Standards Compliance Report'\n    expire_in: 1 month\n  only:\n    - merge_requests\n    - main\n\n# Merge request pipeline\nvalidate-mr:\n  stage: validate\n  script:\n    - |\n      # Get changed files\n      CHANGED_FILES=$(git diff --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME...HEAD)\n\n      # Validate only changed files\n      echo \"$CHANGED_FILES\" | xargs mcp-standards validate --format gitlab --output mr-report.json\n\n      # Post comment to MR\n      curl --request POST \\\n        --header \"PRIVATE-TOKEN: $CI_JOB_TOKEN\" \\\n        --data-urlencode \"body@mr-report.json\" \\\n        \"$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes\"\n  only:\n    - merge_requests\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#gitlab-templates","title":"GitLab Templates","text":"<pre><code># .gitlab/ci/mcp-standards.yml\n.mcp-standards:\n  image: python:3.11-slim\n  before_script:\n    - apt-get update &amp;&amp; apt-get install -y git curl\n    - pip install mcp-standards-server\n    - mcp-standards sync\n  cache:\n    key: mcp-standards-$CI_COMMIT_REF_SLUG\n    paths:\n      - .cache/mcp-standards\n      - .cache/pip\n\ninclude:\n  - local: '.gitlab/ci/mcp-standards.yml'\n\nvalidate:\n  extends: .mcp-standards\n  script:\n    - mcp-standards validate src/ --fail-on error\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#jenkins","title":"Jenkins","text":""},{"location":"cli/tutorials/cicd-integration/#declarative-pipeline","title":"Declarative Pipeline","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent {\n        docker {\n            image 'python:3.11-slim'\n            args '-v $HOME/.cache:/root/.cache'\n        }\n    }\n\n    environment {\n        MCP_STANDARDS_REPOSITORY_AUTH_TOKEN = credentials('github-token')\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh '''\n                    pip install mcp-standards-server\n                    mcp-standards --version\n                '''\n            }\n        }\n\n        stage('Sync Standards') {\n            steps {\n                sh 'mcp-standards sync'\n            }\n        }\n\n        stage('Validate') {\n            steps {\n                script {\n                    def validation = sh(\n                        script: 'mcp-standards validate . --format json --output validation.json',\n                        returnStatus: true\n                    )\n\n                    if (validation != 0) {\n                        unstable('Standards validation found issues')\n                    }\n                }\n            }\n            post {\n                always {\n                    recordIssues(\n                        enabledForFailure: true,\n                        tool: groovyScript(\n                            parserId: 'mcp-standards',\n                            pattern: 'validation.json'\n                        )\n                    )\n                }\n            }\n        }\n\n        stage('Generate Report') {\n            steps {\n                sh 'mcp-standards report --format html --output standards-report.html'\n                publishHTML([\n                    allowMissing: false,\n                    alwaysLinkToLastBuild: true,\n                    keepAll: true,\n                    reportDir: '.',\n                    reportFiles: 'standards-report.html',\n                    reportName: 'Standards Compliance Report'\n                ])\n            }\n        }\n    }\n\n    post {\n        always {\n            archiveArtifacts artifacts: 'validation.json,standards-report.html', \n                             allowEmptyArchive: true\n        }\n        failure {\n            emailext (\n                subject: \"Standards Validation Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: '''${SCRIPT, template=\"mcp-standards-email.template\"}''',\n                to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#shared-library","title":"Shared Library","text":"<pre><code>// vars/mcpStandardsValidation.groovy\ndef call(Map config = [:]) {\n    def severity = config.severity ?: 'error'\n    def path = config.path ?: '.'\n    def format = config.format ?: 'json'\n\n    pipeline {\n        agent any\n        stages {\n            stage('MCP Standards Validation') {\n                steps {\n                    script {\n                        docker.image('python:3.11-slim').inside {\n                            sh \"\"\"\n                                pip install mcp-standards-server\n                                mcp-standards sync\n                                mcp-standards validate ${path} \\\n                                    --severity ${severity} \\\n                                    --format ${format} \\\n                                    --output validation-results.${format}\n                            \"\"\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#circleci","title":"CircleCI","text":""},{"location":"cli/tutorials/cicd-integration/#configuration","title":"Configuration","text":"<pre><code># .circleci/config.yml\nversion: 2.1\n\norbs:\n  python: circleci/python@2.1.1\n\nexecutors:\n  mcp-standards:\n    docker:\n      - image: cimg/python:3.11\n    resource_class: medium\n\ncommands:\n  install-mcp:\n    steps:\n      - python/install-packages:\n          pkg-manager: pip\n          packages: mcp-standards-server\n\n  sync-standards:\n    steps:\n      - restore_cache:\n          keys:\n            - v1-mcp-standards-{{ checksum \".mcp-standards.yaml\" }}\n            - v1-mcp-standards-\n      - run:\n          name: Sync Standards\n          command: mcp-standards sync\n      - save_cache:\n          key: v1-mcp-standards-{{ checksum \".mcp-standards.yaml\" }}\n          paths:\n            - ~/.cache/mcp-standards\n\njobs:\n  validate:\n    executor: mcp-standards\n    steps:\n      - checkout\n      - install-mcp\n      - sync-standards\n      - run:\n          name: Validate Code\n          command: |\n            mcp-standards validate . \\\n              --format junit \\\n              --output test-results/mcp-standards.xml\n      - store_test_results:\n          path: test-results\n      - store_artifacts:\n          path: test-results\n\n  report:\n    executor: mcp-standards\n    steps:\n      - checkout\n      - install-mcp\n      - sync-standards\n      - run:\n          name: Generate Compliance Report\n          command: |\n            mcp-standards validate . --format json --output validation.json\n            mcp-standards report --input validation.json --format html --output report.html\n      - store_artifacts:\n          path: report.html\n          destination: compliance-report\n\nworkflows:\n  version: 2\n  standards-check:\n    jobs:\n      - validate\n      - report:\n          requires:\n            - validate\n          filters:\n            branches:\n              only:\n                - main\n                - develop\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#orb-definition","title":"Orb Definition","text":"<pre><code># mcp-standards-orb.yml\nversion: 2.1\n\ndescription: MCP Standards validation orb\n\nexecutors:\n  default:\n    docker:\n      - image: cimg/python:3.11\n\ncommands:\n  validate:\n    parameters:\n      path:\n        type: string\n        default: \".\"\n      severity:\n        type: enum\n        enum: [\"error\", \"warning\", \"info\"]\n        default: \"error\"\n    steps:\n      - run:\n          name: Install MCP Standards\n          command: pip install mcp-standards-server\n      - run:\n          name: Sync Standards\n          command: mcp-standards sync\n      - run:\n          name: Validate\n          command: |\n            mcp-standards validate &lt;&lt; parameters.path &gt;&gt; \\\n              --fail-on &lt;&lt; parameters.severity &gt;&gt; \\\n              --format junit \\\n              --output $CIRCLE_TEST_REPORTS/mcp-standards.xml\n\njobs:\n  validate:\n    executor: default\n    parameters:\n      path:\n        type: string\n        default: \".\"\n    steps:\n      - checkout\n      - validate:\n          path: &lt;&lt; parameters.path &gt;&gt;\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#azure-devops","title":"Azure DevOps","text":""},{"location":"cli/tutorials/cicd-integration/#azure-pipeline","title":"Azure Pipeline","text":"<pre><code># azure-pipelines.yml\ntrigger:\n  branches:\n    include:\n      - main\n      - develop\n  paths:\n    exclude:\n      - docs/*\n      - README.md\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  pythonVersion: '3.11'\n  mcpCacheDir: $(Pipeline.Workspace)/.mcp-standards\n\nstages:\n  - stage: Validate\n    displayName: 'Standards Validation'\n    jobs:\n      - job: ValidateCode\n        displayName: 'Validate Code Standards'\n        steps:\n          - task: UsePythonVersion@0\n            inputs:\n              versionSpec: '$(pythonVersion)'\n            displayName: 'Use Python $(pythonVersion)'\n\n          - task: Cache@2\n            inputs:\n              key: 'mcp | \"$(Agent.OS)\" | .mcp-standards.yaml'\n              restoreKeys: |\n                mcp | \"$(Agent.OS)\"\n              path: $(mcpCacheDir)\n            displayName: 'Cache MCP Standards'\n\n          - script: |\n              python -m pip install --upgrade pip\n              pip install mcp-standards-server\n              echo \"##vso[task.setvariable variable=MCP_STANDARDS_CACHE_DIRECTORY]$(mcpCacheDir)\"\n            displayName: 'Install MCP Standards'\n\n          - script: |\n              mcp-standards sync\n            displayName: 'Sync Standards'\n            env:\n              MCP_STANDARDS_REPOSITORY_AUTH_TOKEN: $(System.AccessToken)\n\n          - script: |\n              mcp-standards validate . \\\n                --format azurepipelines \\\n                --output $(Agent.TempDirectory)/validation-results.json\n            displayName: 'Validate Code'\n            continueOnError: true\n\n          - task: PublishTestResults@2\n            inputs:\n              testResultsFormat: 'JUnit'\n              testResultsFiles: '$(Agent.TempDirectory)/**/validation-*.xml'\n              testRunTitle: 'MCP Standards Validation'\n            condition: always()\n\n          - task: PublishCodeQualityResults@1\n            inputs:\n              summaryFileLocation: '$(Agent.TempDirectory)/validation-results.json'\n              baselineFile: '$(Build.SourcesDirectory)/.mcp-baseline.json'\n            condition: always()\n\n  - stage: Report\n    displayName: 'Generate Reports'\n    dependsOn: Validate\n    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n    jobs:\n      - job: GenerateReport\n        displayName: 'Generate Compliance Report'\n        steps:\n          - script: |\n              mcp-standards report \\\n                --type compliance \\\n                --format html \\\n                --output $(Build.ArtifactStagingDirectory)/compliance-report.html\n            displayName: 'Generate Report'\n\n          - task: PublishBuildArtifacts@1\n            inputs:\n              pathToPublish: '$(Build.ArtifactStagingDirectory)'\n              artifactName: 'compliance-reports'\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#task-group","title":"Task Group","text":"<pre><code># mcp-standards-task-group.yml\nsteps:\n  - task: UsePythonVersion@0\n    inputs:\n      versionSpec: '3.11'\n    displayName: 'Setup Python'\n\n  - task: PythonScript@0\n    inputs:\n      scriptSource: 'inline'\n      script: |\n        import subprocess\n        import json\n        import sys\n\n        # Install MCP Standards\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'mcp-standards-server'])\n\n        # Sync standards\n        subprocess.check_call(['mcp-standards', 'sync'])\n\n        # Run validation\n        result = subprocess.run(\n            ['mcp-standards', 'validate', '.', '--format', 'json'],\n            capture_output=True,\n            text=True\n        )\n\n        # Parse results\n        if result.returncode != 0:\n            issues = json.loads(result.stdout)\n            for issue in issues['issues']:\n                print(f\"##vso[task.logissue type={issue['severity']};sourcepath={issue['file']};\"\n                      f\"linenumber={issue['line']};columnnumber={issue['column']}]{issue['message']}\")\n\n            if any(i['severity'] == 'error' for i in issues['issues']):\n                sys.exit(1)\n    displayName: 'MCP Standards Validation'\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#bitbucket-pipelines","title":"Bitbucket Pipelines","text":""},{"location":"cli/tutorials/cicd-integration/#configuration_1","title":"Configuration","text":"<pre><code># bitbucket-pipelines.yml\nimage: python:3.11-slim\n\ndefinitions:\n  caches:\n    mcp-standards: ~/.cache/mcp-standards\n    pip: ~/.cache/pip\n\n  steps:\n    - step: &amp;install-mcp\n        name: Install MCP Standards\n        caches:\n          - pip\n        script:\n          - pip install mcp-standards-server\n          - mcp-standards --version\n\n    - step: &amp;sync-standards\n        name: Sync Standards\n        caches:\n          - mcp-standards\n        script:\n          - export MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=$GITHUB_TOKEN\n          - mcp-standards sync\n\n    - step: &amp;validate-code\n        name: Validate Code\n        script:\n          - mcp-standards validate . --format junit --output test-results/mcp-standards.xml\n        after-script:\n          - pipe: atlassian/checkstyle-report:0.3.0\n            variables:\n              REPORT_FILE: test-results/mcp-standards.xml\n\npipelines:\n  default:\n    - step: *install-mcp\n    - step: *sync-standards\n    - step: *validate-code\n\n  pull-requests:\n    '**':\n      - step: *install-mcp\n      - step: *sync-standards\n      - step:\n          name: Validate PR\n          script:\n            # Get changed files\n            - git diff --name-only origin/$BITBUCKET_PR_DESTINATION_BRANCH...HEAD &gt; changed_files.txt\n\n            # Validate only changed files\n            - cat changed_files.txt | xargs mcp-standards validate --format bitbucket\n\n            # Post comment to PR\n            - |\n              if [ -f validation-report.md ]; then\n                curl -X POST \\\n                  -H \"Authorization: Bearer $BITBUCKET_TOKEN\" \\\n                  -H \"Content-Type: application/json\" \\\n                  -d \"{\\\"content\\\": {\\\"raw\\\": \\\"$(cat validation-report.md | jq -Rs .)\\\"}}\" \\\n                  \"https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/pullrequests/$BITBUCKET_PR_ID/comments\"\n              fi\n\n  branches:\n    main:\n      - step: *install-mcp\n      - step: *sync-standards\n      - step: *validate-code\n      - step:\n          name: Generate Compliance Report\n          script:\n            - mcp-standards report --type compliance --format html --output compliance-report.html\n          artifacts:\n            - compliance-report.html\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#docker-based-ci","title":"Docker-based CI","text":""},{"location":"cli/tutorials/cicd-integration/#dockerfile-for-ci","title":"Dockerfile for CI","text":"<pre><code># Dockerfile.ci\nFROM python:3.11-slim as base\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install MCP Standards\nRUN pip install --no-cache-dir mcp-standards-server\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; \\\n    mkdir -p /home/mcp/.cache/mcp-standards &amp;&amp; \\\n    chown -R mcp:mcp /home/mcp\n\nUSER mcp\nWORKDIR /workspace\n\n# Pre-cache standards (optional)\nARG GITHUB_TOKEN\nENV MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=$GITHUB_TOKEN\nRUN mcp-standards sync || true\n\n# Validation stage\nFROM base as validator\n\nCOPY --chown=mcp:mcp . /workspace\n\nRUN mcp-standards validate . --format json --output /tmp/validation.json || true\n\n# Report stage\nFROM base as reporter\n\nCOPY --from=validator /tmp/validation.json /tmp/validation.json\n\nRUN mcp-standards report \\\n    --input /tmp/validation.json \\\n    --format html \\\n    --output /workspace/report.html\n\n# Final stage\nFROM nginx:alpine as final\n\nCOPY --from=reporter /workspace/report.html /usr/share/nginx/html/index.html\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#docker-compose-for-ci","title":"Docker Compose for CI","text":"<pre><code># docker-compose.ci.yml\nversion: '3.8'\n\nservices:\n  validator:\n    build:\n      context: .\n      dockerfile: Dockerfile.ci\n      target: validator\n      args:\n        GITHUB_TOKEN: ${GITHUB_TOKEN}\n    volumes:\n      - ./validation-results:/tmp/results\n    command: |\n      sh -c \"\n        mcp-standards validate /workspace \\\n          --format json \\\n          --output /tmp/results/validation.json &amp;&amp;\n        mcp-standards report \\\n          --input /tmp/results/validation.json \\\n          --format junit \\\n          --output /tmp/results/junit.xml\n      \"\n\n  report-server:\n    build:\n      context: .\n      dockerfile: Dockerfile.ci\n      target: final\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - validator\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"cli/tutorials/cicd-integration/#caching-strategies","title":"Caching Strategies","text":"<pre><code># Optimized GitHub Actions with multiple cache layers\n- name: Cache MCP Standards\n  uses: actions/cache@v3\n  with:\n    path: |\n      ~/.cache/mcp-standards\n      ~/.cache/pip\n      ~/.local/share/mcp-standards\n    key: |\n      mcp-${{ runner.os }}-${{ hashFiles('.mcp-standards.yaml') }}-${{ hashFiles('**/*.py') }}-${{ hashFiles('**/*.js') }}\n    restore-keys: |\n      mcp-${{ runner.os }}-${{ hashFiles('.mcp-standards.yaml') }}-${{ hashFiles('**/*.py') }}-\n      mcp-${{ runner.os }}-${{ hashFiles('.mcp-standards.yaml') }}-\n      mcp-${{ runner.os }}-\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#parallel-validation","title":"Parallel Validation","text":"<pre><code>#!/bin/bash\n# parallel-validation.sh\n\n# Split files for parallel processing\nfind . -name \"*.py\" -o -name \"*.js\" | split -n l/4 - /tmp/files_\n\n# Run validation in parallel\nparallel -j 4 'cat {} | xargs mcp-standards validate --format json --output /tmp/results_{#}.json' ::: /tmp/files_*\n\n# Merge results\nmcp-standards report --merge /tmp/results_*.json --output final-report.json\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#incremental-validation","title":"Incremental Validation","text":"<pre><code># Only validate changed files in PR\n- name: Get changed files\n  id: changed-files\n  uses: tj-actions/changed-files@v46.0.1\n  with:\n    files: |\n      **/*.py\n      **/*.js\n      **/*.ts\n\n- name: Validate changed files\n  if: steps.changed-files.outputs.any_changed == 'true'\n  run: |\n    echo \"${{ steps.changed-files.outputs.all_changed_files }}\" | \\\n    xargs mcp-standards validate --fail-on error\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#reporting-and-notifications","title":"Reporting and Notifications","text":""},{"location":"cli/tutorials/cicd-integration/#slack-notifications","title":"Slack Notifications","text":"<pre><code># GitHub Actions with Slack\n- name: Notify Slack\n  if: failure()\n  uses: 8398a7/action-slack@v3\n  with:\n    status: ${{ job.status }}\n    text: |\n      MCP Standards Validation Failed\n      Repository: ${{ github.repository }}\n      Branch: ${{ github.ref }}\n      Commit: ${{ github.sha }}\n\n      View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#email-reports","title":"Email Reports","text":"<pre><code>// Jenkins email template\nemailext (\n    subject: \"Standards Report: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n    body: '''\n        &lt;h2&gt;MCP Standards Validation Report&lt;/h2&gt;\n\n        &lt;h3&gt;Summary&lt;/h3&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Total Issues: ${ISSUES_COUNT}&lt;/li&gt;\n            &lt;li&gt;Errors: ${ERROR_COUNT}&lt;/li&gt;\n            &lt;li&gt;Warnings: ${WARNING_COUNT}&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;h3&gt;Details&lt;/h3&gt;\n        ${FILE, path=\"standards-report.html\"}\n\n        &lt;p&gt;View full report: &lt;a href=\"${BUILD_URL}\"&gt;Build #${BUILD_NUMBER}&lt;/a&gt;&lt;/p&gt;\n    ''',\n    mimeType: 'text/html',\n    to: '${DEFAULT_RECIPIENTS}',\n    attachmentsPattern: 'standards-report.*'\n)\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#dashboard-integration","title":"Dashboard Integration","text":"<pre><code># Grafana Dashboard metrics\n- name: Push metrics to Prometheus\n  if: always()\n  run: |\n    cat &lt;&lt;EOF | curl --data-binary @- http://prometheus-pushgateway:9091/metrics/job/mcp-standards/instance/${{ github.repository }}\n    # TYPE mcp_validation_errors gauge\n    mcp_validation_errors{repository=\"${{ github.repository }}\",branch=\"${{ github.ref }}\"} $(jq '.summary.errors' validation.json)\n    # TYPE mcp_validation_warnings gauge  \n    mcp_validation_warnings{repository=\"${{ github.repository }}\",branch=\"${{ github.ref }}\"} $(jq '.summary.warnings' validation.json)\n    # TYPE mcp_validation_duration_seconds gauge\n    mcp_validation_duration_seconds{repository=\"${{ github.repository }}\",branch=\"${{ github.ref }}\"} $(jq '.duration' validation.json)\n    EOF\n</code></pre>"},{"location":"cli/tutorials/cicd-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Cache Everything: Cache standards, dependencies, and validation results</li> <li>Fail Fast: Run quick validations first, comprehensive checks later</li> <li>Incremental Checks: Only validate changed files in PRs</li> <li>Parallel Processing: Split large codebases for parallel validation</li> <li>Clear Reporting: Generate actionable reports with specific fixes</li> <li>Baseline Comparison: Track improvement over time</li> <li>Integration with existing tools: Combine with ESLint, Pylint, etc.</li> </ol>"},{"location":"cli/tutorials/common-workflows/","title":"Common Workflows","text":"<p>This guide covers typical workflows and use cases for the MCP Standards Server.</p>"},{"location":"cli/tutorials/common-workflows/#table-of-contents","title":"Table of Contents","text":"<ol> <li>New Project Setup</li> <li>Daily Development Workflow</li> <li>Code Review Workflow</li> <li>CI/CD Integration</li> <li>Team Collaboration</li> <li>Migration Workflow</li> <li>Compliance Checking</li> </ol>"},{"location":"cli/tutorials/common-workflows/#new-project-setup","title":"New Project Setup","text":""},{"location":"cli/tutorials/common-workflows/#1-project-analysis-and-standards-selection","title":"1. Project Analysis and Standards Selection","text":"<p>When starting a new project, first analyze your requirements:</p> <pre><code># Create project context file\ncat &gt; .mcp-context.json &lt;&lt; 'EOF'\n{\n  \"project_type\": \"web-application\",\n  \"name\": \"E-commerce Platform\",\n  \"languages\": [\"typescript\", \"python\"],\n  \"frameworks\": [\"react\", \"nextjs\", \"fastapi\"],\n  \"infrastructure\": [\"docker\", \"kubernetes\", \"aws\"],\n  \"requirements\": {\n    \"accessibility\": \"wcag-2.2\",\n    \"security\": \"owasp-top-10\",\n    \"performance\": \"core-web-vitals\",\n    \"compliance\": [\"pci-dss\", \"gdpr\"]\n  },\n  \"team_size\": \"medium\",\n  \"timeline\": \"6-months\"\n}\nEOF\n\n# Query applicable standards\nmcp-standards query --context .mcp-context.json --detailed &gt; project-standards.md\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#2-generate-project-scaffold","title":"2. Generate Project Scaffold","text":"<p>Based on the standards, generate initial project structure:</p> <pre><code># Get scaffold templates\nmcp-standards generate --type scaffold --context .mcp-context.json\n\n# This creates:\n# - Project directory structure\n# - Configuration files\n# - CI/CD templates\n# - Documentation templates\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#3-configure-development-environment","title":"3. Configure Development Environment","text":"<p>Set up project-specific standards configuration:</p> <pre><code># Generate project config\nmcp-standards config --generate-project &gt; .mcp-standards.yaml\n\n# Edit to customize\nvim .mcp-standards.yaml\n</code></pre> <p>Example <code>.mcp-standards.yaml</code>: <pre><code># Project: E-commerce Platform\nproject:\n  name: ecommerce-platform\n  type: web-application\n\nstandards:\n  enforce:\n    - react-18-patterns\n    - typescript-strict\n    - fastapi-best-practices\n    - k8s-security\n    - wcag-2.2-accessibility\n\nvalidation:\n  pre_commit: true\n  ci_pipeline: true\n  severity: error\n\n  rules:\n    overrides:\n      # Project-specific overrides\n      max-line-length:\n        options:\n          limit: 120\n\n      import-order:\n        options:\n          groups: [\"builtin\", \"external\", \"internal\", \"parent\", \"sibling\"]\n</code></pre></p>"},{"location":"cli/tutorials/common-workflows/#4-set-up-git-hooks","title":"4. Set Up Git Hooks","text":"<p>Install pre-commit hooks:</p> <pre><code># Install pre-commit\npip install pre-commit\n\n# Create .pre-commit-config.yaml\ncat &gt; .pre-commit-config.yaml &lt;&lt; 'EOF'\nrepos:\n  - repo: local\n    hooks:\n      - id: mcp-standards-validate\n        name: MCP Standards Validation\n        entry: mcp-standards validate\n        language: system\n        files: \\.(js|jsx|ts|tsx|py)$\n        pass_filenames: true\n\n      - id: mcp-standards-sync-check\n        name: Standards Sync Check\n        entry: mcp-standards sync --check\n        language: system\n        pass_filenames: false\n        always_run: true\nEOF\n\n# Install hooks\npre-commit install\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#daily-development-workflow","title":"Daily Development Workflow","text":""},{"location":"cli/tutorials/common-workflows/#morning-routine","title":"Morning Routine","text":"<pre><code>#!/bin/bash\n# morning-setup.sh\n\necho \"\ud83c\udf05 Good morning! Setting up development environment...\"\n\n# 1. Update standards\necho \"\ud83d\udcda Checking for standards updates...\"\nif mcp-standards sync --check | grep -q \"outdated\"; then\n    echo \"\ud83d\udce5 Updating standards...\"\n    mcp-standards sync\nfi\n\n# 2. Check project status\necho \"\ud83d\udcca Project standards status:\"\nmcp-standards status --summary\n\n# 3. Validate workspace\necho \"\u2705 Validating workspace...\"\nmcp-standards validate . --severity error --quiet || echo \"\u26a0\ufe0f  Issues found!\"\n\n# 4. Start MCP server\necho \"\ud83d\ude80 Starting MCP server...\"\nmcp-standards serve --daemon\n\necho \"\u2728 Ready to code!\"\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#before-committing","title":"Before Committing","text":"<pre><code>#!/bin/bash\n# pre-commit-check.sh\n\n# 1. Validate changed files\nCHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)\n\nif [ -n \"$CHANGED_FILES\" ]; then\n    echo \"Validating changed files...\"\n    mcp-standards validate $CHANGED_FILES --fix\n\n    # Re-add fixed files\n    git add $CHANGED_FILES\nfi\n\n# 2. Run comprehensive check\nmcp-standards validate . --fail-on warning\n\n# 3. Generate compliance report\nmcp-standards report --type compliance --output compliance-report.json\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#feature-development","title":"Feature Development","text":"<p>When working on a new feature:</p> <pre><code># 1. Query relevant standards for the feature\nmcp-standards query --semantic \"implementing user authentication with OAuth2\" &gt; auth-standards.md\n\n# 2. Generate code templates\nmcp-standards generate --template oauth2-provider --framework fastapi\n\n# 3. Validate as you code\n# In another terminal, watch for changes\nwatch -n 5 'mcp-standards validate src/auth/ --format short'\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#code-review-workflow","title":"Code Review Workflow","text":""},{"location":"cli/tutorials/common-workflows/#for-reviewers","title":"For Reviewers","text":"<p>Create a code review checklist based on standards:</p> <pre><code>#!/bin/bash\n# review-pr.sh\n\nPR_NUMBER=$1\nREPO=\"owner/repo\"\n\n# 1. Fetch PR changes\ngh pr checkout $PR_NUMBER\n\n# 2. Run comprehensive validation\necho \"Running standards validation...\"\nmcp-standards validate . --format json &gt; validation-report.json\n\n# 3. Check for security issues\necho \"Security check...\"\nmcp-standards validate . --standards security-* --severity error\n\n# 4. Generate review comment\nif [ -s validation-report.json ]; then\n    echo \"## MCP Standards Review\" &gt; review-comment.md\n    echo \"\" &gt;&gt; review-comment.md\n    mcp-standards report --input validation-report.json --format markdown &gt;&gt; review-comment.md\n\n    # Post comment\n    gh pr comment $PR_NUMBER --body-file review-comment.md\nfi\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#for-pr-authors","title":"For PR Authors","text":"<p>Before requesting review:</p> <pre><code># Pre-review checklist\nmcp-standards checklist --type pr-ready\n\n# Output:\n# \u2705 All files validated\n# \u2705 No security vulnerabilities\n# \u2705 Accessibility standards met\n# \u2705 Performance budgets satisfied\n# \u2705 Documentation updated\n# \u26a0\ufe0f  Test coverage: 78% (target: 80%)\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"cli/tutorials/common-workflows/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/mcp-standards.yml\nname: MCP Standards Validation\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  push:\n    branches: [main, develop]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Cache MCP Standards\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/mcp-standards\n          key: ${{ runner.os }}-mcp-${{ hashFiles('.mcp-standards.yaml') }}\n\n      - name: Install MCP Standards\n        run: |\n          pip install mcp-standards-server\n          mcp-standards --version\n\n      - name: Sync Standards\n        env:\n          MCP_STANDARDS_REPOSITORY_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          mcp-standards sync\n\n      - name: Validate Code\n        id: validate\n        run: |\n          mcp-standards validate . \\\n            --format sarif \\\n            --output results.sarif \\\n            --fail-on error\n\n      - name: Upload SARIF\n        if: always()\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n\n      - name: Generate Report\n        if: always()\n        run: |\n          mcp-standards report \\\n            --type summary \\\n            --format markdown &gt; $GITHUB_STEP_SUMMARY\n\n      - name: Comment PR\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const fs = require('fs');\n            const report = fs.readFileSync('validation-summary.md', 'utf8');\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: report\n            });\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#gitlab-cicd","title":"GitLab CI/CD","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - report\n\nvariables:\n  MCP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/mcp-standards\"\n\nbefore_script:\n  - pip install mcp-standards-server\n  - mcp-standards sync\n\nstandards-validation:\n  stage: validate\n  script:\n    - mcp-standards validate . --format junit --output standards-report.xml\n  artifacts:\n    reports:\n      junit: standards-report.xml\n    paths:\n      - validation-report.json\n    expire_in: 1 week\n  cache:\n    key: \"$CI_COMMIT_REF_SLUG-mcp\"\n    paths:\n      - .cache/mcp-standards\n\ncompliance-report:\n  stage: report\n  dependencies:\n    - standards-validation\n  script:\n    - mcp-standards report --type compliance --output compliance.html\n  artifacts:\n    paths:\n      - compliance.html\n    expire_in: 30 days\n  only:\n    - main\n    - develop\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#team-collaboration","title":"Team Collaboration","text":""},{"location":"cli/tutorials/common-workflows/#shared-standards-configuration","title":"Shared Standards Configuration","text":"<p>Set up team-wide standards:</p> <pre><code># 1. Create shared configuration repository\ngit init team-standards\ncd team-standards\n\n# 2. Create team standards\ncat &gt; team-standards.yaml &lt;&lt; 'EOF'\n# Company-wide development standards\nteam:\n  name: \"ACME Corp Engineering\"\n\nstandards:\n  base:\n    - coding-best-practices\n    - security-baseline\n    - accessibility-wcag-2.2\n\n  by_language:\n    javascript:\n      - javascript-es2025\n      - typescript-strict\n    python:\n      - python-3.11\n      - type-hints-required\n\n  by_framework:\n    react:\n      - react-18-patterns\n      - react-performance\n    django:\n      - django-security\n      - django-rest-framework\n\nvalidation:\n  rules:\n    # Company-wide rules\n    no-console-log:\n      severity: error\n    secure-headers:\n      severity: error\n    accessibility-alt-text:\n      severity: error\nEOF\n\n# 3. Share with team\ngit add .\ngit commit -m \"Initial team standards\"\ngit remote add origin https://github.com/acme/team-standards\ngit push\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#team-member-setup","title":"Team Member Setup","text":"<pre><code># Clone team standards\ngit clone https://github.com/acme/team-standards ~/.config/mcp-standards/team\n\n# Link to team config\nmcp-standards config --set team.config_path ~/.config/mcp-standards/team/team-standards.yaml\n\n# Verify\nmcp-standards config --show | grep team\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#standards-updates-workflow","title":"Standards Updates Workflow","text":"<pre><code>#!/bin/bash\n# update-team-standards.sh\n\n# 1. Pull latest team standards\ncd ~/.config/mcp-standards/team\ngit pull\n\n# 2. Sync from upstream\nmcp-standards sync\n\n# 3. Notify team of changes\nCHANGES=$(git log --oneline HEAD~1..HEAD)\nif [ -n \"$CHANGES\" ]; then\n    echo \"Standards updated:\"\n    echo \"$CHANGES\"\n    # Send notification (Slack, email, etc.)\nfi\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#migration-workflow","title":"Migration Workflow","text":""},{"location":"cli/tutorials/common-workflows/#migrating-existing-project","title":"Migrating Existing Project","text":"<pre><code>#!/bin/bash\n# migrate-to-standards.sh\n\nPROJECT_PATH=$1\n\necho \"\ud83d\udd04 Migrating project to MCP Standards...\"\n\n# 1. Analyze existing project\ncd $PROJECT_PATH\necho \"\ud83d\udcca Analyzing project...\"\nmcp-standards analyze . &gt; analysis-report.json\n\n# 2. Generate migration plan\necho \"\ud83d\udccb Creating migration plan...\"\nmcp-standards migrate --plan \\\n  --input analysis-report.json \\\n  --output migration-plan.md\n\n# 3. Review plan\necho \"\ud83d\udc40 Review migration plan:\"\ncat migration-plan.md\n\nread -p \"Proceed with migration? (y/n) \" -n 1 -r\necho\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    exit 1\nfi\n\n# 4. Apply automated fixes\necho \"\ud83d\udd27 Applying automated fixes...\"\nmcp-standards migrate --apply \\\n  --plan migration-plan.md \\\n  --auto-fix\n\n# 5. Generate report\necho \"\ud83d\udcc4 Generating migration report...\"\nmcp-standards report --type migration \\\n  --before analysis-report.json \\\n  --output migration-report.html\n\necho \"\u2705 Migration complete! Review migration-report.html\"\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#gradual-migration-strategy","title":"Gradual Migration Strategy","text":"<p>For large codebases:</p> <pre><code># .mcp-migration.yaml\nmigration:\n  strategy: gradual\n  phases:\n    - name: \"Phase 1: Critical Security\"\n      duration: \"2 weeks\"\n      standards:\n        - security-vulnerabilities\n        - authentication-patterns\n      paths:\n        - src/auth/**\n        - src/api/**\n\n    - name: \"Phase 2: Core Business Logic\"\n      duration: \"1 month\"\n      standards:\n        - coding-best-practices\n        - error-handling\n        - logging-standards\n      paths:\n        - src/core/**\n        - src/services/**\n\n    - name: \"Phase 3: Frontend\"\n      duration: \"1 month\"\n      standards:\n        - react-18-patterns\n        - accessibility-wcag-2.2\n        - performance-optimization\n      paths:\n        - src/components/**\n        - src/pages/**\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#compliance-checking","title":"Compliance Checking","text":""},{"location":"cli/tutorials/common-workflows/#regular-compliance-audits","title":"Regular Compliance Audits","text":"<pre><code>#!/bin/bash\n# compliance-audit.sh\n\nDATE=$(date +%Y-%m-%d)\nREPORT_DIR=\"compliance-reports/$DATE\"\nmkdir -p $REPORT_DIR\n\necho \"\ud83d\udd0d Running compliance audit...\"\n\n# 1. Security compliance\nmcp-standards audit --type security \\\n  --standards \"owasp-*,security-*\" \\\n  --output \"$REPORT_DIR/security-audit.json\"\n\n# 2. Accessibility compliance  \nmcp-standards audit --type accessibility \\\n  --standards \"wcag-2.2-*\" \\\n  --output \"$REPORT_DIR/accessibility-audit.json\"\n\n# 3. Performance compliance\nmcp-standards audit --type performance \\\n  --standards \"performance-*,optimization-*\" \\\n  --output \"$REPORT_DIR/performance-audit.json\"\n\n# 4. Generate executive summary\nmcp-standards report --type compliance-summary \\\n  --input \"$REPORT_DIR/*.json\" \\\n  --format pdf \\\n  --output \"$REPORT_DIR/executive-summary.pdf\"\n\necho \"\u2705 Audit complete. Reports in $REPORT_DIR/\"\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#continuous-compliance-monitoring","title":"Continuous Compliance Monitoring","text":"<pre><code># docker-compose.yml for compliance dashboard\nversion: '3.8'\n\nservices:\n  mcp-monitor:\n    image: mcp-standards-monitor\n    environment:\n      - MCP_MODE=monitor\n      - CHECK_INTERVAL=3600\n      - ALERT_WEBHOOK=${SLACK_WEBHOOK}\n    volumes:\n      - ./src:/app/src:ro\n      - ./compliance-data:/data\n\n  compliance-dashboard:\n    image: mcp-compliance-dashboard\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - mcp-monitor\n    volumes:\n      - ./compliance-data:/data:ro\n</code></pre>"},{"location":"cli/tutorials/common-workflows/#best-practices","title":"Best Practices","text":"<ol> <li>Automate Everything: Use scripts and CI/CD for consistency</li> <li>Start Small: Begin with critical standards, expand gradually</li> <li>Team Buy-in: Involve team in standards selection</li> <li>Regular Updates: Keep standards current with industry best practices</li> <li>Measure Impact: Track metrics before/after standards adoption</li> <li>Customize Thoughtfully: Override only when necessary</li> <li>Document Decisions: Record why certain standards were chosen/modified</li> </ol>"},{"location":"cli/tutorials/getting-started/","title":"Getting Started with MCP Standards Server","text":"<p>This guide will help you get up and running with the MCP Standards Server in just a few minutes.</p>"},{"location":"cli/tutorials/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip or pipx package manager</li> <li>Git (for development installation)</li> <li>Internet connection for syncing standards</li> </ul>"},{"location":"cli/tutorials/getting-started/#installation","title":"Installation","text":""},{"location":"cli/tutorials/getting-started/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Using pipx for isolated installation:</p> <pre><code># Install pipx if you don't have it\npython -m pip install --user pipx\npython -m pipx ensurepath\n\n# Install MCP Standards Server\npipx install mcp-standards-server\n</code></pre>"},{"location":"cli/tutorials/getting-started/#standard-install","title":"Standard Install","text":"<p>Using pip:</p> <pre><code>pip install mcp-standards-server\n</code></pre>"},{"location":"cli/tutorials/getting-started/#development-install","title":"Development Install","text":"<p>From source:</p> <pre><code>git clone https://github.com/williamzujkowski/mcp-standards-server\ncd mcp-standards-server\npip install -e .\n</code></pre>"},{"location":"cli/tutorials/getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>mcp-standards --version\n</code></pre> <p>Expected output: <pre><code>MCP Standards Server v1.0.0\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"cli/tutorials/getting-started/#1-initialize-configuration","title":"1. Initialize Configuration","text":"<p>Run the interactive setup wizard:</p> <pre><code>mcp-standards config --init\n</code></pre> <p>You'll be prompted for: - Repository details (default: williamzujkowski/standards) - Cache location (default: ~/.cache/mcp-standards) - GitHub authentication (optional but recommended) - Search features (recommended: yes)</p> <p>Example session: <pre><code>Creating configuration file: /home/user/.config/mcp-standards/config.yaml\n\n? Repository owner: williamzujkowski\n? Repository name: standards\n? Branch: main\n? Path in repository: standards\n? Cache directory: (~/.cache/mcp-standards) \n? Configure GitHub authentication? Yes\n? Authentication type: token\n? GitHub personal access token: **********************\n? Enable semantic search? Yes\n\nConfiguration file created successfully!\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#2-sync-standards","title":"2. Sync Standards","text":"<p>Download standards from the repository:</p> <pre><code>mcp-standards sync\n</code></pre> <p>Expected output: <pre><code>Starting standards synchronization...\nFetching file list from williamzujkowski/standards...\nFiles to sync: 45\nDownloading: web-development-standards.yaml... [OK]\nDownloading: api-design-standards.yaml... [OK]\n...\nSync completed with status: success\nDuration: 15.23 seconds\nFiles synced: 45/45\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#3-verify-setup","title":"3. Verify Setup","text":"<p>Check that everything is working:</p> <pre><code>mcp-standards status\n</code></pre> <p>Expected output: <pre><code>MCP Standards Server - Sync Status\n\nTotal files cached: 45\nTotal cache size: 3.42 MB\n\nGitHub API Rate Limit:\n  Remaining: 4998/5000\n  Resets at: 2025-07-08 15:30:00\n\nRepository: williamzujkowski/standards\nBranch: main\nPath: standards\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#your-first-query","title":"Your First Query","text":""},{"location":"cli/tutorials/getting-started/#find-applicable-standards","title":"Find Applicable Standards","text":"<p>Let's find standards for a React project:</p> <pre><code>mcp-standards query --project-type web-application --framework react\n</code></pre> <p>Output: <pre><code>Applicable Standards Found: 7\n\n1. React 18 Patterns (react-18-patterns.yaml)\n   Tags: frontend, react, javascript, components\n   Priority: HIGH\n   Summary: Modern React patterns including hooks, Server Components\n\n2. JavaScript ES2025 Standards (javascript-es2025.yaml)\n   Tags: javascript, ecmascript, language\n   Priority: HIGH\n   Summary: Modern JavaScript language features and best practices\n\n3. Web Accessibility Standards (wcag-2.2-accessibility.yaml)\n   Tags: accessibility, a11y, web\n   Priority: MEDIUM\n   Summary: WCAG 2.2 compliance guidelines and ARIA patterns\n\nUse --detailed to see full content\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#get-detailed-standards","title":"Get Detailed Standards","text":"<p>View complete standard content:</p> <pre><code>mcp-standards query --project-type web-application --framework react --detailed | less\n</code></pre>"},{"location":"cli/tutorials/getting-started/#export-standards","title":"Export Standards","text":"<p>Save standards for your project:</p> <pre><code>mcp-standards query --project-type api --language python --format markdown &gt; project-standards.md\n</code></pre>"},{"location":"cli/tutorials/getting-started/#basic-validation","title":"Basic Validation","text":""},{"location":"cli/tutorials/getting-started/#validate-a-single-file","title":"Validate a Single File","text":"<pre><code># Create a sample file\ncat &gt; button.jsx &lt;&lt; 'EOF'\nconst Button = ({onClick}) =&gt; {\n  return &lt;button onClick={onClick}&gt;Click&lt;/button&gt;\n}\nexport default Button\nEOF\n\n# Validate it\nmcp-standards validate button.jsx\n</code></pre> <p>Output: <pre><code>Results:\n========\n\nbutton.jsx\n  Line 2: ERROR - Missing accessible label\n    Standard: wcag-2.2-accessibility\n    Rule: interactive-elements-labels\n\n    Fix: Add aria-label or visible text content\n\nSummary:\n  Files scanned: 1\n  Issues found: 1\n    Errors: 1\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#auto-fix-issues","title":"Auto-Fix Issues","text":"<pre><code>mcp-standards validate --fix button.jsx\n</code></pre>"},{"location":"cli/tutorials/getting-started/#start-the-mcp-server","title":"Start the MCP Server","text":""},{"location":"cli/tutorials/getting-started/#basic-server","title":"Basic Server","text":"<p>Start the server for tool integration:</p> <pre><code>mcp-standards serve\n</code></pre> <p>Output: <pre><code>Starting MCP Standards Server v1.0.0\n\u2713 Loaded 45 standards files\n\u2713 Server listening on http://localhost:3000\n\nAvailable MCP tools:\n  - get_applicable_standards\n  - validate_code\n  - search_standards\n  - get_standard_content\n</code></pre></p>"},{"location":"cli/tutorials/getting-started/#test-the-server","title":"Test the Server","text":"<p>In another terminal:</p> <pre><code># Check health\ncurl http://localhost:3000/health\n\n# Test MCP tool\ncurl -X POST http://localhost:3000/tools/search_standards \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"How to implement authentication?\"}'\n</code></pre>"},{"location":"cli/tutorials/getting-started/#ide-integration","title":"IDE Integration","text":""},{"location":"cli/tutorials/getting-started/#vs-code","title":"VS Code","text":"<ol> <li>Install the MCP Standards extension (when available)</li> <li>Or add to settings.json:</li> </ol> <pre><code>{\n  \"mcp-standards.server.url\": \"http://localhost:3000\",\n  \"mcp-standards.validation.onSave\": true\n}\n</code></pre>"},{"location":"cli/tutorials/getting-started/#command-line-integration","title":"Command Line Integration","text":"<p>Add to your shell profile:</p> <pre><code># ~/.bashrc or ~/.zshrc\n\n# Alias for quick queries\nalias mcp-query='mcp-standards query --format json | jq'\n\n# Function to validate current directory\nmcp-validate() {\n  mcp-standards validate ${1:-.} --fail-on error\n}\n\n# Auto-sync on shell start (optional)\nif command -v mcp-standards &amp;&gt; /dev/null; then\n  mcp-standards sync --check &gt; /dev/null 2&gt;&amp;1 || echo \"Standards outdated. Run 'mcp-standards sync'\"\nfi\n</code></pre>"},{"location":"cli/tutorials/getting-started/#next-steps","title":"Next Steps","text":""},{"location":"cli/tutorials/getting-started/#1-explore-commands","title":"1. Explore Commands","text":"<p>Learn about all available commands:</p> <pre><code>mcp-standards --help\nmcp-standards query --help\nmcp-standards validate --help\n</code></pre>"},{"location":"cli/tutorials/getting-started/#2-configure-for-your-project","title":"2. Configure for Your Project","text":"<p>Create a project-specific configuration:</p> <pre><code># In your project root\ncat &gt; .mcp-standards.yaml &lt;&lt; 'EOF'\n# Project-specific standards configuration\nvalidation:\n  include_patterns:\n    - \"src/**/*.js\"\n    - \"src/**/*.jsx\"\n  rules:\n    overrides:\n      max-line-length:\n        options:\n          limit: 120\nEOF\n</code></pre>"},{"location":"cli/tutorials/getting-started/#3-set-up-cicd","title":"3. Set Up CI/CD","text":"<p>Add to your GitHub Actions:</p> <pre><code># .github/workflows/standards.yml\nname: Standards Check\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install MCP Standards\n        run: pip install mcp-standards-server\n\n      - name: Sync Standards\n        run: mcp-standards sync\n\n      - name: Validate Code\n        run: mcp-standards validate . --fail-on error\n</code></pre>"},{"location":"cli/tutorials/getting-started/#4-explore-advanced-features","title":"4. Explore Advanced Features","text":"<ul> <li>Token Optimization</li> <li>Custom Validators</li> <li>MCP Tool Development</li> </ul>"},{"location":"cli/tutorials/getting-started/#common-tasks","title":"Common Tasks","text":""},{"location":"cli/tutorials/getting-started/#update-standards","title":"Update Standards","text":"<pre><code># Check for updates\nmcp-standards sync --check\n\n# Update if needed\nmcp-standards sync\n</code></pre>"},{"location":"cli/tutorials/getting-started/#clean-cache","title":"Clean Cache","text":"<pre><code># Remove outdated files\nmcp-standards cache --clear-outdated\n\n# Clear everything\nmcp-standards cache --clear\n</code></pre>"},{"location":"cli/tutorials/getting-started/#debug-issues","title":"Debug Issues","text":"<pre><code># Verbose output\nmcp-standards -v sync\n\n# Check configuration\nmcp-standards config --validate\n</code></pre>"},{"location":"cli/tutorials/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Run <code>mcp-standards &lt;command&gt; --help</code> for command help</li> <li>Check Troubleshooting Guide for common issues</li> <li>Visit GitHub Issues for support</li> </ul>"},{"location":"cli/tutorials/getting-started/#summary","title":"Summary","text":"<p>You've now: - \u2705 Installed MCP Standards Server - \u2705 Configured repository access - \u2705 Synced standards files - \u2705 Performed your first query - \u2705 Validated code against standards - \u2705 Started the MCP server</p> <p>Continue exploring the documentation to learn about advanced features and integrations!</p>"},{"location":"cli/tutorials/ide-integration/","title":"IDE Integration Guide","text":"<p>This guide covers how to integrate MCP Standards Server with popular IDEs and editors for real-time standards validation and assistance.</p>"},{"location":"cli/tutorials/ide-integration/#table-of-contents","title":"Table of Contents","text":"<ol> <li>VS Code</li> <li>JetBrains IDEs</li> <li>Neovim</li> <li>Sublime Text</li> <li>Emacs</li> <li>Generic LSP Integration</li> </ol>"},{"location":"cli/tutorials/ide-integration/#vs-code","title":"VS Code","text":""},{"location":"cli/tutorials/ide-integration/#method-1-official-extension-recommended","title":"Method 1: Official Extension (Recommended)","text":"<ol> <li> <p>Install Extension:    <pre><code>code --install-extension mcp-standards.vscode-mcp-standards\n</code></pre></p> </li> <li> <p>Configure Extension:    <pre><code>// .vscode/settings.json\n{\n  \"mcp-standards.server.mode\": \"local\",\n  \"mcp-standards.server.port\": 3000,\n  \"mcp-standards.validation.onSave\": true,\n  \"mcp-standards.validation.onType\": false,\n  \"mcp-standards.validation.delay\": 500,\n  \"mcp-standards.suggestions.enabled\": true,\n  \"mcp-standards.token.budget\": 4000,\n  \"mcp-standards.config.path\": \".mcp-standards.yaml\"\n}\n</code></pre></p> </li> <li> <p>Start Server:    The extension automatically starts the server, or manually:    <pre><code>mcp-standards serve --stdio\n</code></pre></p> </li> </ol>"},{"location":"cli/tutorials/ide-integration/#method-2-custom-tasks","title":"Method 2: Custom Tasks","text":"<p>Create custom tasks for standards operations:</p> <pre><code>// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"MCP: Validate Current File\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards\",\n      \"args\": [\n        \"validate\",\n        \"${file}\",\n        \"--format\", \"json\"\n      ],\n      \"problemMatcher\": {\n        \"owner\": \"mcp-standards\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": {\n          \"regexp\": \"^(.+):(\\\\d+):(\\\\d+):\\\\s+(error|warning|info)\\\\s+(.+)\\\\s+\\\\((.+)\\\\)$\",\n          \"file\": 1,\n          \"line\": 2,\n          \"column\": 3,\n          \"severity\": 4,\n          \"message\": 5,\n          \"code\": 6\n        }\n      },\n      \"presentation\": {\n        \"reveal\": \"never\",\n        \"panel\": \"dedicated\"\n      }\n    },\n    {\n      \"label\": \"MCP: Fix Current File\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards\",\n      \"args\": [\n        \"validate\",\n        \"${file}\",\n        \"--fix\"\n      ]\n    },\n    {\n      \"label\": \"MCP: Query Standards\",\n      \"type\": \"shell\",\n      \"command\": \"mcp-standards\",\n      \"args\": [\n        \"query\",\n        \"--semantic\",\n        \"${input:query}\"\n      ],\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"query\",\n      \"type\": \"promptString\",\n      \"description\": \"Enter your standards query\"\n    }\n  ]\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#method-3-code-actions-provider","title":"Method 3: Code Actions Provider","text":"<p>Create a custom code actions provider:</p> <pre><code>// extensions/mcp-standards/src/codeActions.ts\nimport * as vscode from 'vscode';\nimport { exec } from 'child_process';\n\nexport class MCPCodeActionProvider implements vscode.CodeActionProvider {\n  provideCodeActions(\n    document: vscode.TextDocument,\n    range: vscode.Range\n  ): vscode.CodeAction[] {\n    const actions: vscode.CodeAction[] = [];\n\n    // Quick fix action\n    const fixAction = new vscode.CodeAction(\n      'Fix with MCP Standards',\n      vscode.CodeActionKind.QuickFix\n    );\n    fixAction.command = {\n      command: 'mcp-standards.fix',\n      title: 'Fix with MCP Standards',\n      arguments: [document.uri, range]\n    };\n    actions.push(fixAction);\n\n    // Query standards action\n    const queryAction = new vscode.CodeAction(\n      'Query Applicable Standards',\n      vscode.CodeActionKind.Source\n    );\n    queryAction.command = {\n      command: 'mcp-standards.query',\n      title: 'Query Standards'\n    };\n    actions.push(queryAction);\n\n    return actions;\n  }\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#vs-code-snippets","title":"VS Code Snippets","text":"<p>Create standards-compliant snippets:</p> <pre><code>// .vscode/mcp-snippets.code-snippets\n{\n  \"React Component (MCP Standards)\": {\n    \"prefix\": \"rcmcp\",\n    \"body\": [\n      \"import React from 'react';\",\n      \"import PropTypes from 'prop-types';\",\n      \"\",\n      \"/**\",\n      \" * ${1:ComponentName} - ${2:Brief description}\",\n      \" * @component\",\n      \" */\",\n      \"export const ${1:ComponentName} = ({ ${3:props} }) =&gt; {\",\n      \"  return (\",\n      \"    &lt;div className=\\\"${4:className}\\\" role=\\\"${5:region}\\\" aria-label=\\\"${6:label}\\\"&gt;\",\n      \"      ${7:content}\",\n      \"    &lt;/div&gt;\",\n      \"  );\",\n      \"};\",\n      \"\",\n      \"${1:ComponentName}.propTypes = {\",\n      \"  ${8:propTypes}\",\n      \"};\",\n      \"\",\n      \"${1:ComponentName}.defaultProps = {\",\n      \"  ${9:defaultProps}\",\n      \"};\",\n      \"\",\n      \"export default ${1:ComponentName};\"\n    ],\n    \"description\": \"React component following MCP standards\"\n  }\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#jetbrains-ides","title":"JetBrains IDEs","text":""},{"location":"cli/tutorials/ide-integration/#intellij-idea-webstorm-pycharm","title":"IntelliJ IDEA / WebStorm / PyCharm","text":"<ol> <li>Install Plugin:</li> <li>Open Settings \u2192 Plugins</li> <li>Search for \"MCP Standards\"</li> <li> <p>Install and restart</p> </li> <li> <p>Configure External Tool:    <pre><code>&lt;!-- .idea/externalTools.xml --&gt;\n&lt;toolSet name=\"MCP Standards\"&gt;\n  &lt;tool name=\"Validate File\" showInMainMenu=\"true\" showInEditor=\"true\"&gt;\n    &lt;exec&gt;\n      &lt;option name=\"COMMAND\" value=\"mcp-standards\" /&gt;\n      &lt;option name=\"PARAMETERS\" value=\"validate $FilePath$ --format json\" /&gt;\n      &lt;option name=\"WORKING_DIRECTORY\" value=\"$ProjectFileDir$\" /&gt;\n    &lt;/exec&gt;\n    &lt;filter&gt;\n      &lt;option name=\"NAME\" value=\"MCP Output\" /&gt;\n      &lt;option name=\"DESCRIPTION\" value=\"Parse MCP validation output\" /&gt;\n      &lt;option name=\"REGEXP\" value=\"$FILE_PATH$:$LINE$:$COLUMN$: $MESSAGE$\" /&gt;\n    &lt;/filter&gt;\n  &lt;/tool&gt;\n&lt;/toolSet&gt;\n</code></pre></p> </li> <li> <p>File Watcher:    <pre><code>&lt;!-- .idea/watcherTasks.xml --&gt;\n&lt;TaskOptions&gt;\n  &lt;option name=\"arguments\" value=\"validate $FilePath$ --fix\" /&gt;\n  &lt;option name=\"checkSyntaxErrors\" value=\"true\" /&gt;\n  &lt;option name=\"description\" value=\"MCP Standards Auto-fix\" /&gt;\n  &lt;option name=\"exitCodeBehavior\" value=\"ERROR\" /&gt;\n  &lt;option name=\"program\" value=\"mcp-standards\" /&gt;\n  &lt;option name=\"runOnExternalChanges\" value=\"false\" /&gt;\n  &lt;option name=\"scopeName\" value=\"Project Files\" /&gt;\n  &lt;option name=\"trackOnlyRoot\" value=\"false\" /&gt;\n  &lt;option name=\"workingDir\" value=\"$ProjectFileDir$\" /&gt;\n&lt;/TaskOptions&gt;\n</code></pre></p> </li> <li> <p>Live Templates:    <pre><code>&lt;!-- .idea/templates/MCP_Standards.xml --&gt;\n&lt;templateSet group=\"MCP Standards\"&gt;\n  &lt;template name=\"mcp-func\" value=\"/**&amp;#10; * $DESC$&amp;#10; * @param {$TYPE$} $PARAM$ - $PARAM_DESC$&amp;#10; * @returns {$RETURN_TYPE$} $RETURN_DESC$&amp;#10; * @throws {$ERROR_TYPE$} $ERROR_DESC$&amp;#10; */&amp;#10;export function $NAME$($PARAMS$) {&amp;#10;  $END$&amp;#10;}\" description=\"MCP Standards compliant function\" toReformat=\"true\" toShortenFQNames=\"true\"&gt;\n    &lt;variable name=\"DESC\" expression=\"\" defaultValue=\"&amp;quot;Function description&amp;quot;\" alwaysStopAt=\"true\" /&gt;\n    &lt;variable name=\"NAME\" expression=\"\" defaultValue=\"&amp;quot;functionName&amp;quot;\" alwaysStopAt=\"true\" /&gt;\n    &lt;variable name=\"PARAMS\" expression=\"\" defaultValue=\"&amp;quot;&amp;quot;\" alwaysStopAt=\"true\" /&gt;\n    &lt;context&gt;\n      &lt;option name=\"JAVASCRIPT\" value=\"true\" /&gt;\n      &lt;option name=\"TYPESCRIPT\" value=\"true\" /&gt;\n    &lt;/context&gt;\n  &lt;/template&gt;\n&lt;/templateSet&gt;\n</code></pre></p> </li> </ol>"},{"location":"cli/tutorials/ide-integration/#custom-inspection","title":"Custom Inspection","text":"<p>Create custom inspections:</p> <pre><code>// MCPStandardsInspection.java\npublic class MCPStandardsInspection extends LocalInspectionTool {\n    @Override\n    public ProblemDescriptor[] checkFile(@NotNull PsiFile file, \n                                        @NotNull InspectionManager manager, \n                                        boolean isOnTheFly) {\n        List&lt;ProblemDescriptor&gt; problems = new ArrayList&lt;&gt;();\n\n        // Run MCP validation\n        String result = runMCPValidation(file.getVirtualFile().getPath());\n        List&lt;ValidationIssue&gt; issues = parseValidationResult(result);\n\n        for (ValidationIssue issue : issues) {\n            PsiElement element = file.findElementAt(issue.getOffset());\n            if (element != null) {\n                problems.add(manager.createProblemDescriptor(\n                    element,\n                    issue.getMessage(),\n                    new MCPQuickFix(issue),\n                    ProblemHighlightType.GENERIC_ERROR_OR_WARNING,\n                    isOnTheFly\n                ));\n            }\n        }\n\n        return problems.toArray(new ProblemDescriptor[0]);\n    }\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#neovim","title":"Neovim","text":""},{"location":"cli/tutorials/ide-integration/#lsp-configuration","title":"LSP Configuration","text":"<pre><code>-- ~/.config/nvim/lua/mcp-standards.lua\nlocal lspconfig = require('lspconfig')\nlocal configs = require('lspconfig.configs')\n\n-- Define MCP Standards LSP\nif not configs.mcp_standards then\n  configs.mcp_standards = {\n    default_config = {\n      cmd = {'mcp-standards', 'serve', '--stdio'},\n      filetypes = {'javascript', 'typescript', 'python', 'yaml'},\n      root_dir = function(fname)\n        return lspconfig.util.find_git_ancestor(fname) or \n               lspconfig.util.path.dirname(fname)\n      end,\n      settings = {\n        mcp = {\n          validation = {\n            onSave = true,\n            onType = false\n          },\n          suggestions = {\n            enabled = true\n          }\n        }\n      }\n    }\n  }\nend\n\n-- Setup LSP\nlspconfig.mcp_standards.setup({\n  on_attach = function(client, bufnr)\n    -- Enable completion\n    require('completion').on_attach(client, bufnr)\n\n    -- Keybindings\n    local opts = { noremap=true, silent=true, buffer=bufnr }\n    vim.keymap.set('n', '&lt;leader&gt;sf', '&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;', opts)\n    vim.keymap.set('n', '&lt;leader&gt;sq', '&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;', opts)\n    vim.keymap.set('n', '&lt;leader&gt;sh', '&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;', opts)\n  end\n})\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#telescope-integration","title":"Telescope Integration","text":"<pre><code>-- ~/.config/nvim/lua/telescope/_extensions/mcp_standards.lua\nlocal telescope = require('telescope')\nlocal actions = require('telescope.actions')\nlocal pickers = require('telescope.pickers')\nlocal finders = require('telescope.finders')\nlocal conf = require('telescope.config').values\n\nlocal function mcp_standards_picker(opts)\n  opts = opts or {}\n\n  pickers.new(opts, {\n    prompt_title = 'MCP Standards',\n    finder = finders.new_async_job({\n      command_generator = function(prompt)\n        return {\n          'mcp-standards', 'query', \n          '--semantic', prompt,\n          '--format', 'json'\n        }\n      end,\n      entry_maker = function(entry)\n        local parsed = vim.fn.json_decode(entry)\n        return {\n          value = parsed,\n          display = parsed.title,\n          ordinal = parsed.title .. ' ' .. table.concat(parsed.tags, ' ')\n        }\n      end\n    }),\n    sorter = conf.generic_sorter(opts),\n    attach_mappings = function(prompt_bufnr, map)\n      actions.select_default:replace(function()\n        actions.close(prompt_bufnr)\n        local selection = actions.get_selected_entry()\n        -- Open standard in new buffer\n        vim.cmd('vnew')\n        vim.api.nvim_buf_set_lines(0, 0, -1, false, \n          vim.split(selection.value.content, '\\n'))\n      end)\n      return true\n    end\n  }):find()\nend\n\nreturn telescope.register_extension({\n  exports = {\n    standards = mcp_standards_picker\n  }\n})\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#nvim-cmp-source","title":"Nvim-cmp Source","text":"<pre><code>-- ~/.config/nvim/lua/cmp_mcp_standards.lua\nlocal source = {}\n\nsource.new = function()\n  return setmetatable({}, { __index = source })\nend\n\nsource.is_available = function()\n  return vim.fn.executable('mcp-standards') == 1\nend\n\nsource.get_trigger_characters = function()\n  return { '.', ':', '\"', \"'\" }\nend\n\nsource.complete = function(self, params, callback)\n  local context = params.context\n  local cursor = context.cursor\n\n  -- Get completion from MCP server\n  local items = {}\n  local handle = io.popen('mcp-standards complete --position ' .. cursor.line .. ':' .. cursor.col)\n  local result = handle:read(\"*a\")\n  handle:close()\n\n  if result then\n    local completions = vim.fn.json_decode(result)\n    for _, completion in ipairs(completions) do\n      table.insert(items, {\n        label = completion.label,\n        kind = completion.kind,\n        detail = completion.detail,\n        documentation = completion.documentation,\n        insertText = completion.insertText\n      })\n    end\n  end\n\n  callback(items)\nend\n\nreturn source\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#sublime-text","title":"Sublime Text","text":""},{"location":"cli/tutorials/ide-integration/#package-configuration","title":"Package Configuration","text":"<pre><code>// Packages/User/MCP Standards.sublime-settings\n{\n  \"mcp_standards\": {\n    \"server_command\": [\"mcp-standards\", \"serve\", \"--stdio\"],\n    \"enabled\": true,\n    \"validation_on_save\": true,\n    \"fix_on_save\": false,\n    \"show_diagnostics_panel\": true,\n    \"diagnostics_highlight_style\": \"box\",\n    \"token_budget\": 4000\n  }\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#build-system","title":"Build System","text":"<pre><code>// Packages/User/MCP Standards.sublime-build\n{\n  \"target\": \"mcp_standards_exec\",\n  \"cancel\": {\"kill\": true},\n  \"variants\": [\n    {\n      \"name\": \"Validate\",\n      \"cmd\": [\"mcp-standards\", \"validate\", \"$file\"],\n      \"file_regex\": \"^(.+?):(\\\\d+):(\\\\d+): (error|warning): (.+)$\"\n    },\n    {\n      \"name\": \"Fix\",\n      \"cmd\": [\"mcp-standards\", \"validate\", \"--fix\", \"$file\"]\n    },\n    {\n      \"name\": \"Query\",\n      \"cmd\": [\"mcp-standards\", \"query\", \"--context\", \"$file_path/.mcp-context.json\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#plugin-script","title":"Plugin Script","text":"<pre><code># Packages/MCP Standards/mcp_standards.py\nimport sublime\nimport sublime_plugin\nimport subprocess\nimport json\n\nclass McpStandardsValidateCommand(sublime_plugin.TextCommand):\n    def run(self, edit):\n        file_path = self.view.file_name()\n        if not file_path:\n            return\n\n        # Run validation\n        result = subprocess.run(\n            ['mcp-standards', 'validate', file_path, '--format', 'json'],\n            capture_output=True,\n            text=True\n        )\n\n        if result.returncode == 0:\n            sublime.status_message(\"MCP Standards: No issues found\")\n        else:\n            issues = json.loads(result.stdout)\n            self.show_issues(issues)\n\n    def show_issues(self, issues):\n        panel = self.view.window().create_output_panel(\"mcp_standards\")\n        panel.set_read_only(False)\n\n        for issue in issues['issues']:\n            panel.run_command('append', {\n                'characters': f\"{issue['file']}:{issue['line']}:{issue['column']}: \"\n                            f\"{issue['severity']}: {issue['message']}\\n\"\n            })\n\n        panel.set_read_only(True)\n        self.view.window().run_command(\"show_panel\", {\"panel\": \"output.mcp_standards\"})\n\nclass McpStandardsEventListener(sublime_plugin.EventListener):\n    def on_post_save_async(self, view):\n        settings = sublime.load_settings(\"MCP Standards.sublime-settings\")\n        if settings.get(\"mcp_standards\", {}).get(\"validation_on_save\", True):\n            view.run_command(\"mcp_standards_validate\")\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#emacs","title":"Emacs","text":""},{"location":"cli/tutorials/ide-integration/#configuration-with-lsp-mode","title":"Configuration with LSP-mode","text":"<pre><code>;; ~/.emacs.d/mcp-standards.el\n(require 'lsp-mode)\n\n;; Define MCP Standards LSP client\n(defcustom lsp-mcp-standards-server-command\n  '(\"mcp-standards\" \"serve\" \"--stdio\")\n  \"Command to start MCP Standards LSP server.\"\n  :group 'lsp-mcp-standards\n  :type '(repeat string))\n\n(lsp-register-client\n (make-lsp-client\n  :new-connection (lsp-stdio-connection lsp-mcp-standards-server-command)\n  :major-modes '(js-mode typescript-mode python-mode yaml-mode)\n  :priority -1\n  :server-id 'mcp-standards\n  :initialization-options '((validation (onSave t) (onType nil))\n                          (suggestions (enabled t))\n                          (tokenBudget 4000))))\n\n;; Keybindings\n(defun mcp-standards-setup ()\n  \"Setup MCP Standards keybindings.\"\n  (local-set-key (kbd \"C-c m v\") 'mcp-standards-validate)\n  (local-set-key (kbd \"C-c m f\") 'mcp-standards-fix)\n  (local-set-key (kbd \"C-c m q\") 'mcp-standards-query))\n\n(add-hook 'js-mode-hook #'mcp-standards-setup)\n(add-hook 'python-mode-hook #'mcp-standards-setup)\n\n;; Interactive commands\n(defun mcp-standards-validate ()\n  \"Validate current buffer with MCP Standards.\"\n  (interactive)\n  (compile (format \"mcp-standards validate %s\" (buffer-file-name))))\n\n(defun mcp-standards-fix ()\n  \"Fix current buffer with MCP Standards.\"\n  (interactive)\n  (shell-command\n   (format \"mcp-standards validate --fix %s\" (buffer-file-name)))\n  (revert-buffer t t))\n\n(defun mcp-standards-query (query)\n  \"Query MCP Standards.\"\n  (interactive \"sQuery: \")\n  (let ((buf (get-buffer-create \"*MCP Standards Query*\")))\n    (with-current-buffer buf\n      (erase-buffer)\n      (insert (shell-command-to-string\n               (format \"mcp-standards query --semantic '%s'\" query)))\n      (markdown-mode))\n    (switch-to-buffer buf)))\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#flycheck-integration","title":"Flycheck Integration","text":"<pre><code>;; ~/.emacs.d/flycheck-mcp-standards.el\n(require 'flycheck)\n\n(flycheck-define-checker mcp-standards\n  \"MCP Standards validator.\"\n  :command (\"mcp-standards\" \"validate\" source \"--format\" \"json\")\n  :error-parser flycheck-parse-json\n  :modes (js-mode typescript-mode python-mode)\n  :next-checkers ((warning . javascript-eslint)))\n\n(add-to-list 'flycheck-checkers 'mcp-standards)\n\n;; Auto-fix function\n(defun flycheck-mcp-standards-fix ()\n  \"Fix MCP Standards issues in current buffer.\"\n  (interactive)\n  (when (and flycheck-mode\n             (eq flycheck-checker 'mcp-standards))\n    (shell-command-on-region\n     (point-min) (point-max)\n     \"mcp-standards validate --fix -\"\n     nil t)))\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#generic-lsp-integration","title":"Generic LSP Integration","text":"<p>For any editor supporting Language Server Protocol:</p>"},{"location":"cli/tutorials/ide-integration/#lsp-server-wrapper","title":"LSP Server Wrapper","text":"<pre><code>#!/bin/bash\n# mcp-standards-lsp\n\n# Start MCP Standards in LSP mode\nexec mcp-standards serve --stdio --lsp-mode \"$@\"\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#lsp-configuration_1","title":"LSP Configuration","text":"<pre><code>{\n  \"languageserver\": {\n    \"mcp-standards\": {\n      \"command\": \"mcp-standards-lsp\",\n      \"filetypes\": [\"javascript\", \"typescript\", \"python\", \"yaml\"],\n      \"rootPatterns\": [\".mcp-standards.yaml\", \".git\"],\n      \"settings\": {\n        \"mcp\": {\n          \"validation\": {\n            \"enabled\": true,\n            \"onSave\": true,\n            \"onType\": false\n          },\n          \"codeActions\": {\n            \"enabled\": true,\n            \"showDocumentation\": true\n          },\n          \"completion\": {\n            \"enabled\": true,\n            \"triggerCharacters\": [\".\", \":\", \"\\\"\", \"'\"]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#common-features-across-ides","title":"Common Features Across IDEs","text":""},{"location":"cli/tutorials/ide-integration/#1-real-time-validation","title":"1. Real-time Validation","text":"<ul> <li>Underline/highlight standards violations</li> <li>Show error details on hover</li> <li>Gutter icons for issue severity</li> </ul>"},{"location":"cli/tutorials/ide-integration/#2-quick-fixes","title":"2. Quick Fixes","text":"<ul> <li>Apply automated fixes</li> <li>Bulk fix all issues in file</li> <li>Preview changes before applying</li> </ul>"},{"location":"cli/tutorials/ide-integration/#3-code-completion","title":"3. Code Completion","text":"<ul> <li>Standards-compliant snippets</li> <li>Context-aware suggestions</li> <li>Documentation on hover</li> </ul>"},{"location":"cli/tutorials/ide-integration/#4-code-actions","title":"4. Code Actions","text":"<ul> <li>\"Fix with MCP Standards\"</li> <li>\"Query applicable standards\"</li> <li>\"Generate compliant code\"</li> </ul>"},{"location":"cli/tutorials/ide-integration/#5-integrated-documentation","title":"5. Integrated Documentation","text":"<ul> <li>View standards inline</li> <li>Search standards database</li> <li>Context-sensitive help</li> </ul>"},{"location":"cli/tutorials/ide-integration/#troubleshooting-ide-integration","title":"Troubleshooting IDE Integration","text":""},{"location":"cli/tutorials/ide-integration/#server-not-starting","title":"Server Not Starting","text":"<pre><code># Check if server starts manually\nmcp-standards serve --stdio &lt; /dev/null\n\n# Check logs\ntail -f ~/.cache/mcp-standards/logs/server.log\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#performance-issues","title":"Performance Issues","text":"<pre><code># .mcp-standards.yaml\nserver:\n  ide_mode:\n    debounce_ms: 1000  # Increase for less frequent validation\n    max_file_size_kb: 500  # Skip large files\n    incremental: true  # Only validate changes\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#communication-errors","title":"Communication Errors","text":"<pre><code># Test LSP communication\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{}}' | mcp-standards serve --stdio\n</code></pre>"},{"location":"cli/tutorials/ide-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Configure per-project: Use <code>.mcp-standards.yaml</code> in project root</li> <li>Optimize for performance: Adjust validation frequency</li> <li>Use quick fixes: Let MCP fix issues automatically</li> <li>Learn keyboard shortcuts: Speed up your workflow</li> <li>Customize rules: Disable noisy rules per-project</li> <li>Keep server running: Better performance than starting per-file</li> </ol>"},{"location":"community/review-process/","title":"Community Review Process","text":"<p>This document outlines the structured review workflow for standards contributions, including reviewer assignment, tracking, feedback integration, and approval workflows.</p>"},{"location":"community/review-process/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Review Workflow</li> <li>Reviewer Roles and Responsibilities</li> <li>Review Stages</li> <li>Feedback Integration Process</li> <li>Approval and Publication Workflow</li> <li>Quality Gates</li> <li>Tools and Automation</li> <li>Escalation and Conflict Resolution</li> <li>Metrics and Continuous Improvement</li> </ol>"},{"location":"community/review-process/#overview","title":"Overview","text":"<p>The community review process ensures that all standards meet high quality, consistency, and community needs. Our process balances thorough review with timely feedback to maintain momentum while ensuring excellence.</p>"},{"location":"community/review-process/#goals","title":"Goals","text":"<ul> <li>Quality Assurance: Ensure standards meet technical and editorial excellence</li> <li>Community Input: Incorporate diverse perspectives and expertise</li> <li>Consistency: Maintain coherent standards across domains</li> <li>Transparency: Provide clear, traceable review processes</li> <li>Efficiency: Deliver timely feedback and decisions</li> </ul>"},{"location":"community/review-process/#process-principles","title":"Process Principles","text":"<ul> <li>Inclusive: Welcome contributions from all community members</li> <li>Constructive: Focus on improvement, not criticism</li> <li>Collaborative: Encourage dialogue between authors and reviewers</li> <li>Evidence-based: Make decisions based on clear criteria</li> <li>Iterative: Support continuous improvement</li> </ul>"},{"location":"community/review-process/#review-workflow","title":"Review Workflow","text":""},{"location":"community/review-process/#high-level-process","title":"High-Level Process","text":"<pre><code>graph TD\n    A[Author Submits Standard] --&gt; B[Initial Triage]\n    B --&gt; C[Assign Reviewers]\n    C --&gt; D[Technical Review]\n    D --&gt; E[Editorial Review]\n    E --&gt; F[Community Review]\n    F --&gt; G{All Reviews Pass?}\n    G --&gt;|No| H[Author Addresses Feedback]\n    H --&gt; D\n    G --&gt;|Yes| I[Final Approval]\n    I --&gt; J[Publication]\n    J --&gt; K[Post-Publication Monitoring]\n</code></pre>"},{"location":"community/review-process/#review-stages","title":"Review Stages","text":"Stage Duration Participants Outcome Initial Triage 24 hours Maintainers Assignment or rejection Technical Review 3-5 days Domain experts Technical approval Editorial Review 2-3 days Editorial team Content approval Community Review 5-7 days Community members Community consensus Final Approval 1-2 days Maintainers Publication decision"},{"location":"community/review-process/#review-triggers","title":"Review Triggers","text":"<p>Reviews are triggered by:</p> <ul> <li>New standard submissions via pull requests</li> <li>Major version updates (version bumps &gt;= 1.0)</li> <li>Community requests for existing standard reviews</li> <li>Scheduled reviews for standards older than 12 months</li> <li>Compliance updates when regulations change</li> </ul>"},{"location":"community/review-process/#reviewer-roles-and-responsibilities","title":"Reviewer Roles and Responsibilities","text":""},{"location":"community/review-process/#maintainers","title":"Maintainers","text":"<p>Selection Criteria: - Significant contributions to the project - Deep understanding of standards development - Proven track record in technical leadership - Active community participation</p> <p>Responsibilities: - Initial triage and reviewer assignment - Final approval decisions - Escalation resolution - Process oversight and improvement</p> <p>Time Commitment: 5-10 hours per week</p>"},{"location":"community/review-process/#domain-experts","title":"Domain Experts","text":"<p>Selection Criteria: - Recognized expertise in specific domains - Professional experience implementing standards - Ability to assess technical accuracy - Commitment to timely reviews</p> <p>Responsibilities: - Technical accuracy validation - Implementation feasibility assessment - Best practices verification - Architecture review</p> <p>Current Domain Experts:</p> Domain Expert Expertise Areas API Design @api-expert REST, GraphQL, gRPC, OpenAPI Security @security-expert Authentication, Authorization, Cryptography AI/ML @ml-expert MLOps, Model Governance, Data Science Cloud Native @cloud-expert Kubernetes, Microservices, DevOps Data Engineering @data-expert Pipelines, Governance, Analytics Frontend @frontend-expert React, Vue, Accessibility, Performance"},{"location":"community/review-process/#editorial-team","title":"Editorial Team","text":"<p>Selection Criteria: - Strong technical writing skills - Experience with documentation standards - Attention to detail - Understanding of audience needs</p> <p>Responsibilities: - Grammar and style validation - Clarity and readability assessment - Consistency with style guide - Accessibility review</p>"},{"location":"community/review-process/#community-reviewers","title":"Community Reviewers","text":"<p>Selection Criteria: - Regular community participation - Relevant implementation experience - Constructive feedback history - Commitment to review timeline</p> <p>Responsibilities: - Practical feedback on usability - Use case validation - Implementation experience sharing - Quality scoring participation</p>"},{"location":"community/review-process/#review-stages_1","title":"Review Stages","text":""},{"location":"community/review-process/#1-initial-triage-24-hours","title":"1. Initial Triage (24 hours)","text":"<p>Performed by: Maintainers</p> <p>Criteria: - [ ] Submission follows contribution guidelines - [ ] Required files are present (MD + YAML) - [ ] Basic quality threshold met (&gt;60%) - [ ] No obvious duplicates or conflicts - [ ] Appropriate domain classification</p> <p>Outcomes: - Accept: Proceed to reviewer assignment - Request Changes: Return to author with specific requirements - Reject: Close with explanation</p> <p>Automated Checks: - File format validation - Metadata completeness - Link verification - Basic quality scoring</p>"},{"location":"community/review-process/#2-technical-review-3-5-days","title":"2. Technical Review (3-5 days)","text":"<p>Performed by: Domain experts (1-2 reviewers)</p> <p>Review Checklist:</p>"},{"location":"community/review-process/#technical-accuracy","title":"Technical Accuracy","text":"<ul> <li> Factual correctness of all technical statements</li> <li> Current and relevant technology references</li> <li> Accurate code examples and implementations</li> <li> Proper security considerations</li> <li> Performance implications addressed</li> </ul>"},{"location":"community/review-process/#implementation-feasibility","title":"Implementation Feasibility","text":"<ul> <li> Realistic implementation requirements</li> <li> Appropriate complexity level</li> <li> Clear implementation guidance</li> <li> Testable requirements</li> <li> Scalability considerations</li> </ul>"},{"location":"community/review-process/#architecture-and-design","title":"Architecture and Design","text":"<ul> <li> Sound architectural principles</li> <li> Appropriate design patterns</li> <li> Integration considerations</li> <li> Dependency management</li> <li> Extensibility and maintainability</li> </ul>"},{"location":"community/review-process/#domain-alignment","title":"Domain Alignment","text":"<ul> <li> Fits within domain boundaries</li> <li> Complements existing standards</li> <li> Addresses real domain needs</li> <li> Follows domain conventions</li> <li> Appropriate abstraction level</li> </ul> <p>Review Template:</p> <pre><code>## Technical Review: [Standard Name]\n\n### Summary\nBrief overview of the standard and review findings.\n\n### Technical Accuracy: \u2705/\u274c\n- Accuracy assessment\n- Any factual corrections needed\n\n### Implementation Feasibility: \u2705/\u274c  \n- Feasibility analysis\n- Implementation concerns or suggestions\n\n### Architecture Review: \u2705/\u274c\n- Architectural soundness\n- Design pattern appropriateness\n\n### Code Examples: \u2705/\u274c\n- Example quality and correctness\n- Additional examples needed\n\n### Security Considerations: \u2705/\u274c\n- Security analysis\n- Missing security aspects\n\n### Recommendations\n1. [Priority] Specific improvement suggestion\n2. [Priority] Another recommendation\n\n### Decision: APPROVE / REQUEST_CHANGES / REJECT\nRationale for decision\n</code></pre>"},{"location":"community/review-process/#3-editorial-review-2-3-days","title":"3. Editorial Review (2-3 days)","text":"<p>Performed by: Editorial team (1 reviewer)</p> <p>Review Checklist:</p>"},{"location":"community/review-process/#content-quality","title":"Content Quality","text":"<ul> <li> Clear and concise writing</li> <li> Logical information flow</li> <li> Appropriate section organization</li> <li> Complete coverage of topics</li> <li> Actionable guidance</li> </ul>"},{"location":"community/review-process/#language-and-style","title":"Language and Style","text":"<ul> <li> Grammar and spelling accuracy</li> <li> Consistent terminology usage</li> <li> Appropriate tone and voice</li> <li> Accessibility-friendly language</li> <li> Style guide compliance</li> </ul>"},{"location":"community/review-process/#structure-and-format","title":"Structure and Format","text":"<ul> <li> Proper markdown formatting</li> <li> Consistent heading structure</li> <li> Effective use of lists and tables</li> <li> Appropriate visual elements</li> <li> Cross-reference formatting</li> </ul>"},{"location":"community/review-process/#documentation-standards","title":"Documentation Standards","text":"<ul> <li> Complete metadata</li> <li> Proper version numbering</li> <li> Required sections present</li> <li> Link validation</li> <li> Citation formatting</li> </ul> <p>Editorial Review Template:</p> <pre><code>## Editorial Review: [Standard Name]\n\n### Content Quality: \u2705/\u274c\n- Writing clarity assessment\n- Organization feedback\n\n### Language and Style: \u2705/\u274c\n- Grammar and style issues\n- Terminology consistency\n\n### Structure: \u2705/\u274c\n- Formatting review\n- Structural improvements\n\n### Completeness: \u2705/\u274c\n- Missing sections or information\n- Metadata completeness\n\n### Suggested Edits\n[Line-by-line editorial suggestions]\n\n### Decision: APPROVE / REQUEST_CHANGES\nEditorial rationale\n</code></pre>"},{"location":"community/review-process/#4-community-review-5-7-days","title":"4. Community Review (5-7 days)","text":"<p>Performed by: Community members (3-5 reviewers)</p> <p>Review Focus: - Practical usability - Real-world applicability - Missing use cases - Implementation experience - Community value</p> <p>Community Review Process:</p> <ol> <li>Open Call: Announcement in community channels</li> <li>Self-Assignment: Community members volunteer</li> <li>Guided Review: Structured feedback collection</li> <li>Consensus Building: Discussion and alignment</li> <li>Summary Report: Consolidated community feedback</li> </ol> <p>Community Review Template:</p> <pre><code>## Community Review: [Standard Name]\n\n### Reviewer Background\nBrief description of relevant experience\n\n### Usability Assessment: \u2b50\u2b50\u2b50\u2b50\u2b50\nRate the practical usability (1-5 stars)\n\n### Use Case Coverage: \u2705/\u274c\n- Are relevant use cases covered?\n- What's missing?\n\n### Implementation Experience: \u2705/\u274c\n- Have you implemented similar solutions?\n- What challenges should be addressed?\n\n### Community Value: \u2b50\u2b50\u2b50\u2b50\u2b50\nRate the value to the community (1-5 stars)\n\n### Specific Feedback\n[Detailed feedback and suggestions]\n\n### Recommendation: APPROVE / REQUEST_CHANGES / NEEDS_DISCUSSION\n</code></pre>"},{"location":"community/review-process/#5-final-approval-1-2-days","title":"5. Final Approval (1-2 days)","text":"<p>Performed by: Maintainers</p> <p>Final Review Checklist: - [ ] All review stages completed successfully - [ ] Author addressed all required feedback - [ ] Quality score meets minimum threshold (80%) - [ ] No unresolved conflicts or concerns - [ ] Publication readiness confirmed</p>"},{"location":"community/review-process/#feedback-integration-process","title":"Feedback Integration Process","text":""},{"location":"community/review-process/#feedback-categories","title":"Feedback Categories","text":"<p>Must Fix (Blocking) - Technical inaccuracies - Security vulnerabilities - Major usability issues - Compliance violations</p> <p>Should Fix (Important) - Performance concerns - Unclear documentation - Missing examples - Style inconsistencies</p> <p>Could Fix (Optional) - Minor improvements - Additional examples - Enhanced explanations - Future considerations</p>"},{"location":"community/review-process/#integration-workflow","title":"Integration Workflow","text":"<ol> <li>Feedback Collection: All reviewer feedback compiled</li> <li>Categorization: Feedback sorted by priority and type</li> <li>Author Notification: Structured feedback provided to author</li> <li>Discussion Period: Author and reviewers discuss concerns</li> <li>Implementation: Author implements required changes</li> <li>Re-review: Updated standard reviewed for compliance</li> <li>Approval: Final approval once all requirements met</li> </ol>"},{"location":"community/review-process/#conflict-resolution","title":"Conflict Resolution","text":"<p>Common Conflicts: - Disagreement between reviewers - Author disputes feedback - Technical approach debates - Resource or timeline concerns</p> <p>Resolution Process: 1. Direct Discussion: Encourage reviewer-author dialogue 2. Expert Consultation: Involve additional domain experts 3. Community Input: Seek broader community perspective 4. Maintainer Decision: Final decision by maintainers 5. Documentation: Record decision rationale</p>"},{"location":"community/review-process/#approval-and-publication-workflow","title":"Approval and Publication Workflow","text":""},{"location":"community/review-process/#approval-criteria","title":"Approval Criteria","text":"<p>All standards must meet these criteria for approval:</p>"},{"location":"community/review-process/#technical-excellence","title":"Technical Excellence","text":"<ul> <li>\u2705 Technical accuracy verified</li> <li>\u2705 Implementation feasibility confirmed</li> <li>\u2705 Security considerations addressed</li> <li>\u2705 Performance implications documented</li> </ul>"},{"location":"community/review-process/#content-quality_1","title":"Content Quality","text":"<ul> <li>\u2705 Clear and actionable guidance</li> <li>\u2705 Complete coverage of scope</li> <li>\u2705 Appropriate examples provided</li> <li>\u2705 Proper documentation structure</li> </ul>"},{"location":"community/review-process/#community-value","title":"Community Value","text":"<ul> <li>\u2705 Addresses real community needs</li> <li>\u2705 Complements existing standards</li> <li>\u2705 Demonstrates practical utility</li> <li>\u2705 Supports accessibility and inclusion</li> </ul>"},{"location":"community/review-process/#process-compliance","title":"Process Compliance","text":"<ul> <li>\u2705 All review stages completed</li> <li>\u2705 Feedback properly addressed</li> <li>\u2705 Quality score \u2265 80%</li> <li>\u2705 Metadata complete and accurate</li> </ul>"},{"location":"community/review-process/#publication-process","title":"Publication Process","text":"<ol> <li>Final Approval: Maintainer grants final approval</li> <li>Version Assignment: Final version number assigned</li> <li>Publication: Standard published to repository</li> <li>Announcement: Community notification of new standard</li> <li>Index Update: Standards index updated</li> <li>Monitoring Setup: Post-publication monitoring enabled</li> </ol>"},{"location":"community/review-process/#post-publication-activities","title":"Post-Publication Activities","text":"<ul> <li>Community Announcement: Newsletter, Discord, GitHub</li> <li>Documentation Update: Index and cross-references</li> <li>Feedback Monitoring: Track implementation feedback</li> <li>Usage Analytics: Monitor adoption and usage</li> <li>Maintenance Planning: Schedule future reviews</li> </ul>"},{"location":"community/review-process/#quality-gates","title":"Quality Gates","text":""},{"location":"community/review-process/#automated-quality-gates","title":"Automated Quality Gates","text":"<p>Pre-Review Gates: - File format validation - Metadata completeness check - Link verification - Basic quality scoring (&gt;60%) - Security scanning - Compliance validation</p> <p>Post-Review Gates: - All reviewer approvals received - Quality score threshold met (\u226580%) - Required feedback addressed - Final maintainer approval - Publication readiness check</p>"},{"location":"community/review-process/#manual-quality-gates","title":"Manual Quality Gates","text":"<p>Review Stage Gates: - Technical expert approval - Editorial team approval - Community consensus achieved - Maintainer final approval</p> <p>Exception Process: - Exceptional circumstances documented - Maintainer override with rationale - Community notification of exceptions - Post-publication review scheduled</p>"},{"location":"community/review-process/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"community/review-process/#review-management-tools","title":"Review Management Tools","text":"<p>GitHub Integration: - Pull request workflow - Review assignment automation - Status tracking - Approval collection</p> <p>Custom Tools: - Review dashboard - Quality scoring system - Feedback aggregation - Timeline tracking</p>"},{"location":"community/review-process/#automated-workflows","title":"Automated Workflows","text":"<pre><code># .github/workflows/review-assignment.yml\nname: Review Assignment\non:\n  pull_request:\n    types: [opened]\n    paths: ['standards/**']\n\njobs:\n  assign-reviewers:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Determine Domain\n        id: domain\n        run: |\n          # Extract domain from PR files\n\n      - name: Assign Technical Reviewers\n        run: |\n          # Auto-assign domain experts\n\n      - name: Create Review Checklist\n        run: |\n          # Generate review templates\n</code></pre>"},{"location":"community/review-process/#quality-metrics-dashboard","title":"Quality Metrics Dashboard","text":"<p>Real-time Metrics: - Review queue length - Average review time - Quality score distribution - Reviewer workload - Community participation</p> <p>Historical Analysis: - Review trend analysis - Quality improvements over time - Reviewer performance metrics - Process bottleneck identification</p>"},{"location":"community/review-process/#escalation-and-conflict-resolution","title":"Escalation and Conflict Resolution","text":""},{"location":"community/review-process/#escalation-triggers","title":"Escalation Triggers","text":"<ul> <li>Timeline Exceeded: Review taking longer than allocated time</li> <li>Reviewer Unavailability: Assigned reviewer cannot complete review</li> <li>Technical Disagreement: Reviewers cannot reach consensus</li> <li>Author Disputes: Author disagrees with required changes</li> <li>Quality Concerns: Standard quality below threshold</li> </ul>"},{"location":"community/review-process/#escalation-levels","title":"Escalation Levels","text":"<p>Level 1: Peer Resolution - Direct discussion between parties - Additional expert consultation - Extended review period - Compromise solutions</p> <p>Level 2: Maintainer Intervention - Maintainer mediates discussion - Additional reviewers assigned - Process modifications - Timeline adjustments</p> <p>Level 3: Community Decision - Public discussion period - Community voting process - Advisory committee input - Final binding decision</p>"},{"location":"community/review-process/#resolution-documentation","title":"Resolution Documentation","text":"<p>All escalations and resolutions are documented: - Issue description and timeline - Parties involved - Resolution process used - Final decision and rationale - Process improvements identified</p>"},{"location":"community/review-process/#metrics-and-continuous-improvement","title":"Metrics and Continuous Improvement","text":""},{"location":"community/review-process/#key-performance-indicators","title":"Key Performance Indicators","text":"<p>Efficiency Metrics: - Average review time by stage - Time from submission to publication - Review queue backlog - Reviewer response time</p> <p>Quality Metrics: - Initial quality score distribution - Post-review quality improvements - Community satisfaction ratings - Standard adoption rates</p> <p>Participation Metrics: - Number of active reviewers - Community review participation - Reviewer retention rates - Geographic/demographic diversity</p>"},{"location":"community/review-process/#continuous-improvement-process","title":"Continuous Improvement Process","text":"<p>Monthly Reviews: - Metric analysis and trending - Process bottleneck identification - Reviewer feedback collection - Tool and automation assessment</p> <p>Quarterly Improvements: - Process refinements implemented - Tool enhancements deployed - Reviewer training updates - Community feedback integration</p> <p>Annual Assessment: - Comprehensive process review - Strategic direction alignment - Major process overhauls - Long-term metric analysis</p>"},{"location":"community/review-process/#feedback-mechanisms","title":"Feedback Mechanisms","text":"<p>Reviewer Feedback: - Post-review surveys - Regular feedback sessions - Process improvement suggestions - Tool enhancement requests</p> <p>Author Feedback: - Submission experience surveys - Process clarity assessment - Timeline satisfaction - Support quality evaluation</p> <p>Community Feedback: - Community satisfaction surveys - Public feedback forums - Standards quality assessment - Process transparency evaluation</p>"},{"location":"community/review-process/#review-process-templates","title":"Review Process Templates","text":""},{"location":"community/review-process/#new-reviewer-onboarding","title":"New Reviewer Onboarding","text":"<pre><code># Welcome to the Standards Review Team!\n\n## Getting Started\n1. Review the contribution guidelines\n2. Complete reviewer training modules\n3. Set up review tools and access\n4. Join reviewer communication channels\n\n## First Review Assignment\n- Start with editorial reviews\n- Shadow experienced reviewers\n- Receive mentorship and feedback\n- Gradually increase review complexity\n\n## Ongoing Development\n- Participate in reviewer forums\n- Attend training sessions\n- Provide process feedback\n- Consider domain specialization\n</code></pre>"},{"location":"community/review-process/#review-status-communication","title":"Review Status Communication","text":"<pre><code># Review Status Update: [Standard Name]\n\n**Current Stage:** Technical Review\n**Assigned Reviewers:** @reviewer1, @reviewer2\n**Expected Completion:** [Date]\n**Progress:** 2/3 reviews completed\n\n## Recent Activity\n- [Date] Technical review completed by @reviewer1\n- [Date] Editorial feedback provided\n- [Date] Author responded to initial feedback\n\n## Next Steps\n- Awaiting final technical review\n- Community review to begin [Date]\n- Estimated publication: [Date]\n\n## Questions or Concerns?\nContact the review team at [contact info]\n</code></pre>"},{"location":"community/review-process/#conclusion","title":"Conclusion","text":"<p>The community review process is designed to ensure high-quality standards while fostering inclusive participation and continuous improvement. By following these structured workflows and maintaining focus on our core principles, we can build a robust collection of standards that serve the entire community.</p> <p>The process continues to evolve based on community feedback and changing needs. All community members are encouraged to participate in both the review process and its ongoing improvement.</p> <p>For questions about the review process, please open an issue or contact the maintainers.</p>"},{"location":"man/","title":"Man Pages Installation","text":"<p>This directory contains manual pages for the MCP Standards Server CLI commands.</p>"},{"location":"man/#installation","title":"Installation","text":""},{"location":"man/#system-wide-installation-requires-rootsudo","title":"System-wide Installation (requires root/sudo)","text":"<pre><code># Linux/macOS\nsudo cp mcp-standards*.1 /usr/local/share/man/man1/\nsudo mandb  # or makewhatis on some systems\n\n# Alternative location\nsudo cp mcp-standards*.1 /usr/share/man/man1/\n</code></pre>"},{"location":"man/#user-installation-no-root-required","title":"User Installation (no root required)","text":"<pre><code># Create user man directory\nmkdir -p ~/.local/share/man/man1\n\n# Copy man pages\ncp mcp-standards*.1 ~/.local/share/man/man1/\n\n# Add to MANPATH (add to ~/.bashrc or ~/.zshrc)\nexport MANPATH=\"$HOME/.local/share/man:$MANPATH\"\n\n# Update man database\nmandb ~/.local/share/man\n</code></pre>"},{"location":"man/#package-manager-installation","title":"Package Manager Installation","text":"<p>When installed via package managers, man pages are typically installed automatically:</p> <pre><code># Debian/Ubuntu package\nsudo dpkg -i mcp-standards-server.deb\n\n# RPM package\nsudo rpm -i mcp-standards-server.rpm\n\n# Homebrew (macOS)\nbrew install mcp-standards-server\n</code></pre>"},{"location":"man/#available-man-pages","title":"Available Man Pages","text":"<ul> <li><code>mcp-standards(1)</code> - Main command overview</li> <li><code>mcp-standards-sync(1)</code> - Sync command details</li> <li><code>mcp-standards-validate(1)</code> - Validate command details</li> <li><code>mcp-standards-serve(1)</code> - Server command details</li> <li><code>mcp-standards-query(1)</code> - Query command details</li> <li><code>mcp-standards-cache(1)</code> - Cache management</li> <li><code>mcp-standards-config(1)</code> - Configuration management</li> </ul>"},{"location":"man/#viewing-man-pages","title":"Viewing Man Pages","text":"<pre><code># View main page\nman mcp-standards\n\n# View specific command\nman mcp-standards-validate\n\n# Search for keyword\nman -k mcp-standards\n\n# View without installing\nman ./mcp-standards.1\n</code></pre>"},{"location":"man/#building-man-pages","title":"Building Man Pages","text":""},{"location":"man/#from-markdown","title":"From Markdown","text":"<pre><code># Install pandoc\nsudo apt install pandoc  # or brew install pandoc\n\n# Convert markdown to man page\npandoc -s -t man docs/cli/README.md -o mcp-standards.1\n</code></pre>"},{"location":"man/#from-asciidoc","title":"From AsciiDoc","text":"<pre><code># Install asciidoctor\ngem install asciidoctor\n\n# Convert asciidoc to man page\nasciidoctor -b manpage -o mcp-standards.1 mcp-standards.adoc\n</code></pre>"},{"location":"man/#formatting-guidelines","title":"Formatting Guidelines","text":"<p>Man pages follow specific formatting conventions:</p> <ul> <li><code>.TH</code> - Title header</li> <li><code>.SH</code> - Section header</li> <li><code>.SS</code> - Subsection header</li> <li><code>.TP</code> - Tagged paragraph</li> <li><code>.BR</code> - Bold/Roman alternating</li> <li><code>.B</code> - Bold text</li> <li><code>.I</code> - Italic text</li> <li><code>.nf</code>/<code>.fi</code> - No fill (preformatted text)</li> </ul>"},{"location":"man/#testing-man-pages","title":"Testing Man Pages","text":"<pre><code># Check formatting\nman -l mcp-standards.1\n\n# Check for errors\ngroff -man -T ascii mcp-standards.1 &gt; /dev/null\n\n# Preview as PDF\ngroff -man -T pdf mcp-standards.1 &gt; mcp-standards.pdf\n</code></pre>"},{"location":"man/#distribution","title":"Distribution","text":""},{"location":"man/#in-python-package","title":"In Python Package","text":"<pre><code># setup.py\nsetup(\n    name='mcp-standards-server',\n    # ... other config ...\n    data_files=[\n        ('share/man/man1', [\n            'docs/man/mcp-standards.1',\n            'docs/man/mcp-standards-sync.1',\n            'docs/man/mcp-standards-validate.1',\n            # ... other man pages\n        ])\n    ]\n)\n</code></pre>"},{"location":"man/#in-makefile","title":"In Makefile","text":"<pre><code>MANDIR = /usr/local/share/man/man1\n\ninstall-man:\n    install -d $(DESTDIR)$(MANDIR)\n    install -m 644 docs/man/*.1 $(DESTDIR)$(MANDIR)\n    mandb\n\nuninstall-man:\n    rm -f $(DESTDIR)$(MANDIR)/mcp-standards*.1\n    mandb\n</code></pre>"},{"location":"man/#contributing","title":"Contributing","text":"<p>When adding new commands or options:</p> <ol> <li>Update the relevant man page</li> <li>Follow existing formatting conventions</li> <li>Test the man page renders correctly</li> <li>Update this README if adding new pages</li> </ol>"},{"location":"man/#quick-reference","title":"Quick Reference","text":"<p>Common man page sections:</p> <ol> <li>User commands</li> <li>System calls</li> <li>Library functions</li> <li>Special files</li> <li>File formats</li> <li>Games</li> <li>Miscellaneous</li> <li>System administration</li> </ol> <p>MCP Standards uses section 1 (user commands) for all CLI documentation.</p>"},{"location":"site/","title":"MCP Standards Server Documentation","text":"<p>Welcome to the MCP Standards Server documentation! This comprehensive guide will help you integrate development standards into your workflow using the Model Context Protocol.</p>"},{"location":"site/#what-is-mcp-standards-server","title":"What is MCP Standards Server?","text":"<p>MCP Standards Server is a powerful tool that helps development teams:</p> <ul> <li>\ud83d\udcda Manage Standards - Sync and cache development standards from repositories</li> <li>\ud83d\udd0d Query Standards - Find applicable standards based on project context</li> <li>\u2705 Validate Code - Check code against standards with auto-fix capabilities</li> <li>\ud83e\udd16 IDE Integration - Real-time validation and suggestions in your editor</li> <li>\ud83d\ude80 CI/CD Ready - Integrate standards checking into your pipeline</li> <li>\ud83c\udfaf MCP Protocol - Use standards via Model Context Protocol for AI assistants</li> </ul>"},{"location":"site/#quick-start","title":"Quick Start","text":"<pre><code># Install\npip install mcp-standards-server\n\n# Initialize configuration\nmcp-standards config --init\n\n# Sync standards\nmcp-standards sync\n\n# Validate your code\nmcp-standards validate .\n\n# Start MCP server\nmcp-standards serve\n</code></pre>"},{"location":"site/#documentation-overview","title":"Documentation Overview","text":""},{"location":"site/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Configuration Guide</li> </ul>"},{"location":"site/#user-guides","title":"\ud83d\udcd6 User Guides","text":"<ul> <li>CLI Commands Reference</li> <li>Common Workflows</li> <li>IDE Integration</li> <li>CI/CD Integration</li> </ul>"},{"location":"site/#api-reference","title":"\ud83d\udd27 API Reference","text":"<ul> <li>MCP Tools Reference</li> <li>Configuration Schema</li> <li>Standards Format</li> <li>Validation Rules</li> </ul>"},{"location":"site/#examples","title":"\ud83d\udca1 Examples","text":"<ul> <li>Project Setup Examples</li> <li>Validation Examples</li> <li>Custom Standards</li> <li>Integration Scripts</li> </ul>"},{"location":"site/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<ul> <li>System Overview</li> <li>Standards Engine</li> <li>Token Optimization</li> <li>MCP Integration</li> </ul>"},{"location":"site/#contributing","title":"\ud83e\udd1d Contributing","text":"<ul> <li>Development Setup</li> <li>Adding Standards</li> <li>Writing Validators</li> <li>Testing Guide</li> </ul>"},{"location":"site/#key-features","title":"Key Features","text":""},{"location":"site/#intelligent-standard-selection","title":"\ud83c\udfaf Intelligent Standard Selection","text":"<p>The server automatically selects applicable standards based on: - Project type (web app, API, CLI, etc.) - Programming languages - Frameworks and libraries - Special requirements (security, accessibility, performance)</p>"},{"location":"site/#flexible-validation","title":"\ud83d\udd27 Flexible Validation","text":"<ul> <li>Auto-fix capabilities for common issues</li> <li>Multiple output formats (JSON, JUnit, SARIF)</li> <li>Configurable severity levels</li> <li>Incremental validation for large codebases</li> </ul>"},{"location":"site/#mcp-protocol-support","title":"\ud83e\udd16 MCP Protocol Support","text":"<p>Use standards through AI assistants and tools: - Query standards with natural language - Get code suggestions based on standards - Validate code in real-time - Generate compliant code templates</p>"},{"location":"site/#comprehensive-reporting","title":"\ud83d\udcca Comprehensive Reporting","text":"<ul> <li>Detailed validation reports</li> <li>Compliance dashboards</li> <li>Historical tracking</li> <li>Team metrics</li> </ul>"},{"location":"site/#community","title":"Community","text":"<ul> <li>\ud83d\udcac Discord Server</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udce2 Announcements</li> <li>\ud83c\udf1f Star on GitHub</li> </ul>"},{"location":"site/#license","title":"License","text":"<p>MCP Standards Server is open source software licensed under the MIT License.</p> <p>Ready to get started? Check out the Installation Guide or jump right into the Quick Start Tutorial!</p>"},{"location":"site/api/config-schema/","title":"Configuration Schema Reference","text":"<p>Complete schema reference for MCP Standards Server configuration.</p>"},{"location":"site/api/config-schema/#configuration-file-format","title":"Configuration File Format","text":"<p>The configuration file uses YAML format and is typically located at: - Linux/macOS: <code>~/.mcp-standards/config.yaml</code> - Windows: <code>%APPDATA%\\mcp-standards\\config.yaml</code></p>"},{"location":"site/api/config-schema/#schema-overview","title":"Schema Overview","text":"<pre><code># Root configuration schema\nserver:          # Server configuration\nstandards:       # Standards management\nvalidation:      # Validation settings\nlogging:         # Logging configuration\nperformance:     # Performance tuning\nmonitoring:      # Monitoring settings\nsecurity:        # Security configuration\nintegrations:    # External integrations\n</code></pre>"},{"location":"site/api/config-schema/#server-configuration","title":"Server Configuration","text":""},{"location":"site/api/config-schema/#server","title":"<code>server</code>","text":"<p>HTTP server settings for the MCP server.</p> <pre><code>server:\n  host: string           # Server bind address\n  port: integer          # Server port number\n  enable_cors: boolean   # Enable CORS headers\n  cors_origins: [string] # Allowed CORS origins\n  workers: integer       # Number of worker processes\n  timeout: integer       # Request timeout (seconds)\n  max_request_size: string # Maximum request size (e.g., \"10MB\")\n</code></pre> <p>Default values: <pre><code>server:\n  host: \"0.0.0.0\"\n  port: 8080\n  enable_cors: true\n  cors_origins: [\"*\"]\n  workers: 1\n  timeout: 30\n  max_request_size: \"10MB\"\n</code></pre></p> <p>Validation rules: - <code>host</code>: Valid IP address or hostname - <code>port</code>: Integer between 1-65535 - <code>workers</code>: Positive integer - <code>timeout</code>: Positive integer</p>"},{"location":"site/api/config-schema/#standards-configuration","title":"Standards Configuration","text":""},{"location":"site/api/config-schema/#standards","title":"<code>standards</code>","text":"<p>Standards repository and caching settings.</p> <pre><code>standards:\n  repository_url: string     # Git repository URL\n  branch: string            # Git branch to use\n  local_directory: string   # Local standards path\n  sync_interval: integer    # Auto-sync interval (seconds)\n  auto_sync: boolean        # Enable automatic syncing\n  cache_directory: string   # Cache directory path\n  cache_ttl: integer        # Cache TTL (seconds)\n  max_cache_size: string    # Maximum cache size\n  exclude_patterns: [string] # Exclusion patterns\n</code></pre> <p>Default values: <pre><code>standards:\n  repository_url: \"https://github.com/williamzujkowski/standards\"\n  branch: \"main\"\n  local_directory: null\n  sync_interval: 3600\n  auto_sync: true\n  cache_directory: \"~/.mcp-standards/cache\"\n  cache_ttl: 3600\n  max_cache_size: \"1GB\"\n  exclude_patterns: []\n</code></pre></p>"},{"location":"site/api/config-schema/#standardsredis","title":"<code>standards.redis</code>","text":"<p>Redis cache configuration (optional).</p> <pre><code>standards:\n  redis:\n    enabled: boolean    # Enable Redis caching\n    host: string       # Redis server host\n    port: integer      # Redis server port\n    db: integer        # Redis database number\n    password: string   # Redis password\n    ssl: boolean       # Use SSL connection\n    timeout: integer   # Connection timeout\n</code></pre> <p>Default values: <pre><code>standards:\n  redis:\n    enabled: false\n    host: \"localhost\"\n    port: 6379\n    db: 0\n    password: null\n    ssl: false\n    timeout: 5\n</code></pre></p>"},{"location":"site/api/config-schema/#validation-configuration","title":"Validation Configuration","text":""},{"location":"site/api/config-schema/#validation","title":"<code>validation</code>","text":"<p>Code validation behavior settings.</p> <pre><code>validation:\n  auto_fix: boolean          # Enable automatic fixes\n  severity_level: string     # Minimum severity (error|warning|info)\n  output_format: string      # Default output format\n  max_file_size: string      # Maximum file size to validate\n  exclude_patterns: [string] # Files to exclude\n  include_patterns: [string] # Files to include\n  parallel_jobs: integer     # Number of parallel validation jobs\n  timeout_per_file: integer  # Timeout per file (seconds)\n</code></pre> <p>Default values: <pre><code>validation:\n  auto_fix: false\n  severity_level: \"warning\"\n  output_format: \"text\"\n  max_file_size: \"10MB\"\n  exclude_patterns:\n    - \"**/node_modules/**\"\n    - \"**/*.min.js\"\n    - \"**/dist/**\"\n    - \"**/build/**\"\n  include_patterns: []\n  parallel_jobs: 4\n  timeout_per_file: 30\n</code></pre></p>"},{"location":"site/api/config-schema/#validationlanguages","title":"<code>validation.languages</code>","text":"<p>Language-specific validation settings.</p> <pre><code>validation:\n  languages:\n    python:\n      enabled: boolean\n      standards: [string]  # Default standards for Python\n      file_extensions: [string]\n      max_line_length: integer\n    javascript:\n      enabled: boolean\n      standards: [string]\n      file_extensions: [string]\n      node_modules_path: string\n    typescript:\n      enabled: boolean\n      standards: [string]\n      file_extensions: [string]\n      tsconfig_path: string\n    go:\n      enabled: boolean\n      standards: [string]\n      file_extensions: [string]\n      go_mod_path: string\n    rust:\n      enabled: boolean\n      standards: [string]\n      file_extensions: [string]\n      cargo_toml_path: string\n</code></pre>"},{"location":"site/api/config-schema/#logging-configuration","title":"Logging Configuration","text":""},{"location":"site/api/config-schema/#logging","title":"<code>logging</code>","text":"<p>Logging behavior and output settings.</p> <pre><code>logging:\n  level: string              # Log level (DEBUG|INFO|WARNING|ERROR)\n  file: string               # Log file path\n  max_file_size: string      # Maximum log file size\n  backup_count: integer      # Number of backup files\n  format: string             # Log format string\n  date_format: string        # Date format string\n  enable_colors: boolean     # Enable colored output\n  log_requests: boolean      # Log HTTP requests\n  log_validation_details: boolean # Log detailed validation info\n</code></pre> <p>Default values: <pre><code>logging:\n  level: \"INFO\"\n  file: \"~/.mcp-standards/mcp-server.log\"\n  max_file_size: \"10MB\"\n  backup_count: 5\n  format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n  date_format: \"%Y-%m-%d %H:%M:%S\"\n  enable_colors: true\n  log_requests: false\n  log_validation_details: false\n</code></pre></p>"},{"location":"site/api/config-schema/#performance-configuration","title":"Performance Configuration","text":""},{"location":"site/api/config-schema/#performance","title":"<code>performance</code>","text":"<p>Performance tuning settings.</p> <pre><code>performance:\n  max_workers: integer       # Maximum worker threads\n  batch_size: integer        # Batch processing size\n  memory_limit: string       # Memory limit per process\n  cpu_limit: float          # CPU limit (0.0-1.0)\n  gc_threshold: float       # Garbage collection threshold\n  enable_profiling: boolean # Enable performance profiling\n  profile_output: string    # Profiling output directory\n</code></pre> <p>Default values: <pre><code>performance:\n  max_workers: 4\n  batch_size: 100\n  memory_limit: \"1GB\"\n  cpu_limit: 0.8\n  gc_threshold: 0.7\n  enable_profiling: false\n  profile_output: \"~/.mcp-standards/profiles\"\n</code></pre></p>"},{"location":"site/api/config-schema/#monitoring-configuration","title":"Monitoring Configuration","text":""},{"location":"site/api/config-schema/#monitoring","title":"<code>monitoring</code>","text":"<p>Monitoring and metrics settings.</p> <pre><code>monitoring:\n  enabled: boolean          # Enable monitoring\n  metrics_port: integer     # Prometheus metrics port\n  metrics_path: string      # Metrics endpoint path\n  health_check_enabled: boolean # Enable health checks\n  health_check_port: integer    # Health check port\n  health_check_path: string     # Health check endpoint\n  telemetry_enabled: boolean    # Enable telemetry collection\n  telemetry_endpoint: string    # Telemetry endpoint URL\n</code></pre> <p>Default values: <pre><code>monitoring:\n  enabled: false\n  metrics_port: 9090\n  metrics_path: \"/metrics\"\n  health_check_enabled: true\n  health_check_port: 8080\n  health_check_path: \"/health\"\n  telemetry_enabled: false\n  telemetry_endpoint: null\n</code></pre></p>"},{"location":"site/api/config-schema/#security-configuration","title":"Security Configuration","text":""},{"location":"site/api/config-schema/#security","title":"<code>security</code>","text":"<p>Security and authentication settings.</p> <pre><code>security:\n  authentication:\n    enabled: boolean        # Enable authentication\n    method: string         # Auth method (api_key|jwt|oauth)\n    api_key: string        # API key for authentication\n    jwt_secret: string     # JWT signing secret\n    token_expiry: integer  # Token expiry time (seconds)\n  authorization:\n    enabled: boolean       # Enable authorization\n    roles: object         # Role definitions\n  rate_limiting:\n    enabled: boolean       # Enable rate limiting\n    requests_per_minute: integer # Request limit per minute\n    burst_size: integer    # Burst size allowance\n  ssl:\n    enabled: boolean       # Enable SSL/TLS\n    cert_file: string     # SSL certificate file\n    key_file: string      # SSL private key file\n    ca_file: string       # CA certificate file\n</code></pre> <p>Default values: <pre><code>security:\n  authentication:\n    enabled: false\n    method: \"api_key\"\n    api_key: null\n    jwt_secret: null\n    token_expiry: 86400\n  authorization:\n    enabled: false\n    roles: {}\n  rate_limiting:\n    enabled: false\n    requests_per_minute: 100\n    burst_size: 20\n  ssl:\n    enabled: false\n    cert_file: null\n    key_file: null\n    ca_file: null\n</code></pre></p>"},{"location":"site/api/config-schema/#integration-configuration","title":"Integration Configuration","text":""},{"location":"site/api/config-schema/#integrations","title":"<code>integrations</code>","text":"<p>External service integrations.</p> <pre><code>integrations:\n  github:\n    enabled: boolean       # Enable GitHub integration\n    token: string         # GitHub personal access token\n    organization: string  # GitHub organization\n    webhook_secret: string # Webhook secret\n  slack:\n    enabled: boolean      # Enable Slack integration\n    webhook_url: string   # Slack webhook URL\n    channel: string       # Default Slack channel\n  email:\n    enabled: boolean      # Enable email notifications\n    smtp_host: string     # SMTP server host\n    smtp_port: integer    # SMTP server port\n    username: string      # SMTP username\n    password: string      # SMTP password\n    from_address: string  # From email address\n</code></pre>"},{"location":"site/api/config-schema/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<p>Any configuration value can be overridden using environment variables with the prefix <code>MCP_</code>:</p> <pre><code># Server configuration\nMCP_SERVER_HOST=127.0.0.1\nMCP_SERVER_PORT=8081\n\n# Standards configuration\nMCP_STANDARDS_REPOSITORY_URL=https://github.com/custom/standards\nMCP_STANDARDS_CACHE_DIRECTORY=/custom/cache\n\n# Validation configuration\nMCP_VALIDATION_AUTO_FIX=true\nMCP_VALIDATION_SEVERITY_LEVEL=error\n\n# Nested values use double underscores\nMCP_STANDARDS__REDIS__ENABLED=true\nMCP_STANDARDS__REDIS__HOST=redis.example.com\n</code></pre>"},{"location":"site/api/config-schema/#validation-rules","title":"Validation Rules","text":""},{"location":"site/api/config-schema/#data-types","title":"Data Types","text":"<ul> <li>string: Text values, support environment variable substitution</li> <li>integer: Whole numbers</li> <li>float: Decimal numbers</li> <li>boolean: true/false values</li> <li>array: List of values</li> <li>object: Nested configuration</li> </ul>"},{"location":"site/api/config-schema/#size-formats","title":"Size Formats","text":"<p>Size values support human-readable formats: - <code>1024</code> (bytes) - <code>1KB</code>, <code>1MB</code>, <code>1GB</code>, <code>1TB</code> - <code>1K</code>, <code>1M</code>, <code>1G</code>, <code>1T</code> (binary)</p>"},{"location":"site/api/config-schema/#time-formats","title":"Time Formats","text":"<p>Time values support various formats: - <code>30</code> (seconds) - <code>30s</code> (seconds) - <code>5m</code> (minutes) - <code>1h</code> (hours) - <code>1d</code> (days)</p>"},{"location":"site/api/config-schema/#path-expansion","title":"Path Expansion","text":"<p>Paths support tilde expansion: - <code>~/</code> expands to user home directory - <code>$HOME/</code> expands to home directory - Environment variables: <code>$CACHE_DIR/path</code></p>"},{"location":"site/api/config-schema/#configuration-validation","title":"Configuration Validation","text":"<p>Validate configuration file:</p> <pre><code># Validate current configuration\nmcp-standards config validate\n\n# Validate specific file\nmcp-standards config validate --config custom-config.yaml\n\n# Show validation errors in detail\nmcp-standards config validate --verbose\n</code></pre>"},{"location":"site/api/config-schema/#example-configurations","title":"Example Configurations","text":""},{"location":"site/api/config-schema/#development-environment","title":"Development Environment","text":"<pre><code>server:\n  host: \"127.0.0.1\"\n  port: 8080\n  enable_cors: true\n\nstandards:\n  auto_sync: true\n  sync_interval: 300  # 5 minutes\n\nvalidation:\n  auto_fix: true\n  severity_level: \"info\"\n\nlogging:\n  level: \"DEBUG\"\n  log_validation_details: true\n\nperformance:\n  enable_profiling: true\n</code></pre>"},{"location":"site/api/config-schema/#production-environment","title":"Production Environment","text":"<pre><code>server:\n  host: \"0.0.0.0\"\n  port: 80\n  workers: 4\n  enable_cors: false\n\nstandards:\n  sync_interval: 3600  # 1 hour\n  redis:\n    enabled: true\n    host: \"redis.internal\"\n\nvalidation:\n  auto_fix: false\n  severity_level: \"error\"\n  parallel_jobs: 8\n\nlogging:\n  level: \"INFO\"\n  log_requests: true\n\nsecurity:\n  authentication:\n    enabled: true\n    method: \"api_key\"\n  rate_limiting:\n    enabled: true\n    requests_per_minute: 1000\n\nmonitoring:\n  enabled: true\n  telemetry_enabled: true\n</code></pre>"},{"location":"site/api/config-schema/#cicd-environment","title":"CI/CD Environment","text":"<pre><code>server:\n  host: \"0.0.0.0\"\n  port: 8080\n  timeout: 60\n\nstandards:\n  auto_sync: false  # Use pre-synced standards\n  cache_directory: \"/tmp/mcp-cache\"\n\nvalidation:\n  auto_fix: false\n  output_format: \"sarif\"\n  parallel_jobs: 2\n  timeout_per_file: 10\n\nlogging:\n  level: \"WARNING\"\n  file: \"/dev/stdout\"\n\nperformance:\n  memory_limit: \"512MB\"\n  cpu_limit: 0.5\n</code></pre> <p>For more configuration examples and troubleshooting, see the Configuration Guide.</p>"},{"location":"site/api/mcp-tools/","title":"MCP Tools Reference","text":"<p>The MCP Standards Server exposes several tools through the Model Context Protocol, enabling AI assistants and development tools to interact with standards programmatically.</p> <p>Note: This documentation covers the primary tools most commonly used. The actual MCP server implementation includes additional tools for advanced features like token optimization, cross-referencing, and analytics. See the source code at <code>src/mcp_server.py</code> for the complete list of 20+ available tools.</p>"},{"location":"site/api/mcp-tools/#primary-tools","title":"Primary Tools","text":"<p>These are the most commonly used tools for interacting with standards:</p>"},{"location":"site/api/mcp-tools/#1-get_applicable_standards","title":"1. get_applicable_standards","text":"<p>Retrieve standards applicable to a given project context.</p>"},{"location":"site/api/mcp-tools/#parameters","title":"Parameters","text":"<pre><code>{\n  context: {\n    project_type?: string;        // \"web-application\" | \"api\" | \"cli\" | \"library\" | \"mobile\" | \"desktop\"\n    languages?: string[];         // [\"javascript\", \"python\", \"go\", ...]\n    frameworks?: string[];        // [\"react\", \"django\", \"express\", ...]\n    requirements?: string[];      // [\"accessibility\", \"security\", \"performance\", ...]\n    infrastructure?: string[];    // [\"docker\", \"kubernetes\", \"aws\", ...]\n    team_size?: string;          // \"small\" | \"medium\" | \"large\"\n    compliance?: string[];       // [\"pci-dss\", \"gdpr\", \"hipaa\", ...]\n  };\n  include_resolution_details?: boolean;  // Include why standards were selected\n  format?: \"full\" | \"condensed\" | \"reference\";\n  token_budget?: number;        // Maximum tokens for response\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#response","title":"Response","text":"<pre><code>{\n  standards: [\n    {\n      id: string;\n      file: string;\n      title: string;\n      tags: string[];\n      priority: \"HIGH\" | \"MEDIUM\" | \"LOW\";\n      relevance_score: number;\n      summary: string;\n      content?: string;  // If requested\n      reason?: string;   // If include_resolution_details is true\n    }\n  ];\n  resolution_details?: {\n    rules_applied: string[];\n    context_matches: object;\n    priority_ordering: string[];\n  };\n  metadata: {\n    total_standards: number;\n    query_time_ms: number;\n    cache_hit: boolean;\n    token_count?: number;\n  };\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#example-usage","title":"Example Usage","text":"<pre><code>{\n  \"tool\": \"get_applicable_standards\",\n  \"arguments\": {\n    \"context\": {\n      \"project_type\": \"web-application\",\n      \"frameworks\": [\"react\", \"nextjs\"],\n      \"languages\": [\"typescript\"],\n      \"requirements\": [\"accessibility\", \"performance\"]\n    },\n    \"include_resolution_details\": true,\n    \"format\": \"condensed\",\n    \"token_budget\": 4000\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#2-validate_code","title":"2. validate_code","text":"<p>Validate code snippet or file against standards.</p>"},{"location":"site/api/mcp-tools/#parameters_1","title":"Parameters","text":"<pre><code>{\n  code?: string;              // Code snippet to validate\n  file_path?: string;         // OR path to file to validate\n  language: string;           // Programming language\n  standards?: string[];       // Specific standards to validate against (optional)\n  fix?: boolean;              // Return fixed code if possible\n  severity?: \"error\" | \"warning\" | \"info\";  // Minimum severity\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#response_1","title":"Response","text":"<pre><code>{\n  valid: boolean;\n  issues: [\n    {\n      line: number;\n      column: number;\n      severity: \"error\" | \"warning\" | \"info\";\n      standard: string;\n      rule: string;\n      message: string;\n      fix?: {\n        description: string;\n        old_code: string;\n        new_code: string;\n      };\n    }\n  ];\n  fixed_code?: string;  // If fix was requested\n  summary: {\n    total_issues: number;\n    errors: number;\n    warnings: number;\n    info: number;\n    fixable: number;\n  };\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#example-usage_1","title":"Example Usage","text":"<pre><code>{\n  \"tool\": \"validate_code\",\n  \"arguments\": {\n    \"code\": \"const Button = ({onClick}) =&gt; &lt;button onClick={onClick}&gt;Click&lt;/button&gt;\",\n    \"language\": \"javascript\",\n    \"standards\": [\"react-18-patterns\", \"wcag-2.2-accessibility\"],\n    \"fix\": true\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#3-search_standards","title":"3. search_standards","text":"<p>Search standards using natural language queries.</p>"},{"location":"site/api/mcp-tools/#parameters_2","title":"Parameters","text":"<pre><code>{\n  query: string;              // Natural language search query\n  limit?: number;             // Maximum results (default: 10)\n  include_content?: boolean;  // Include full content in results\n  filters?: {\n    tags?: string[];          // Filter by tags\n    categories?: string[];    // Filter by categories\n    languages?: string[];     // Filter by applicable languages\n  };\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#response_2","title":"Response","text":"<pre><code>{\n  results: [\n    {\n      id: string;\n      file: string;\n      title: string;\n      relevance: number;        // 0-100 relevance score\n      excerpt: string;          // Relevant excerpt\n      highlights: string[];     // Highlighted matching sections\n      content?: string;         // Full content if requested\n      tags: string[];\n    }\n  ];\n  query_interpretation: {\n    identified_topics: string[];\n    expanded_terms: string[];\n    filters_applied: object;\n  };\n  metadata: {\n    total_results: number;\n    search_time_ms: number;\n    model_used: string;\n  };\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#example-usage_2","title":"Example Usage","text":"<pre><code>{\n  \"tool\": \"search_standards\",\n  \"arguments\": {\n    \"query\": \"How do I implement secure authentication in a Node.js API?\",\n    \"limit\": 5,\n    \"include_content\": true,\n    \"filters\": {\n      \"tags\": [\"security\", \"authentication\"],\n      \"languages\": [\"javascript\", \"nodejs\"]\n    }\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#4-get_standard_content","title":"4. get_standard_content","text":"<p>Retrieve specific standard content with formatting options.</p>"},{"location":"site/api/mcp-tools/#parameters_3","title":"Parameters","text":"<pre><code>{\n  standard_id: string;        // Standard identifier\n  format?: \"full\" | \"condensed\" | \"outline\" | \"examples\";\n  token_budget?: number;      // Maximum tokens\n  sections?: string[];        // Specific sections to include\n  include_examples?: boolean; // Include code examples\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#response_3","title":"Response","text":"<pre><code>{\n  id: string;\n  title: string;\n  content: string;            // Formatted based on request\n  metadata: {\n    version: string;\n    last_updated: string;\n    tags: string[];\n    languages: string[];\n    frameworks: string[];\n  };\n  sections?: {\n    [key: string]: string;\n  };\n  examples?: [\n    {\n      title: string;\n      description: string;\n      code: string;\n      language: string;\n    }\n  ];\n  token_count: number;\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#example-usage_3","title":"Example Usage","text":"<pre><code>{\n  \"tool\": \"get_standard_content\",\n  \"arguments\": {\n    \"standard_id\": \"react-18-patterns\",\n    \"format\": \"condensed\",\n    \"token_budget\": 2000,\n    \"sections\": [\"hooks\", \"performance\"],\n    \"include_examples\": true\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#5-check_compliance","title":"5. check_compliance","text":"<p>Check project or code for compliance with specific requirements.</p>"},{"location":"site/api/mcp-tools/#parameters_4","title":"Parameters","text":"<pre><code>{\n  target: string;             // File path or directory\n  compliance_type: string;    // \"security\" | \"accessibility\" | \"performance\" | \"all\"\n  standards?: string[];       // Specific standards to check against\n  detailed?: boolean;         // Include detailed findings\n  generate_report?: boolean;  // Generate compliance report\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#response_4","title":"Response","text":"<pre><code>{\n  compliant: boolean;\n  score: number;              // 0-100 compliance score\n  findings: {\n    passed: [\n      {\n        standard: string;\n        rule: string;\n        description: string;\n      }\n    ];\n    failed: [\n      {\n        standard: string;\n        rule: string;\n        description: string;\n        severity: string;\n        locations: string[];\n        remediation: string;\n      }\n    ];\n  };\n  summary: {\n    total_checks: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  report_url?: string;        // If report was generated\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#example-usage_4","title":"Example Usage","text":"<pre><code>{\n  \"tool\": \"check_compliance\",\n  \"arguments\": {\n    \"target\": \"/src\",\n    \"compliance_type\": \"accessibility\",\n    \"standards\": [\"wcag-2.2-accessibility\"],\n    \"detailed\": true,\n    \"generate_report\": true\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#additional-tools","title":"Additional Tools","text":"<p>The MCP server includes many additional tools:</p>"},{"location":"site/api/mcp-tools/#standards-management","title":"Standards Management","text":"<ul> <li><code>list_available_standards</code> - List all available standards</li> <li><code>sync_standards</code> - Synchronize standards from repository</li> <li><code>get_sync_status</code> - Check synchronization status</li> </ul>"},{"location":"site/api/mcp-tools/#token-optimization","title":"Token Optimization","text":"<ul> <li><code>get_optimized_standard</code> - Get token-optimized version of standard</li> <li><code>auto_optimize_standards</code> - Automatically optimize based on context</li> <li><code>progressive_load_standard</code> - Load standard progressively</li> <li><code>estimate_token_usage</code> - Estimate tokens for standards</li> </ul>"},{"location":"site/api/mcp-tools/#standards-generation","title":"Standards Generation","text":"<ul> <li><code>generate_standard</code> - Generate new standard from template</li> <li><code>validate_standard</code> - Validate standard structure</li> <li><code>list_templates</code> - List available templates</li> </ul>"},{"location":"site/api/mcp-tools/#cross-references-analytics","title":"Cross-References &amp; Analytics","text":"<ul> <li><code>get_cross_references</code> - Get related standards</li> <li><code>generate_cross_references</code> - Generate cross-reference map</li> <li><code>get_standards_analytics</code> - Get usage analytics</li> <li><code>track_standards_usage</code> - Track standard usage</li> <li><code>get_recommendations</code> - Get personalized recommendations</li> </ul>"},{"location":"site/api/mcp-tools/#code-improvement","title":"Code Improvement","text":"<ul> <li><code>suggest_improvements</code> - Get improvement suggestions based on standards</li> </ul>"},{"location":"site/api/mcp-tools/#error-handling","title":"Error Handling","text":"<p>All tools follow a consistent error response format:</p> <pre><code>{\n  error: {\n    code: string;             // Error code\n    message: string;          // Human-readable message\n    details?: object;         // Additional error details\n    suggestions?: string[];   // Possible solutions\n  };\n}\n</code></pre> <p>Common error codes: - <code>INVALID_PARAMETERS</code>: Missing or invalid parameters - <code>STANDARD_NOT_FOUND</code>: Requested standard doesn't exist - <code>VALIDATION_FAILED</code>: Code validation encountered an error - <code>QUOTA_EXCEEDED</code>: Token budget exceeded - <code>SERVER_ERROR</code>: Internal server error</p>"},{"location":"site/api/mcp-tools/#rate-limiting","title":"Rate Limiting","text":"<p>The MCP server implements rate limiting to ensure fair usage:</p> <ul> <li>Default limit: 60 requests per minute</li> <li>Burst capacity: 100 requests</li> <li>Headers returned:</li> <li><code>X-RateLimit-Limit</code>: Request limit</li> <li><code>X-RateLimit-Remaining</code>: Remaining requests</li> <li><code>X-RateLimit-Reset</code>: Reset timestamp</li> </ul>"},{"location":"site/api/mcp-tools/#authentication","title":"Authentication","text":"<p>Authentication is optional but recommended for production use:</p>"},{"location":"site/api/mcp-tools/#token-authentication","title":"Token Authentication","text":"<pre><code>{\n  \"auth\": {\n    \"type\": \"bearer\",\n    \"token\": \"mcp_token_xxxxxxxxxxxx\"\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#oauth-20","title":"OAuth 2.0","text":"<pre><code>{\n  \"auth\": {\n    \"type\": \"oauth2\",\n    \"access_token\": \"xxxxxxxxxxxx\"\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#websocket-support","title":"WebSocket Support","text":"<p>For real-time validation and streaming responses:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000/mcp');\n\nws.onopen = () =&gt; {\n  ws.send(JSON.stringify({\n    id: '123',\n    tool: 'validate_code',\n    arguments: {\n      code: 'const x = 1;',\n      language: 'javascript',\n      stream: true\n    }\n  }));\n};\n\nws.onmessage = (event) =&gt; {\n  const response = JSON.parse(event.data);\n  // Handle streaming response\n};\n</code></pre>"},{"location":"site/api/mcp-tools/#integration-examples","title":"Integration Examples","text":""},{"location":"site/api/mcp-tools/#claude-desktop","title":"Claude Desktop","text":"<pre><code>{\n  \"mcpServers\": {\n    \"standards\": {\n      \"command\": \"mcp-standards\",\n      \"args\": [\"serve\", \"--stdio\"],\n      \"env\": {\n        \"MCP_STANDARDS_CONFIG\": \"/path/to/config.yaml\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"site/api/mcp-tools/#custom-client","title":"Custom Client","text":"<pre><code>import json\nimport subprocess\n\nclass MCPStandardsClient:\n    def __init__(self):\n        self.process = subprocess.Popen(\n            ['mcp-standards', 'serve', '--stdio'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n\n    def call_tool(self, tool_name, arguments):\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": f\"tools/{tool_name}\",\n            \"params\": arguments\n        }\n\n        self.process.stdin.write(json.dumps(request) + '\\n')\n        self.process.stdin.flush()\n\n        response = self.process.stdout.readline()\n        return json.loads(response)\n\n# Usage\nclient = MCPStandardsClient()\nresult = client.call_tool('get_applicable_standards', {\n    'context': {\n        'project_type': 'api',\n        'languages': ['python']\n    }\n})\n</code></pre>"},{"location":"site/api/mcp-tools/#best-practices","title":"Best Practices","text":"<ol> <li>Use token budgets to control response size</li> <li>Cache responses when possible to reduce API calls</li> <li>Batch related queries for better performance</li> <li>Handle errors gracefully with fallback behavior</li> <li>Specify context for more accurate results</li> <li>Use streaming for large responses</li> <li>Implement retries for transient failures</li> </ol>"},{"location":"site/api/mcp-tools/#performance-tips","title":"Performance Tips","text":"<ul> <li>Warm cache: Pre-sync standards for better performance</li> <li>Use condensed format: When full content isn't needed</li> <li>Filter results: Use specific tags and filters</li> <li>Parallel requests: Tools support concurrent calls</li> <li>Connection pooling: Reuse connections for multiple requests</li> </ul>"},{"location":"site/api/mcp-tools/#versioning","title":"Versioning","text":"<p>The MCP API follows semantic versioning:</p> <ul> <li>v1: Current stable version</li> <li>Breaking changes: Will increment major version</li> <li>New tools: Will increment minor version</li> <li>Bug fixes: Will increment patch version</li> </ul> <p>Check version compatibility:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"mcp/version\",\n  \"id\": 1\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"version\": \"1.0.0\",\n    \"protocol_version\": \"2024-11-05\",\n    \"capabilities\": [\"tools\", \"streaming\", \"websocket\"]\n  },\n  \"id\": 1\n}\n</code></pre></p>"},{"location":"site/api/standards-format/","title":"Standards Format Specification","text":"<p>This document defines the JSON/YAML format for MCP standards files.</p>"},{"location":"site/api/standards-format/#standard-structure","title":"Standard Structure","text":"<pre><code>standard:\n  id: \"unique-standard-id\"\n  name: \"Human Readable Standard Name\"\n  version: \"1.0.0\"\n  category: \"coding|testing|security|architecture\"\n  description: \"Brief description of the standard\"\n\nmetadata:\n  author: \"Author Name\"\n  created: \"2024-01-01\"\n  updated: \"2024-01-15\"\n  tags: [\"tag1\", \"tag2\"]\n  compliance:\n    - \"NIST-800-53-AC-2\"\n    - \"ISO-27001-A.9\"\n\napplicability:\n  project_types: [\"web\", \"api\", \"mobile\"]\n  languages: [\"python\", \"javascript\", \"go\"]\n  frameworks: [\"react\", \"django\", \"fastapi\"]\n\nrules:\n  - id: \"rule-1\"\n    description: \"Rule description\"\n    severity: \"error|warning|info\"\n    pattern: \"regex or code pattern\"\n\nexamples:\n  good:\n    - description: \"Good example description\"\n      code: |\n        # Example code\n  bad:\n    - description: \"Bad example description\"\n      code: |\n        # Example code\n</code></pre>"},{"location":"site/api/standards-format/#field-definitions","title":"Field Definitions","text":""},{"location":"site/api/standards-format/#required-fields","title":"Required Fields","text":"<ul> <li>id: Unique identifier for the standard</li> <li>name: Human-readable name</li> <li>version: Semantic version (X.Y.Z)</li> <li>category: Primary category</li> <li>description: Clear description of the standard's purpose</li> </ul>"},{"location":"site/api/standards-format/#optional-fields","title":"Optional Fields","text":"<ul> <li>metadata: Additional information about the standard</li> <li>applicability: Conditions for when the standard applies</li> <li>rules: Specific validation rules</li> <li>examples: Code examples demonstrating compliance</li> </ul>"},{"location":"site/api/standards-format/#validation-rules","title":"Validation Rules","text":"<ol> <li>All required fields must be present</li> <li>Version must follow semantic versioning</li> <li>Category must be from predefined list</li> <li>Rules must have unique IDs within the standard</li> </ol>"},{"location":"site/api/standards-format/#file-naming-convention","title":"File Naming Convention","text":"<p>Standards files should follow the pattern: <pre><code>{CATEGORY}_{STANDARD_NAME}_STANDARDS.yaml\n</code></pre></p> <p>Example: <code>CODING_PYTHON_ASYNC_STANDARDS.yaml</code></p>"},{"location":"site/api/standards-format/#related-documentation","title":"Related Documentation","text":"<ul> <li>Validation Rules</li> <li>Creating Standards Guide</li> <li>Standards Engine</li> </ul>"},{"location":"site/api/validation-rules/","title":"Validation Rules API","text":"<p>This document describes the validation rules system and how to define custom validation logic.</p>"},{"location":"site/api/validation-rules/#overview","title":"Overview","text":"<p>Validation rules define how code is checked against standards. Each rule can use pattern matching, AST analysis, or custom validators.</p>"},{"location":"site/api/validation-rules/#rule-types","title":"Rule Types","text":""},{"location":"site/api/validation-rules/#1-pattern-based-rules","title":"1. Pattern-Based Rules","text":"<p>Simple regex or string pattern matching.</p> <pre><code>rules:\n  - id: \"no-console-log\"\n    type: \"pattern\"\n    pattern: \"console\\\\.log\\\\(\"\n    message: \"Remove console.log statements\"\n    severity: \"warning\"\n</code></pre>"},{"location":"site/api/validation-rules/#2-ast-based-rules","title":"2. AST-Based Rules","text":"<p>Abstract Syntax Tree analysis for deeper code understanding.</p> <pre><code>rules:\n  - id: \"no-unused-vars\"\n    type: \"ast\"\n    ast_query: \"//VariableDeclarator[not(referenced)]\"\n    message: \"Variable '${name}' is declared but never used\"\n    severity: \"error\"\n</code></pre>"},{"location":"site/api/validation-rules/#3-custom-validators","title":"3. Custom Validators","text":"<p>Python-based custom validation logic.</p> <pre><code>from src.core.validation import BaseValidator\n\nclass SecurityValidator(BaseValidator):\n    def validate(self, code: str, context: dict) -&gt; list:\n        violations = []\n        # Custom validation logic\n        return violations\n</code></pre>"},{"location":"site/api/validation-rules/#severity-levels","title":"Severity Levels","text":"<ul> <li>error: Must fix - blocks deployment</li> <li>warning: Should fix - quality issue</li> <li>info: Consider fixing - best practice</li> </ul>"},{"location":"site/api/validation-rules/#rule-configuration","title":"Rule Configuration","text":"<pre><code>rules:\n  - id: \"rule-id\"\n    enabled: true\n    severity: \"error\"\n    options:\n      max_length: 80\n      exceptions: [\"test_*\"]\n</code></pre>"},{"location":"site/api/validation-rules/#built-in-validators","title":"Built-in Validators","text":""},{"location":"site/api/validation-rules/#security-validators","title":"Security Validators","text":"<ul> <li>SQL injection detection</li> <li>XSS vulnerability scanning</li> <li>Hardcoded secrets detection</li> </ul>"},{"location":"site/api/validation-rules/#code-quality-validators","title":"Code Quality Validators","text":"<ul> <li>Complexity analysis</li> <li>Naming conventions</li> <li>Documentation coverage</li> </ul>"},{"location":"site/api/validation-rules/#performance-validators","title":"Performance Validators","text":"<ul> <li>N+1 query detection</li> <li>Memory leak patterns</li> <li>Inefficient algorithms</li> </ul>"},{"location":"site/api/validation-rules/#custom-validator-api","title":"Custom Validator API","text":"<pre><code>class CustomValidator:\n    def __init__(self, options: dict):\n        self.options = options\n\n    def validate(self, file_path: str) -&gt; ValidationResult:\n        # Implementation\n        pass\n</code></pre>"},{"location":"site/api/validation-rules/#validation-result-format","title":"Validation Result Format","text":"<pre><code>{\n  \"violations\": [\n    {\n      \"rule_id\": \"no-console-log\",\n      \"file\": \"src/app.js\",\n      \"line\": 42,\n      \"column\": 5,\n      \"severity\": \"warning\",\n      \"message\": \"Remove console.log statements\",\n      \"suggestion\": \"Use proper logging framework\"\n    }\n  ],\n  \"summary\": {\n    \"total\": 1,\n    \"errors\": 0,\n    \"warnings\": 1,\n    \"info\": 0\n  }\n}\n</code></pre>"},{"location":"site/api/validation-rules/#related-documentation","title":"Related Documentation","text":"<ul> <li>Standards Format</li> <li>Writing Custom Validators</li> <li>Validation Examples</li> </ul>"},{"location":"site/architecture/mcp-integration/","title":"MCP Integration Architecture","text":"<p>This document describes how the MCP Standards Server integrates with the Model Context Protocol to provide standards as accessible tools for LLMs.</p>"},{"location":"site/architecture/mcp-integration/#overview","title":"Overview","text":"<p>The MCP integration layer exposes standards functionality through standardized tool interfaces, enabling seamless integration with LLM applications.</p>"},{"location":"site/architecture/mcp-integration/#core-mcp-tools","title":"Core MCP Tools","text":""},{"location":"site/architecture/mcp-integration/#1-get_applicable_standards","title":"1. get_applicable_standards","text":"<p>Retrieves relevant standards based on project context.</p> <pre><code>{\n  \"name\": \"get_applicable_standards\",\n  \"parameters\": {\n    \"project_type\": \"string\",\n    \"frameworks\": [\"array\", \"of\", \"strings\"],\n    \"requirements\": [\"array\", \"of\", \"requirements\"]\n  }\n}\n</code></pre>"},{"location":"site/architecture/mcp-integration/#2-validate_against_standard","title":"2. validate_against_standard","text":"<p>Validates code against specific standards.</p> <pre><code>{\n  \"name\": \"validate_against_standard\",\n  \"parameters\": {\n    \"code_path\": \"string\",\n    \"standard_id\": \"string\",\n    \"options\": {}\n  }\n}\n</code></pre>"},{"location":"site/architecture/mcp-integration/#3-suggest_improvements","title":"3. suggest_improvements","text":"<p>Provides improvement recommendations based on standards.</p>"},{"location":"site/architecture/mcp-integration/#protocol-implementation","title":"Protocol Implementation","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     MCP Protocol    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 LLM Client  \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  MCP Server  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                            \u2502\n                                            \u25bc\n                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                    \u2502   Handlers   \u2502\n                                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/mcp-integration/#security-considerations","title":"Security Considerations","text":"<ul> <li>Authentication via API keys</li> <li>Rate limiting per client</li> <li>Input validation and sanitization</li> </ul>"},{"location":"site/architecture/mcp-integration/#error-handling","title":"Error Handling","text":"<ul> <li>Graceful degradation</li> <li>Detailed error messages</li> <li>Retry mechanisms</li> </ul>"},{"location":"site/architecture/mcp-integration/#implementation","title":"Implementation","text":"<p>See src/core/mcp/ for the MCP server implementation.</p>"},{"location":"site/architecture/mcp-integration/#related-documentation","title":"Related Documentation","text":"<ul> <li>MCP Tools Reference</li> <li>Standards Engine</li> <li>Security Configuration</li> </ul>"},{"location":"site/architecture/overview/","title":"Architecture Overview","text":"<p>Comprehensive overview of MCP Standards Server architecture and design principles.</p>"},{"location":"site/architecture/overview/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Client Layer                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   IDE Plugins   \u2502   CLI Tools     \u2502   CI/CD Integrations       \u2502\n\u2502   (VS Code,     \u2502   (mcp-std)     \u2502   (GitHub Actions,         \u2502\n\u2502    JetBrains)   \u2502                 \u2502    GitLab CI, Jenkins)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    MCP Protocol Layer                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2022 Tool Registration     \u2022 Message Routing                     \u2502\n\u2502  \u2022 Schema Validation     \u2022 Error Handling                      \u2502\n\u2502  \u2022 Authentication        \u2022 Request/Response Management         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      API Gateway                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2022 Rate Limiting         \u2022 CORS Handling                       \u2502\n\u2502  \u2022 Request Validation    \u2022 Response Formatting                 \u2502\n\u2502  \u2022 Metrics Collection    \u2022 Health Checks                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Business Logic Layer                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Standards \u2502   Validation    \u2502   Rule Engine   \u2502   Analytics     \u2502\n\u2502   Engine    \u2502   Engine        \u2502                 \u2502   Engine        \u2502\n\u2502             \u2502                 \u2502                 \u2502                 \u2502\n\u2502 \u2022 Discovery \u2502 \u2022 Multi-lang    \u2502 \u2022 Condition     \u2502 \u2022 Usage Stats   \u2502\n\u2502 \u2022 Selection \u2502   Analysis      \u2502   Evaluation    \u2502 \u2022 Performance   \u2502\n\u2502 \u2022 Metadata  \u2502 \u2022 Auto-fix      \u2502 \u2022 Priority      \u2502 \u2022 Reporting     \u2502\n\u2502 \u2022 Caching   \u2502 \u2022 Reporting     \u2502   Resolution    \u2502 \u2022 Trends        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Storage Layer                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Standards  \u2502   Cache Layer   \u2502   Config Store  \u2502   Analytics DB  \u2502\n\u2502  Repository \u2502                 \u2502                 \u2502                 \u2502\n\u2502             \u2502 \u2022 Redis (L1)    \u2502 \u2022 YAML Files    \u2502 \u2022 SQLite        \u2502\n\u2502 \u2022 Git Repo  \u2502 \u2022 File (L2)     \u2502 \u2022 Env Vars      \u2502 \u2022 Metrics       \u2502\n\u2502 \u2022 Local Dir \u2502 \u2022 Memory (Hot)  \u2502 \u2022 Validation    \u2502 \u2022 Audit Logs    \u2502\n\u2502 \u2022 Sync Mgmt \u2502 \u2022 Compression   \u2502 \u2022 Defaults      \u2502 \u2022 Performance   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/overview/#core-components","title":"Core Components","text":""},{"location":"site/architecture/overview/#1-mcp-server-core","title":"1. MCP Server Core","text":"<p>The central component implementing the Model Context Protocol specification.</p> <p>Key responsibilities: - Protocol message handling - Tool registration and discovery - Client connection management - Authentication and authorization - Error handling and recovery</p> <p>Implementation files: - <code>src/mcp_server.py</code> - Main server implementation - <code>src/core/mcp/</code> - MCP protocol handlers - <code>src/core/mcp/tools/</code> - MCP tool implementations</p>"},{"location":"site/architecture/overview/#2-standards-engine","title":"2. Standards Engine","text":"<p>Manages standards repository, discovery, and selection logic.</p> <p>Key features: - Standards Discovery: Automatic detection of applicable standards - Metadata Management: Standards metadata and relationships - Rule-based Selection: Intelligent standard selection using rules - Semantic Search: Content-based standard discovery - Caching: Multi-tier caching for performance</p> <p>Implementation files: - <code>src/core/standards/engine.py</code> - Main engine - <code>src/core/standards/rule_engine.py</code> - Rule evaluation - <code>src/core/standards/semantic_search.py</code> - Semantic search - <code>src/core/standards/sync.py</code> - Repository synchronization</p>"},{"location":"site/architecture/overview/#3-validation-engine","title":"3. Validation Engine","text":"<p>Multi-language code analysis and validation system.</p> <p>Supported languages: - Python (AST analysis, PEP compliance) - JavaScript/TypeScript (ESLint integration, patterns) - Go (go vet, golint integration) - Java (PMD, SpotBugs integration) - Rust (clippy integration)</p> <p>Key features: - Multi-language Analysis: Language-specific analyzers - Auto-fix Capabilities: Automatic issue resolution - Incremental Validation: Only validate changed code - Parallel Processing: Concurrent file analysis - Custom Rules: User-defined validation rules</p> <p>Implementation files: - <code>src/analyzers/</code> - Language-specific analyzers - <code>src/core/validation/</code> - Validation engine core</p>"},{"location":"site/architecture/overview/#4-cache-layer","title":"4. Cache Layer","text":"<p>Multi-tier caching system for optimal performance.</p> <p>Cache Architecture: <pre><code>L0: Memory Cache (Hot Data)\n\u251c\u2500\u2500 Recently accessed standards\n\u251c\u2500\u2500 Parsed rule trees\n\u2514\u2500\u2500 Active validation results\n\nL1: Redis Cache (Warm Data)\n\u251c\u2500\u2500 Standards metadata\n\u251c\u2500\u2500 Search indexes\n\u2514\u2500\u2500 User sessions\n\nL2: File Cache (Cold Data)\n\u251c\u2500\u2500 Full standards content\n\u251c\u2500\u2500 Compiled rules\n\u2514\u2500\u2500 Historical analytics\n</code></pre></p> <p>Features: - Smart Eviction: LRU with priority weighting - Compression: Gzip compression for large data - TTL Management: Configurable time-to-live - Cache Warming: Pre-populate frequently used data</p>"},{"location":"site/architecture/overview/#5-rule-engine","title":"5. Rule Engine","text":"<p>Condition-based standards selection and validation rules.</p> <p>Rule Types: - Project Type Rules: Web app, API, CLI, library - Language Rules: Python, JavaScript, Go, etc. - Framework Rules: React, Django, Express, etc. - Requirement Rules: Security, accessibility, performance - Context Rules: File type, directory structure</p> <p>Rule Evaluation: <pre><code># Example rule structure\nrule = {\n    \"id\": \"react-typescript-web-app\",\n    \"conditions\": {\n        \"project_type\": [\"web_application\"],\n        \"framework\": [\"react\"],\n        \"language\": [\"typescript\"]\n    },\n    \"standards\": [\"react-patterns\", \"typescript-strict\"],\n    \"priority\": 10\n}\n</code></pre></p>"},{"location":"site/architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"site/architecture/overview/#1-standards-synchronization","title":"1. Standards Synchronization","text":"<pre><code>1. Timer/Manual Trigger\n   \u2193\n2. Git Repository Check\n   \u2193\n3. Download New/Changed Standards\n   \u2193\n4. Parse and Validate\n   \u2193\n5. Update Cache\n   \u2193\n6. Notify Clients\n</code></pre>"},{"location":"site/architecture/overview/#2-standard-selection","title":"2. Standard Selection","text":"<pre><code>1. Client Request (project context)\n   \u2193\n2. Rule Engine Evaluation\n   \u2193\n3. Semantic Search (if needed)\n   \u2193\n4. Priority Resolution\n   \u2193\n5. Cache Result\n   \u2193\n6. Return Applicable Standards\n</code></pre>"},{"location":"site/architecture/overview/#3-code-validation","title":"3. Code Validation","text":"<pre><code>1. Validation Request\n   \u2193\n2. Language Detection\n   \u2193\n3. Standard Selection\n   \u2193\n4. File Analysis (Parallel)\n   \u2193\n5. Rule Application\n   \u2193\n6. Auto-fix (if enabled)\n   \u2193\n7. Result Aggregation\n   \u2193\n8. Report Generation\n</code></pre>"},{"location":"site/architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"site/architecture/overview/#1-modularity","title":"1. Modularity","text":"<ul> <li>Loose Coupling: Components communicate through well-defined interfaces</li> <li>Plugin Architecture: Extensible analyzer and validator system</li> <li>Configuration-Driven: Behavior controlled through configuration</li> <li>Language Agnostic: Core engine independent of specific languages</li> </ul>"},{"location":"site/architecture/overview/#2-performance","title":"2. Performance","text":"<ul> <li>Lazy Loading: Load standards and rules on-demand</li> <li>Caching Strategy: Multi-tier caching with intelligent eviction</li> <li>Parallel Processing: Concurrent validation and analysis</li> <li>Resource Management: Memory and CPU usage optimization</li> </ul>"},{"location":"site/architecture/overview/#3-scalability","title":"3. Scalability","text":"<ul> <li>Horizontal Scaling: Multiple server instances with shared cache</li> <li>Asynchronous Processing: Non-blocking I/O operations</li> <li>Resource Pooling: Connection and worker thread pools</li> <li>Load Balancing: Distribute requests across instances</li> </ul>"},{"location":"site/architecture/overview/#4-reliability","title":"4. Reliability","text":"<ul> <li>Graceful Degradation: Fallback when external services fail</li> <li>Error Recovery: Automatic retry with exponential backoff</li> <li>Health Monitoring: Comprehensive health checks and metrics</li> <li>Data Consistency: Atomic operations and transaction safety</li> </ul>"},{"location":"site/architecture/overview/#5-extensibility","title":"5. Extensibility","text":"<ul> <li>Plugin System: Add new analyzers and validators</li> <li>Custom Standards: Support for organization-specific standards</li> <li>API Versioning: Backward compatibility maintenance</li> <li>Integration Points: Hooks for external systems</li> </ul>"},{"location":"site/architecture/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"site/architecture/overview/#1-authentication-authorization","title":"1. Authentication &amp; Authorization","text":"<pre><code>Client Request\n   \u2193\nAPI Key Validation\n   \u2193\nRole-Based Access Control\n   \u2193\nResource Permissions Check\n   \u2193\nRequest Processing\n</code></pre> <p>Security measures: - API Key Management: Secure key generation and rotation - JWT Tokens: Stateless authentication with expiration - Role-Based Access: Granular permissions system - Rate Limiting: DDoS protection and resource management</p>"},{"location":"site/architecture/overview/#2-data-security","title":"2. Data Security","text":"<ul> <li>Encryption: TLS for transport, AES for storage</li> <li>Sanitization: Input validation and output encoding</li> <li>Audit Logging: Comprehensive activity tracking</li> <li>Privacy Protection: No sensitive code storage</li> </ul>"},{"location":"site/architecture/overview/#3-network-security","title":"3. Network Security","text":"<ul> <li>CORS Configuration: Proper cross-origin controls</li> <li>Input Validation: Strict request validation</li> <li>Output Filtering: Sensitive data redaction</li> <li>Network Isolation: Firewall and VPC configuration</li> </ul>"},{"location":"site/architecture/overview/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"site/architecture/overview/#1-metrics-collection","title":"1. Metrics Collection","text":"<p>Application Metrics: - Request count and latency - Validation success/failure rates - Cache hit/miss ratios - Memory and CPU usage</p> <p>Business Metrics: - Standards usage frequency - Validation coverage - Auto-fix success rates - User adoption trends</p>"},{"location":"site/architecture/overview/#2-logging-strategy","title":"2. Logging Strategy","text":"<p>Log Levels: - ERROR: System errors and failures - WARNING: Performance issues and degradation - INFO: Normal operation events - DEBUG: Detailed troubleshooting information</p> <p>Log Formats: - Structured JSON for machine processing - Human-readable for development - Audit logs for compliance</p>"},{"location":"site/architecture/overview/#3-health-checks","title":"3. Health Checks","text":"<p>Endpoint: <code>/health</code> <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"components\": {\n    \"database\": \"healthy\",\n    \"cache\": \"healthy\",\n    \"standards_repo\": \"healthy\",\n    \"external_apis\": \"degraded\"\n  },\n  \"metrics\": {\n    \"uptime\": \"7d 14h 32m\",\n    \"memory_usage\": \"67%\",\n    \"cache_hit_rate\": \"94%\"\n  }\n}\n</code></pre></p>"},{"location":"site/architecture/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"site/architecture/overview/#1-single-instance-deployment","title":"1. Single Instance Deployment","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Load Balancer        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Standards Server  \u2502\n\u2502                         \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 App     \u2502 \u2502 Cache   \u2502 \u2502\n\u2502 \u2502 Server  \u2502 \u2502 (Redis) \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/overview/#2-high-availability-deployment","title":"2. High Availability Deployment","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Load Balancer        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server 1  \u2502 \u2502 Server 2  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502         \u2502\n    \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n    \u2502  Shared Cache   \u2502\n    \u2502    (Redis)      \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/overview/#3-microservices-deployment","title":"3. Microservices Deployment","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      API Gateway        \u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502         \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Auth  \u2502 \u2502 Standards   \u2502\n\u2502Service\u2502 \u2502 Service     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502         \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Validation Service    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/overview/#development-architecture","title":"Development Architecture","text":""},{"location":"site/architecture/overview/#1-code-organization","title":"1. Code Organization","text":"<pre><code>src/\n\u251c\u2500\u2500 core/                 # Core business logic\n\u2502   \u251c\u2500\u2500 mcp/              # MCP protocol implementation\n\u2502   \u251c\u2500\u2500 standards/        # Standards engine\n\u2502   \u251c\u2500\u2500 validation/       # Validation engine\n\u2502   \u2514\u2500\u2500 cache/            # Caching layer\n\u251c\u2500\u2500 analyzers/            # Language analyzers\n\u251c\u2500\u2500 api/                  # REST API (optional)\n\u251c\u2500\u2500 cli/                  # Command-line interface\n\u2514\u2500\u2500 utils/                # Shared utilities\n</code></pre>"},{"location":"site/architecture/overview/#2-testing-strategy","title":"2. Testing Strategy","text":"<ul> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: Component interaction testing</li> <li>End-to-End Tests: Full workflow validation</li> <li>Performance Tests: Load and stress testing</li> <li>Security Tests: Vulnerability scanning</li> </ul>"},{"location":"site/architecture/overview/#3-development-workflow","title":"3. Development Workflow","text":"<pre><code>1. Feature Development\n   \u2193\n2. Unit Testing\n   \u2193\n3. Integration Testing\n   \u2193\n4. Code Review\n   \u2193\n5. Performance Testing\n   \u2193\n6. Security Scanning\n   \u2193\n7. Deployment\n</code></pre>"},{"location":"site/architecture/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"site/architecture/overview/#core-technologies","title":"Core Technologies","text":"<ul> <li>Python 3.11+: Main implementation language</li> <li>FastAPI: HTTP server framework</li> <li>Pydantic: Data validation and serialization</li> <li>SQLAlchemy: Database ORM (for analytics)</li> <li>Redis: Caching and session storage</li> <li>asyncio: Asynchronous programming</li> </ul>"},{"location":"site/architecture/overview/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Git: Standards repository management</li> <li>Docker: Containerization</li> <li>NLTK: Natural language processing</li> <li>sentence-transformers: Semantic search</li> <li>ChromaDB: Vector database for embeddings</li> </ul>"},{"location":"site/architecture/overview/#development-tools","title":"Development Tools","text":"<ul> <li>pytest: Testing framework</li> <li>black: Code formatting</li> <li>mypy: Type checking</li> <li>ruff: Linting</li> <li>pre-commit: Git hooks</li> </ul>"},{"location":"site/architecture/overview/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"site/architecture/overview/#1-planned-enhancements","title":"1. Planned Enhancements","text":"<ul> <li>GraphQL API: More efficient data fetching</li> <li>Event Streaming: Real-time updates with Kafka</li> <li>ML Models: AI-powered standard recommendations</li> <li>Blockchain: Immutable standards versioning</li> </ul>"},{"location":"site/architecture/overview/#2-scalability-improvements","title":"2. Scalability Improvements","text":"<ul> <li>Kubernetes: Container orchestration</li> <li>Service Mesh: Advanced networking</li> <li>Distributed Caching: Global cache coherence</li> <li>Edge Computing: Regional standard caching</li> </ul>"},{"location":"site/architecture/overview/#3-integration-expansion","title":"3. Integration Expansion","text":"<ul> <li>IDE Plugins: More editor support</li> <li>Cloud Platforms: AWS, GCP, Azure integration</li> <li>CI/CD Tools: Enhanced pipeline integration</li> <li>Security Tools: SAST/DAST integration</li> </ul> <p>For implementation details, see the Standards Engine and Token Optimization documentation.</p>"},{"location":"site/architecture/standards-engine/","title":"Standards Engine Architecture","text":"<p>The Standards Engine is the core component of the MCP Standards Server that manages the selection, validation, and application of development standards.</p>"},{"location":"site/architecture/standards-engine/#overview","title":"Overview","text":"<p>The Standards Engine provides intelligent standard selection based on project context, enabling automated compliance checking and improvement suggestions.</p>"},{"location":"site/architecture/standards-engine/#key-components","title":"Key Components","text":""},{"location":"site/architecture/standards-engine/#1-rule-engine","title":"1. Rule Engine","text":"<ul> <li>Pattern-based rule matching</li> <li>Priority resolution for conflicting standards</li> <li>Context-aware selection algorithms</li> </ul>"},{"location":"site/architecture/standards-engine/#2-standards-storage","title":"2. Standards Storage","text":"<ul> <li>Hierarchical organization of standards</li> <li>Metadata-driven categorization</li> <li>Version management support</li> </ul>"},{"location":"site/architecture/standards-engine/#3-validation-framework","title":"3. Validation Framework","text":"<ul> <li>Multi-language code analysis</li> <li>Real-time compliance checking</li> <li>Detailed violation reporting</li> </ul>"},{"location":"site/architecture/standards-engine/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Client    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Standards API   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502 Standards Engine \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u25bc                               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 Rule Engine  \u2502               \u2502  Validators  \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/architecture/standards-engine/#implementation-details","title":"Implementation Details","text":"<p>See src/core/standards/engine.py for the implementation.</p>"},{"location":"site/architecture/standards-engine/#related-documentation","title":"Related Documentation","text":"<ul> <li>Token Optimization</li> <li>MCP Integration</li> <li>API Reference</li> </ul>"},{"location":"site/architecture/token-optimization/","title":"Token Optimization Architecture","text":"<p>Token optimization is crucial for efficient LLM consumption of standards. This document describes the architecture and strategies used to minimize token usage while maintaining standard quality.</p>"},{"location":"site/architecture/token-optimization/#overview","title":"Overview","text":"<p>The token optimization system provides multiple format variants and intelligent content loading to stay within LLM context limits.</p>"},{"location":"site/architecture/token-optimization/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"site/architecture/token-optimization/#1-multi-tier-storage","title":"1. Multi-Tier Storage","text":"<ul> <li>Hot Tier: Frequently accessed standards in memory</li> <li>Warm Tier: Recent standards with quick access</li> <li>Cold Tier: Archived standards with compressed storage</li> </ul>"},{"location":"site/architecture/token-optimization/#2-format-variants","title":"2. Format Variants","text":"<ul> <li>Full Format: Complete standard with all details</li> <li>Condensed Format: Essential information only</li> <li>Reference Format: Minimal metadata and links</li> </ul>"},{"location":"site/architecture/token-optimization/#3-dynamic-loading","title":"3. Dynamic Loading","text":"<ul> <li>Context-aware content selection</li> <li>Progressive detail expansion</li> <li>Intelligent prefetching</li> </ul>"},{"location":"site/architecture/token-optimization/#token-budget-management","title":"Token Budget Management","text":"<pre><code># Example token budget allocation\nTOKEN_BUDGET = {\n    \"small_context\": 4_000,    # 4K tokens\n    \"medium_context\": 16_000,  # 16K tokens\n    \"large_context\": 128_000   # 128K tokens\n}\n</code></pre>"},{"location":"site/architecture/token-optimization/#compression-techniques","title":"Compression Techniques","text":"<ol> <li>Semantic Compression: Remove redundant information</li> <li>Structural Optimization: Flatten nested structures</li> <li>Reference Linking: Replace duplicates with references</li> </ol>"},{"location":"site/architecture/token-optimization/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Average token reduction: 60-70%</li> <li>Quality preservation: 95%+</li> <li>Retrieval speed: &lt;100ms</li> </ul>"},{"location":"site/architecture/token-optimization/#implementation","title":"Implementation","text":"<p>See src/core/standards/token_optimizer.py for implementation details.</p>"},{"location":"site/architecture/token-optimization/#related-documentation","title":"Related Documentation","text":"<ul> <li>Standards Engine</li> <li>Caching Strategy</li> <li>Performance Tuning</li> </ul>"},{"location":"site/contributing/setup/","title":"Development Setup Guide","text":"<p>This guide helps you set up your development environment for contributing to MCP Standards Server.</p>"},{"location":"site/contributing/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>Redis (for caching features)</li> <li>Node.js 18+ (for web UI development)</li> </ul>"},{"location":"site/contributing/setup/#environment-setup","title":"Environment Setup","text":""},{"location":"site/contributing/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/williamzujkowski/mcp-standards-server.git\ncd mcp-standards-server\n</code></pre>"},{"location":"site/contributing/setup/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate it\n# On Linux/Mac:\nsource venv/bin/activate\n\n# On Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"site/contributing/setup/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install in development mode with all extras\npip install -e \".[dev,test,performance,visualization,full]\"\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"site/contributing/setup/#4-set-up-redis","title":"4. Set Up Redis","text":"<pre><code># Ubuntu/Debian\nsudo apt-get install redis-server\n\n# macOS\nbrew install redis\n\n# Start Redis\nredis-server\n</code></pre>"},{"location":"site/contributing/setup/#5-environment-variables","title":"5. Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># .env\nMCP_ENV=development\nREDIS_URL=redis://localhost:6379\nLOG_LEVEL=DEBUG\nPYTHONPATH=${PWD}\n</code></pre>"},{"location":"site/contributing/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"site/contributing/setup/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"site/contributing/setup/#2-make-changes","title":"2. Make Changes","text":"<p>Follow the coding standards: - Use type hints - Write docstrings - Add unit tests - Update documentation</p>"},{"location":"site/contributing/setup/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_your_feature.py\n\n# Run with coverage\npytest --cov=src --cov-report=html\n</code></pre>"},{"location":"site/contributing/setup/#4-run-linters","title":"4. Run Linters","text":"<pre><code># Format code\nblack src/ tests/\n\n# Type checking\nmypy src/\n\n# Linting\nflake8 src/ tests/\n\n# Or run all checks\nmake lint\n</code></pre>"},{"location":"site/contributing/setup/#5-test-locally","title":"5. Test Locally","text":"<pre><code># Start the MCP server\npython -m src\n\n# In another terminal, test with CLI\nmcp-standards validate examples/\n\n# Test the web UI\ncd web &amp;&amp; npm start\n</code></pre>"},{"location":"site/contributing/setup/#ide-setup","title":"IDE Setup","text":""},{"location":"site/contributing/setup/#vs-code","title":"VS Code","text":"<p>Recommended extensions: - Python - Pylance - Black Formatter - GitLens</p> <p>Settings (<code>.vscode/settings.json</code>): <pre><code>{\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true,\n    \"python.testing.pytestEnabled\": true\n}\n</code></pre></p>"},{"location":"site/contributing/setup/#pycharm","title":"PyCharm","text":"<ol> <li>Set Python interpreter to virtual environment</li> <li>Enable Django support if working on web components</li> <li>Configure code style to use Black</li> <li>Set up pytest as test runner</li> </ol>"},{"location":"site/contributing/setup/#debugging","title":"Debugging","text":""},{"location":"site/contributing/setup/#debug-mcp-server","title":"Debug MCP Server","text":"<pre><code># Add breakpoints in code\nimport pdb; pdb.set_trace()\n\n# Or use VS Code/PyCharm debugger with launch configurations\n</code></pre>"},{"location":"site/contributing/setup/#debug-configuration-vs-code","title":"Debug Configuration (VS Code)","text":"<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug MCP Server\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"src\",\n            \"env\": {\n                \"PYTHONPATH\": \"${workspaceFolder}\",\n                \"MCP_ENV\": \"development\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"site/contributing/setup/#common-issues","title":"Common Issues","text":""},{"location":"site/contributing/setup/#import-errors","title":"Import Errors","text":"<pre><code># Ensure PYTHONPATH is set\nexport PYTHONPATH=${PWD}\n\n# Or install in editable mode\npip install -e .\n</code></pre>"},{"location":"site/contributing/setup/#redis-connection","title":"Redis Connection","text":"<pre><code># Check Redis is running\nredis-cli ping\n\n# Should return: PONG\n</code></pre>"},{"location":"site/contributing/setup/#test-failures","title":"Test Failures","text":"<pre><code># Clear test cache\nfind . -type d -name __pycache__ -exec rm -r {} +\npytest --cache-clear\n</code></pre>"},{"location":"site/contributing/setup/#next-steps","title":"Next Steps","text":"<ul> <li>Read Contributing Standards</li> <li>Learn about Writing Validators</li> <li>Understand Testing Guidelines</li> </ul>"},{"location":"site/contributing/setup/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues on GitHub</li> <li>Join our Discord community</li> <li>Ask questions in discussions</li> </ul> <p>Happy coding! \ud83d\ude80</p>"},{"location":"site/contributing/standards/","title":"Contributing Standards Guide","text":"<p>Learn how to contribute new standards or improve existing ones in the MCP Standards Server.</p>"},{"location":"site/contributing/standards/#understanding-standards","title":"Understanding Standards","text":"<p>Standards are the core of the MCP Standards Server. They define best practices, coding conventions, and quality requirements for various aspects of software development.</p>"},{"location":"site/contributing/standards/#standard-contribution-process","title":"Standard Contribution Process","text":""},{"location":"site/contributing/standards/#1-identify-the-need","title":"1. Identify the Need","text":"<p>Before creating a new standard: - Check if a similar standard already exists - Discuss in GitHub Issues or Discussions - Gather community feedback</p>"},{"location":"site/contributing/standards/#2-choose-standard-type","title":"2. Choose Standard Type","text":"<ul> <li>Language Standards: Python, JavaScript, Go, etc.</li> <li>Framework Standards: React, Django, Spring, etc.</li> <li>Domain Standards: Security, Performance, Testing</li> <li>Process Standards: CI/CD, Documentation, Code Review</li> </ul>"},{"location":"site/contributing/standards/#3-create-standard-file","title":"3. Create Standard File","text":"<p>Use the appropriate template:</p> <pre><code># standards/YOUR_STANDARD_NAME.yaml\nstandard:\n  id: \"unique-standard-id\"\n  name: \"Human Readable Name\"\n  version: \"1.0.0\"\n  category: \"coding|security|testing|architecture\"\n  description: |\n    Clear description of what this standard covers and why it's important.\n\nmetadata:\n  author: \"Your Name\"\n  created: \"2024-01-20\"\n  tags: [\"relevant\", \"tags\"]\n  references:\n    - \"https://link-to-authoritative-source\"\n\napplicability:\n  languages: [\"python\", \"javascript\"]\n  project_types: [\"web\", \"api\"]\n  frameworks: [\"django\", \"fastapi\"]\n\nrules:\n  - id: \"rule-1\"\n    name: \"Descriptive Rule Name\"\n    description: \"What this rule checks\"\n    severity: \"error\"\n    rationale: \"Why this rule exists\"\n\nexamples:\n  good:\n    - description: \"Example following the standard\"\n      code: |\n        def calculate_total(items: List[Item]) -&gt; float:\n            \"\"\"Calculate total price of items.\"\"\"\n            return sum(item.price for item in items)\n\n  bad:\n    - description: \"Example violating the standard\"\n      code: |\n        def calc(i):\n            t = 0\n            for x in i: t += x.price\n            return t\n</code></pre>"},{"location":"site/contributing/standards/#4-add-validation-rules","title":"4. Add Validation Rules","text":"<p>Create validators for automated checking:</p> <pre><code># src/validators/your_standard_validator.py\nfrom src.analyzers.base import BaseAnalyzer\n\nclass YourStandardValidator(BaseAnalyzer):\n    \"\"\"Validator for your standard.\"\"\"\n\n    def analyze(self, code: str, context: dict) -&gt; List[Violation]:\n        violations = []\n\n        # Implement your validation logic\n        if self.check_violation(code):\n            violations.append(\n                Violation(\n                    rule_id=\"rule-1\",\n                    message=\"Descriptive error message\",\n                    line=line_number,\n                    severity=\"error\"\n                )\n            )\n\n        return violations\n</code></pre>"},{"location":"site/contributing/standards/#5-write-tests","title":"5. Write Tests","text":"<pre><code># tests/standards/test_your_standard.py\nimport pytest\nfrom src.core.standards import StandardsEngine\n\nclass TestYourStandard:\n    def test_validation_passes(self):\n        \"\"\"Test that compliant code passes validation.\"\"\"\n        engine = StandardsEngine()\n        engine.load_standard(\"your-standard-id\")\n\n        good_code = \"\"\"\n        # Your compliant code example\n        \"\"\"\n\n        result = engine.validate_code(good_code)\n        assert result.passed\n        assert len(result.violations) == 0\n\n    def test_validation_fails(self):\n        \"\"\"Test that non-compliant code fails validation.\"\"\"\n        engine = StandardsEngine()\n        engine.load_standard(\"your-standard-id\")\n\n        bad_code = \"\"\"\n        # Your non-compliant code example\n        \"\"\"\n\n        result = engine.validate_code(bad_code)\n        assert not result.passed\n        assert len(result.violations) &gt; 0\n</code></pre>"},{"location":"site/contributing/standards/#6-document-the-standard","title":"6. Document the Standard","text":"<p>Create comprehensive documentation:</p> <pre><code># standards/docs/YOUR_STANDARD_NAME.md\n\n# Your Standard Name\n\n## Overview\nExplain what this standard covers and its importance.\n\n## Rules\n\n### Rule 1: Descriptive Name\n- **What**: Explain what the rule checks\n- **Why**: Explain the rationale\n- **How**: Show how to comply\n\n### Examples\n[Include multiple examples]\n\n## Migration Guide\nIf replacing an existing standard, provide migration steps.\n\n## References\n- Link to authoritative sources\n- Related standards\n- Further reading\n</code></pre>"},{"location":"site/contributing/standards/#quality-checklist","title":"Quality Checklist","text":"<p>Before submitting your standard:</p> <ul> <li> Unique ID: Ensure the ID doesn't conflict</li> <li> Clear Description: Easy to understand purpose</li> <li> Comprehensive Rules: Cover all relevant cases</li> <li> Good/Bad Examples: Clear, realistic examples</li> <li> Tests: Unit tests for validators</li> <li> Documentation: Complete user guide</li> <li> Performance: Validators run efficiently</li> <li> Compatibility: Works with target languages/frameworks</li> </ul>"},{"location":"site/contributing/standards/#submission-process","title":"Submission Process","text":"<ol> <li> <p>Fork and Branch <pre><code>git checkout -b standard/your-standard-name\n</code></pre></p> </li> <li> <p>Add Your Standard</p> </li> <li>Place YAML in <code>data/standards/</code></li> <li>Add validator in <code>src/validators/</code></li> <li>Add tests in <code>tests/standards/</code></li> <li> <p>Add docs in <code>docs/standards/</code></p> </li> <li> <p>Run Validation <pre><code># Validate your standard file\nmcp-standards validate-standard data/standards/YOUR_STANDARD.yaml\n\n# Run tests\npytest tests/standards/test_your_standard.py\n</code></pre></p> </li> <li> <p>Create Pull Request</p> </li> <li>Use template: \"New Standard: [Name]\"</li> <li>Reference related issues</li> <li>Include motivation and examples</li> </ol>"},{"location":"site/contributing/standards/#review-process","title":"Review Process","text":"<p>Your standard will be reviewed for:</p> <ol> <li>Relevance: Addresses real needs</li> <li>Quality: Well-defined and comprehensive</li> <li>Compatibility: Works with existing standards</li> <li>Performance: Efficient validation</li> <li>Documentation: Clear and complete</li> </ol>"},{"location":"site/contributing/standards/#maintenance","title":"Maintenance","text":"<p>After your standard is merged:</p> <ul> <li>Monitor issues related to your standard</li> <li>Update based on community feedback</li> <li>Maintain backward compatibility</li> <li>Document breaking changes</li> </ul>"},{"location":"site/contributing/standards/#examples-of-good-standards","title":"Examples of Good Standards","text":"<p>Study these well-crafted standards:</p> <ul> <li><code>python-async-patterns</code>: Comprehensive async/await patterns</li> <li><code>security-input-validation</code>: Security-focused with clear rationale</li> <li><code>react-component-standards</code>: Framework-specific best practices</li> </ul>"},{"location":"site/contributing/standards/#getting-help","title":"Getting Help","text":"<ul> <li>Ask questions in GitHub Discussions</li> <li>Review existing standards for examples</li> <li>Join our contributor community</li> </ul> <p>Thank you for contributing to better software development practices! \ud83c\udf89</p>"},{"location":"site/contributing/testing/","title":"Testing Guidelines","text":"<p>Comprehensive testing ensures the reliability and quality of MCP Standards Server. This guide covers testing strategies, tools, and best practices.</p>"},{"location":"site/contributing/testing/#testing-philosophy","title":"Testing Philosophy","text":"<ul> <li>Test First: Write tests before implementation (TDD)</li> <li>Full Coverage: Aim for &gt;80% code coverage</li> <li>Fast Feedback: Tests should run quickly</li> <li>Isolated Tests: No dependencies between tests</li> <li>Clear Failures: Tests should clearly indicate what failed</li> </ul>"},{"location":"site/contributing/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/               # Fast, isolated unit tests\n\u251c\u2500\u2500 integration/        # Component integration tests\n\u251c\u2500\u2500 e2e/               # End-to-end workflow tests\n\u251c\u2500\u2500 performance/       # Performance benchmarks\n\u251c\u2500\u2500 fixtures/          # Test data and mocks\n\u2514\u2500\u2500 conftest.py       # Shared pytest configuration\n</code></pre>"},{"location":"site/contributing/testing/#writing-unit-tests","title":"Writing Unit Tests","text":""},{"location":"site/contributing/testing/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code># tests/unit/test_feature.py\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom src.module import YourClass\n\nclass TestYourClass:\n    \"\"\"Test suite for YourClass.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Set up test dependencies.\"\"\"\n        self.instance = YourClass()\n\n    def teardown_method(self):\n        \"\"\"Clean up after tests.\"\"\"\n        # Cleanup if needed\n        pass\n\n    def test_basic_functionality(self):\n        \"\"\"Test basic functionality works as expected.\"\"\"\n        # Arrange\n        input_data = \"test\"\n        expected = \"TEST\"\n\n        # Act\n        result = self.instance.process(input_data)\n\n        # Assert\n        assert result == expected\n\n    def test_edge_case(self):\n        \"\"\"Test edge cases are handled properly.\"\"\"\n        with pytest.raises(ValueError):\n            self.instance.process(None)\n</code></pre>"},{"location":"site/contributing/testing/#testing-with-mocks","title":"Testing with Mocks","text":"<pre><code>class TestExternalIntegration:\n    @patch('src.module.external_api')\n    def test_api_call(self, mock_api):\n        \"\"\"Test external API integration.\"\"\"\n        # Configure mock\n        mock_api.return_value = {'status': 'success'}\n\n        # Test your code\n        result = your_function()\n\n        # Verify mock was called correctly\n        mock_api.assert_called_once_with('expected', 'args')\n        assert result['status'] == 'success'\n\n    @patch('src.module.redis_client')\n    def test_caching(self, mock_redis):\n        \"\"\"Test caching behavior.\"\"\"\n        mock_redis.get.return_value = None\n        mock_redis.set.return_value = True\n\n        # First call should cache\n        result1 = cached_function('key')\n        mock_redis.set.assert_called_once()\n\n        # Second call should use cache\n        mock_redis.get.return_value = result1\n        result2 = cached_function('key')\n        assert result1 == result2\n</code></pre>"},{"location":"site/contributing/testing/#parametrized-tests","title":"Parametrized Tests","text":"<pre><code>@pytest.mark.parametrize(\"input_str,expected\", [\n    (\"hello\", \"HELLO\"),\n    (\"Hello World\", \"HELLO WORLD\"),\n    (\"123\", \"123\"),\n    (\"\", \"\"),\n    (\"  spaces  \", \"  SPACES  \"),\n])\ndef test_uppercase_conversion(input_str, expected):\n    \"\"\"Test uppercase conversion with various inputs.\"\"\"\n    assert input_str.upper() == expected\n\n@pytest.mark.parametrize(\"code,language,expected_issues\", [\n    (\"print('hello')\", \"python\", 0),\n    (\"console.log('hello')\", \"javascript\", 1),\n    (\"fmt.Println('hello')\", \"go\", 0),\n])\ndef test_language_validation(code, language, expected_issues):\n    \"\"\"Test validation across different languages.\"\"\"\n    validator = get_validator(language)\n    result = validator.analyze(code)\n    assert len(result.violations) == expected_issues\n</code></pre>"},{"location":"site/contributing/testing/#writing-integration-tests","title":"Writing Integration Tests","text":""},{"location":"site/contributing/testing/#database-integration","title":"Database Integration","text":"<pre><code># tests/integration/test_database.py\nimport pytest\nfrom sqlalchemy import create_engine\n\n@pytest.fixture\ndef test_db():\n    \"\"\"Create test database.\"\"\"\n    engine = create_engine('sqlite:///:memory:')\n    # Set up schema\n    Base.metadata.create_all(engine)\n\n    yield engine\n\n    # Cleanup\n    engine.dispose()\n\ndef test_database_operations(test_db):\n    \"\"\"Test database CRUD operations.\"\"\"\n    with test_db.connect() as conn:\n        # Test insert\n        result = conn.execute(insert_query)\n        assert result.rowcount == 1\n\n        # Test select\n        rows = conn.execute(select_query).fetchall()\n        assert len(rows) == 1\n</code></pre>"},{"location":"site/contributing/testing/#redis-integration","title":"Redis Integration","text":"<pre><code># tests/integration/test_cache.py\nimport pytest\nimport fakeredis\n\n@pytest.fixture\ndef redis_client():\n    \"\"\"Create fake Redis client for testing.\"\"\"\n    return fakeredis.FakeRedis()\n\ndef test_cache_operations(redis_client):\n    \"\"\"Test cache operations.\"\"\"\n    from src.core.cache import MCPCache\n\n    cache = MCPCache(redis_client)\n\n    # Test set and get\n    cache.set('key', 'value', ttl=60)\n    assert cache.get('key') == 'value'\n\n    # Test expiration\n    cache.set('temp', 'data', ttl=1)\n    import time\n    time.sleep(2)\n    assert cache.get('temp') is None\n</code></pre>"},{"location":"site/contributing/testing/#writing-e2e-tests","title":"Writing E2E Tests","text":""},{"location":"site/contributing/testing/#mcp-server-e2e-test","title":"MCP Server E2E Test","text":"<pre><code># tests/e2e/test_mcp_workflow.py\nimport asyncio\nimport pytest\nfrom src.mcp_server import MCPServer\n\n@pytest.mark.asyncio\nasync def test_complete_workflow():\n    \"\"\"Test complete MCP workflow.\"\"\"\n    # Start server\n    server = MCPServer()\n    await server.start()\n\n    try:\n        # Connect client\n        client = MCPClient('localhost:8080')\n        await client.connect()\n\n        # Test getting standards\n        standards = await client.get_applicable_standards({\n            'project_type': 'web',\n            'language': 'python'\n        })\n        assert len(standards) &gt; 0\n\n        # Test validation\n        result = await client.validate_code(\n            'def bad_function(): pass',\n            standard_id='python-best-practices'\n        )\n        assert not result['passed']\n        assert len(result['violations']) &gt; 0\n\n    finally:\n        await server.stop()\n</code></pre>"},{"location":"site/contributing/testing/#cli-e2e-test","title":"CLI E2E Test","text":"<pre><code># tests/e2e/test_cli.py\nimport subprocess\nimport tempfile\n\ndef test_cli_validation():\n    \"\"\"Test CLI validation workflow.\"\"\"\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.py') as f:\n        # Write test code\n        f.write('''\ndef calculate_sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total\n        ''')\n        f.flush()\n\n        # Run validation\n        result = subprocess.run(\n            ['mcp-standards', 'validate', f.name],\n            capture_output=True,\n            text=True\n        )\n\n        assert result.returncode == 0\n        assert 'Validation passed' in result.stdout\n</code></pre>"},{"location":"site/contributing/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"site/contributing/testing/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code># tests/performance/test_benchmarks.py\nimport pytest\n\n@pytest.mark.benchmark\ndef test_validation_performance(benchmark):\n    \"\"\"Benchmark validation performance.\"\"\"\n    from src.core.standards import StandardsEngine\n\n    engine = StandardsEngine()\n    code = \"def test(): pass\\n\" * 1000  # 1000 functions\n\n    # Benchmark the validation\n    result = benchmark(engine.validate_code, code)\n\n    # Assert performance requirements\n    assert benchmark.stats['mean'] &lt; 0.1  # Less than 100ms\n\n@pytest.mark.benchmark\ndef test_search_performance(benchmark):\n    \"\"\"Benchmark search performance.\"\"\"\n    from src.core.standards.semantic_search import SemanticSearch\n\n    search = SemanticSearch()\n\n    # Benchmark search\n    result = benchmark(search.search, \"security best practices\")\n\n    assert len(result) &gt; 0\n    assert benchmark.stats['mean'] &lt; 0.05  # Less than 50ms\n</code></pre>"},{"location":"site/contributing/testing/#memory-testing","title":"Memory Testing","text":"<pre><code># tests/performance/test_memory.py\nimport pytest\nimport psutil\nimport os\n\ndef test_memory_usage():\n    \"\"\"Test memory usage stays within limits.\"\"\"\n    process = psutil.Process(os.getpid())\n    initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n\n    # Run memory-intensive operation\n    from src.core.standards import StandardsEngine\n    engine = StandardsEngine()\n\n    # Load all standards\n    for i in range(100):\n        engine.load_standard(f'standard-{i}')\n\n    final_memory = process.memory_info().rss / 1024 / 1024  # MB\n    memory_increase = final_memory - initial_memory\n\n    # Assert memory usage is reasonable\n    assert memory_increase &lt; 100  # Less than 100MB increase\n\n@pytest.mark.memprof\ndef test_memory_leaks():\n    \"\"\"Test for memory leaks.\"\"\"\n    # This test will generate memory profile\n    for i in range(1000):\n        obj = create_large_object()\n        process_object(obj)\n        # Object should be garbage collected\n</code></pre>"},{"location":"site/contributing/testing/#test-fixtures","title":"Test Fixtures","text":""},{"location":"site/contributing/testing/#shared-fixtures","title":"Shared Fixtures","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom pathlib import Path\n\n@pytest.fixture(scope='session')\ndef test_data_dir():\n    \"\"\"Path to test data directory.\"\"\"\n    return Path(__file__).parent / 'fixtures'\n\n@pytest.fixture\ndef sample_code():\n    \"\"\"Sample code for testing.\"\"\"\n    return {\n        'python': '''\ndef calculate_average(numbers):\n    \"\"\"Calculate average of numbers.\"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n        ''',\n        'javascript': '''\nfunction calculateAverage(numbers) {\n    if (!numbers.length) return 0;\n    return numbers.reduce((a, b) =&gt; a + b) / numbers.length;\n}\n        '''\n    }\n\n@pytest.fixture\ndef mock_standards():\n    \"\"\"Mock standards for testing.\"\"\"\n    return [\n        {\n            'id': 'test-standard',\n            'name': 'Test Standard',\n            'rules': [\n                {'id': 'rule1', 'severity': 'error'},\n                {'id': 'rule2', 'severity': 'warning'}\n            ]\n        }\n    ]\n</code></pre>"},{"location":"site/contributing/testing/#test-configuration","title":"Test Configuration","text":""},{"location":"site/contributing/testing/#pytestini","title":"pytest.ini","text":"<pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\n\n# Markers\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    benchmark: marks tests as benchmarks\n    asyncio: marks tests as async\n\n# Coverage\naddopts = \n    --cov=src\n    --cov-report=html\n    --cov-report=term-missing\n    --cov-fail-under=80\n\n# Timeouts\ntimeout = 60\n</code></pre>"},{"location":"site/contributing/testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_validator.py\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run only fast tests\npytest -m \"not slow\"\n\n# Run in parallel\npytest -n auto\n\n# Run with verbose output\npytest -vv\n\n# Run and stop on first failure\npytest -x\n\n# Run with debugging\npytest --pdb\n</code></pre>"},{"location":"site/contributing/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"site/contributing/testing/#github-actions-test-job","title":"GitHub Actions Test Job","text":"<pre><code>test:\n  runs-on: ubuntu-latest\n  strategy:\n    matrix:\n      python-version: ['3.9', '3.10', '3.11', '3.12']\n\n  steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        pip install -e \".[dev,test]\"\n\n    - name: Run tests\n      run: |\n        pytest --cov=src --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"site/contributing/testing/#best-practices","title":"Best Practices","text":""},{"location":"site/contributing/testing/#1-test-naming","title":"1. Test Naming","text":"<pre><code># Good: Descriptive test names\ndef test_validator_detects_sql_injection_in_f_strings():\n    pass\n\ndef test_cache_returns_none_for_expired_keys():\n    pass\n\n# Bad: Vague test names\ndef test_validator():\n    pass\n\ndef test_cache():\n    pass\n</code></pre>"},{"location":"site/contributing/testing/#2-test-independence","title":"2. Test Independence","text":"<pre><code># Good: Each test sets up its own data\ndef test_one():\n    data = create_test_data()\n    assert process(data) == expected\n\ndef test_two():\n    data = create_test_data()  # Fresh data\n    assert process(data) == expected\n\n# Bad: Tests depend on shared state\nshared_data = create_test_data()\n\ndef test_one():\n    assert process(shared_data) == expected\n\ndef test_two():\n    # May fail if test_one modifies shared_data\n    assert process(shared_data) == expected\n</code></pre>"},{"location":"site/contributing/testing/#3-assertion-messages","title":"3. Assertion Messages","text":"<pre><code># Good: Clear assertion messages\nassert len(results) == 5, f\"Expected 5 results, got {len(results)}\"\n\n# Bad: No context on failure\nassert len(results) == 5\n</code></pre>"},{"location":"site/contributing/testing/#debugging-failed-tests","title":"Debugging Failed Tests","text":"<ol> <li> <p>Run Single Test <pre><code>pytest tests/unit/test_file.py::TestClass::test_method -vv\n</code></pre></p> </li> <li> <p>Enable Debugging <pre><code>pytest --pdb  # Drop into debugger on failure\n</code></pre></p> </li> <li> <p>Print Debugging <pre><code>def test_complex_logic():\n    result = complex_function()\n    print(f\"Result: {result}\")  # Use -s flag to see prints\n    assert result == expected\n</code></pre></p> </li> <li> <p>Check Test Logs <pre><code>pytest --log-cli-level=DEBUG\n</code></pre></p> </li> </ol>"},{"location":"site/contributing/testing/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Setup</li> <li>Code Standards</li> <li>CI/CD Integration</li> </ul> <p>Happy testing! \ud83e\uddea</p>"},{"location":"site/contributing/validators/","title":"Writing Validators Guide","text":"<p>This guide explains how to write custom validators for MCP Standards Server.</p>"},{"location":"site/contributing/validators/#validator-overview","title":"Validator Overview","text":"<p>Validators are Python classes that analyze code and detect violations of standards. They can use pattern matching, AST analysis, or custom logic.</p>"},{"location":"site/contributing/validators/#validator-architecture","title":"Validator Architecture","text":"<pre><code>BaseAnalyzer (Abstract)\n    \u251c\u2500\u2500 PythonAnalyzer\n    \u251c\u2500\u2500 JavaScriptAnalyzer\n    \u251c\u2500\u2500 GoAnalyzer\n    \u2514\u2500\u2500 CustomValidator (Your validator)\n</code></pre>"},{"location":"site/contributing/validators/#creating-a-basic-validator","title":"Creating a Basic Validator","text":""},{"location":"site/contributing/validators/#1-inherit-from-baseanalyzer","title":"1. Inherit from BaseAnalyzer","text":"<pre><code># src/validators/my_validator.py\nfrom typing import List, Dict, Any\nfrom src.analyzers.base import BaseAnalyzer, AnalysisResult\n\nclass MyValidator(BaseAnalyzer):\n    \"\"\"Custom validator for specific standards.\"\"\"\n\n    def __init__(self, config: Dict[str, Any] = None):\n        super().__init__()\n        self.config = config or {}\n\n    def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n        \"\"\"Analyze code and return violations.\"\"\"\n        violations = []\n        issues = []\n\n        # Your analysis logic here\n        lines = code.split('\\n')\n        for i, line in enumerate(lines, 1):\n            if self._check_violation(line):\n                violations.append({\n                    'rule': 'my-rule',\n                    'message': 'Violation detected',\n                    'line': i,\n                    'column': 0,\n                    'severity': 'warning'\n                })\n\n        return AnalysisResult(\n            violations=violations,\n            security_issues=issues,\n            metrics={'lines_analyzed': len(lines)}\n        )\n\n    def _check_violation(self, line: str) -&gt; bool:\n        \"\"\"Check if line violates rules.\"\"\"\n        # Implement your logic\n        return 'TODO' in line\n</code></pre>"},{"location":"site/contributing/validators/#2-pattern-based-validator","title":"2. Pattern-Based Validator","text":"<pre><code>import re\nfrom src.analyzers.base import BaseAnalyzer\n\nclass PatternValidator(BaseAnalyzer):\n    \"\"\"Validator using regex patterns.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.patterns = {\n            'hardcoded-secret': re.compile(r'(api_key|password)\\s*=\\s*[\"\\'][\\w]+[\"\\']'),\n            'console-log': re.compile(r'console\\.(log|debug|info)'),\n            'sql-injection': re.compile(r'f[\"\\']\\s*SELECT.*{.*}')\n        }\n\n    def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n        violations = []\n\n        for line_num, line in enumerate(code.split('\\n'), 1):\n            for rule_id, pattern in self.patterns.items():\n                if pattern.search(line):\n                    violations.append({\n                        'rule': rule_id,\n                        'message': f'Pattern \"{rule_id}\" detected',\n                        'line': line_num,\n                        'column': pattern.search(line).start(),\n                        'severity': 'error' if 'secret' in rule_id else 'warning'\n                    })\n\n        return AnalysisResult(violations=violations)\n</code></pre>"},{"location":"site/contributing/validators/#3-ast-based-validator","title":"3. AST-Based Validator","text":"<pre><code>import ast\nfrom src.analyzers.base import BaseAnalyzer\n\nclass ASTValidator(BaseAnalyzer):\n    \"\"\"Validator using Abstract Syntax Tree analysis.\"\"\"\n\n    def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n        violations = []\n\n        try:\n            tree = ast.parse(code)\n            visitor = ViolationVisitor()\n            visitor.visit(tree)\n            violations = visitor.violations\n        except SyntaxError as e:\n            # Handle syntax errors gracefully\n            violations.append({\n                'rule': 'syntax-error',\n                'message': str(e),\n                'line': e.lineno,\n                'severity': 'error'\n            })\n\n        return AnalysisResult(violations=violations)\n\nclass ViolationVisitor(ast.NodeVisitor):\n    \"\"\"AST visitor to find violations.\"\"\"\n\n    def __init__(self):\n        self.violations = []\n\n    def visit_FunctionDef(self, node):\n        # Check function complexity\n        if self._calculate_complexity(node) &gt; 10:\n            self.violations.append({\n                'rule': 'high-complexity',\n                'message': f'Function {node.name} has high complexity',\n                'line': node.lineno,\n                'severity': 'warning'\n            })\n\n        # Check docstring\n        if not ast.get_docstring(node):\n            self.violations.append({\n                'rule': 'missing-docstring',\n                'message': f'Function {node.name} missing docstring',\n                'line': node.lineno,\n                'severity': 'warning'\n            })\n\n        self.generic_visit(node)\n\n    def _calculate_complexity(self, node):\n        # Simplified complexity calculation\n        return len([n for n in ast.walk(node) if isinstance(n, ast.If)])\n</code></pre>"},{"location":"site/contributing/validators/#advanced-validator-features","title":"Advanced Validator Features","text":""},{"location":"site/contributing/validators/#1-multi-language-support","title":"1. Multi-Language Support","text":"<pre><code>class MultiLanguageValidator(BaseAnalyzer):\n    \"\"\"Validator supporting multiple languages.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.language_handlers = {\n            'python': self._analyze_python,\n            'javascript': self._analyze_javascript,\n            'go': self._analyze_go\n        }\n\n    def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n        language = self._detect_language(file_path)\n        handler = self.language_handlers.get(language, self._analyze_generic)\n        return handler(code)\n\n    def _detect_language(self, file_path: str) -&gt; str:\n        if not file_path:\n            return 'unknown'\n\n        ext_map = {\n            '.py': 'python',\n            '.js': 'javascript',\n            '.go': 'go'\n        }\n\n        import os\n        ext = os.path.splitext(file_path)[1]\n        return ext_map.get(ext, 'unknown')\n</code></pre>"},{"location":"site/contributing/validators/#2-context-aware-validation","title":"2. Context-Aware Validation","text":"<pre><code>class ContextAwareValidator(BaseAnalyzer):\n    \"\"\"Validator that uses project context.\"\"\"\n\n    def analyze(self, code: str, file_path: str = None, context: dict = None) -&gt; AnalysisResult:\n        violations = []\n        context = context or {}\n\n        # Different rules for different project types\n        if context.get('project_type') == 'library':\n            violations.extend(self._check_library_rules(code))\n        elif context.get('project_type') == 'application':\n            violations.extend(self._check_application_rules(code))\n\n        # Framework-specific rules\n        if 'django' in context.get('frameworks', []):\n            violations.extend(self._check_django_rules(code))\n\n        return AnalysisResult(violations=violations)\n</code></pre>"},{"location":"site/contributing/validators/#3-performance-optimization","title":"3. Performance Optimization","text":"<pre><code>import functools\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass OptimizedValidator(BaseAnalyzer):\n    \"\"\"Performance-optimized validator.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self._cache = {}\n        self.executor = ThreadPoolExecutor(max_workers=4)\n\n    @functools.lru_cache(maxsize=1000)\n    def _cached_analysis(self, code_hash: str) -&gt; List[dict]:\n        \"\"\"Cache analysis results.\"\"\"\n        # Expensive analysis here\n        return self._do_analysis(code_hash)\n\n    def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n        # Use hash for caching\n        import hashlib\n        code_hash = hashlib.md5(code.encode()).hexdigest()\n\n        # Check cache first\n        if code_hash in self._cache:\n            return AnalysisResult(violations=self._cache[code_hash])\n\n        # Parallel analysis for large files\n        if len(code) &gt; 10000:\n            chunks = self._split_code(code)\n            futures = [self.executor.submit(self._analyze_chunk, chunk) for chunk in chunks]\n            violations = []\n            for future in futures:\n                violations.extend(future.result())\n        else:\n            violations = self._do_analysis(code)\n\n        self._cache[code_hash] = violations\n        return AnalysisResult(violations=violations)\n</code></pre>"},{"location":"site/contributing/validators/#testing-your-validator","title":"Testing Your Validator","text":""},{"location":"site/contributing/validators/#unit-tests","title":"Unit Tests","text":"<pre><code># tests/validators/test_my_validator.py\nimport pytest\nfrom src.validators.my_validator import MyValidator\n\nclass TestMyValidator:\n    def setup_method(self):\n        self.validator = MyValidator()\n\n    def test_detects_violation(self):\n        code = \"\"\"\n        # TODO: Fix this later\n        def bad_function():\n            pass\n        \"\"\"\n\n        result = self.validator.analyze(code)\n        assert len(result.violations) == 1\n        assert result.violations[0]['rule'] == 'my-rule'\n        assert result.violations[0]['line'] == 2\n\n    def test_clean_code_passes(self):\n        code = \"\"\"\n        def good_function():\n            '''Well documented function.'''\n            return 42\n        \"\"\"\n\n        result = self.validator.analyze(code)\n        assert len(result.violations) == 0\n\n    @pytest.mark.parametrize(\"code,expected_count\", [\n        (\"TODO: fix\", 1),\n        (\"# TODO: fix\\n# TODO: another\", 2),\n        (\"No todos here\", 0)\n    ])\n    def test_multiple_cases(self, code, expected_count):\n        result = self.validator.analyze(code)\n        assert len(result.violations) == expected_count\n</code></pre>"},{"location":"site/contributing/validators/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_validator_integration():\n    \"\"\"Test validator with standards engine.\"\"\"\n    from src.core.standards import StandardsEngine\n\n    engine = StandardsEngine()\n    engine.register_validator('my-validator', MyValidator)\n\n    # Test with actual standard\n    result = engine.validate_file(\n        'test_file.py',\n        validators=['my-validator']\n    )\n\n    assert result is not None\n</code></pre>"},{"location":"site/contributing/validators/#best-practices","title":"Best Practices","text":""},{"location":"site/contributing/validators/#1-error-handling","title":"1. Error Handling","text":"<pre><code>def analyze(self, code: str, file_path: str = None) -&gt; AnalysisResult:\n    try:\n        # Your analysis\n        pass\n    except Exception as e:\n        # Log error but don't crash\n        import logging\n        logging.error(f\"Validator error: {e}\")\n\n        # Return partial results if possible\n        return AnalysisResult(\n            violations=[],\n            errors=[str(e)]\n        )\n</code></pre>"},{"location":"site/contributing/validators/#2-performance-guidelines","title":"2. Performance Guidelines","text":"<ul> <li>Cache expensive computations</li> <li>Use generators for large files</li> <li>Implement early exit conditions</li> <li>Profile your validator</li> </ul>"},{"location":"site/contributing/validators/#3-clear-messages","title":"3. Clear Messages","text":"<pre><code>violations.append({\n    'rule': 'function-too-long',\n    'message': f'Function \"{func_name}\" is {lines} lines long (max: 50)',\n    'line': start_line,\n    'severity': 'warning',\n    'suggestion': 'Consider breaking this function into smaller functions'\n})\n</code></pre>"},{"location":"site/contributing/validators/#registering-your-validator","title":"Registering Your Validator","text":""},{"location":"site/contributing/validators/#1-add-to-registry","title":"1. Add to Registry","text":"<pre><code># src/validators/__init__.py\nfrom .my_validator import MyValidator\n\nVALIDATORS = {\n    'my-validator': MyValidator,\n    # ... other validators\n}\n</code></pre>"},{"location":"site/contributing/validators/#2-configure-in-standard","title":"2. Configure in Standard","text":"<pre><code># standards/my-standard.yaml\nvalidators:\n  - type: 'my-validator'\n    config:\n      strict_mode: true\n      ignore_patterns: ['test_*']\n</code></pre>"},{"location":"site/contributing/validators/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Enable Debug Logging <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> </li> <li> <p>Add Breakpoints <pre><code>import pdb; pdb.set_trace()\n</code></pre></p> </li> <li> <p>Test Incrementally <pre><code># Test one rule at a time\nvalidator = MyValidator()\nvalidator.patterns = {'test-rule': re.compile(r'test')}\n</code></pre></p> </li> </ol>"},{"location":"site/contributing/validators/#related-documentation","title":"Related Documentation","text":"<ul> <li>Standards Format</li> <li>Testing Guidelines</li> <li>Performance Optimization</li> </ul> <p>Happy validator writing! \ud83d\ude80</p>"},{"location":"site/examples/custom-standards/","title":"Custom Standards Examples","text":"<p>Learn how to create and use custom standards tailored to your project needs.</p>"},{"location":"site/examples/custom-standards/#creating-a-custom-standard","title":"Creating a Custom Standard","text":""},{"location":"site/examples/custom-standards/#basic-standard-definition","title":"Basic Standard Definition","text":"<pre><code># standards/my-team-standard.yaml\nstandard:\n  id: \"my-team-python\"\n  name: \"My Team Python Standards\"\n  version: \"1.0.0\"\n  category: \"coding\"\n  description: \"Python coding standards for my team\"\n\nmetadata:\n  author: \"Team Lead\"\n  team: \"Backend Team\"\n  created: \"2024-01-01\"\n\napplicability:\n  languages: [\"python\"]\n  project_types: [\"api\", \"service\"]\n\nrules:\n  - id: \"function-naming\"\n    description: \"Functions must use snake_case\"\n    pattern: \"^[a-z_][a-z0-9_]*$\"\n    severity: \"error\"\n\n  - id: \"max-function-length\"\n    description: \"Functions should not exceed 50 lines\"\n    type: \"metric\"\n    max_value: 50\n    severity: \"warning\"\n</code></pre>"},{"location":"site/examples/custom-standards/#advanced-standard-with-custom-logic","title":"Advanced Standard with Custom Logic","text":"<pre><code>standard:\n  id: \"security-enhanced\"\n  name: \"Enhanced Security Standards\"\n\nvalidators:\n  - type: \"custom\"\n    module: \"validators.security\"\n    class: \"EnhancedSecurityValidator\"\n    config:\n      check_dependencies: true\n      scan_depth: \"deep\"\n</code></pre>"},{"location":"site/examples/custom-standards/#implementing-custom-validators","title":"Implementing Custom Validators","text":""},{"location":"site/examples/custom-standards/#simple-pattern-validator","title":"Simple Pattern Validator","text":"<pre><code># validators/naming_validator.py\nimport re\nfrom src.core.validation import BaseValidator\n\nclass NamingValidator(BaseValidator):\n    def __init__(self, config):\n        self.patterns = {\n            'class': re.compile(r'^[A-Z][a-zA-Z0-9]*$'),\n            'function': re.compile(r'^[a-z_][a-z0-9_]*$'),\n            'constant': re.compile(r'^[A-Z_][A-Z0-9_]*$')\n        }\n\n    def validate(self, ast_node, context):\n        violations = []\n\n        if ast_node.type == 'class' and not self.patterns['class'].match(ast_node.name):\n            violations.append({\n                'rule': 'class-naming',\n                'message': f\"Class '{ast_node.name}' should use PascalCase\"\n            })\n\n        return violations\n</code></pre>"},{"location":"site/examples/custom-standards/#complex-business-logic-validator","title":"Complex Business Logic Validator","text":"<pre><code># validators/business_logic.py\nclass BusinessLogicValidator(BaseValidator):\n    def validate_api_endpoints(self, file_content):\n        \"\"\"Ensure all API endpoints follow REST conventions\"\"\"\n        violations = []\n\n        # Parse routes\n        routes = self.extract_routes(file_content)\n\n        for route in routes:\n            # Check HTTP method matches operation\n            if route.method == 'GET' and 'create' in route.path:\n                violations.append({\n                    'message': f\"GET {route.path} should not contain 'create'\"\n                })\n\n            # Check resource naming\n            if not self.is_valid_resource_name(route.resource):\n                violations.append({\n                    'message': f\"Resource '{route.resource}' should be plural\"\n                })\n\n        return violations\n</code></pre>"},{"location":"site/examples/custom-standards/#standard-templates","title":"Standard Templates","text":""},{"location":"site/examples/custom-standards/#microservice-standard-template","title":"Microservice Standard Template","text":"<pre><code>standard:\n  id: \"microservice-template\"\n  name: \"Microservice Standards Template\"\n\nincludes:\n  - \"base-coding-standards\"\n  - \"api-design-standards\"\n  - \"security-standards\"\n\noverrides:\n  - rule: \"max-file-length\"\n    max_value: 300  # Smaller files for microservices\n\nadditions:\n  - id: \"health-check-required\"\n    description: \"Service must implement /health endpoint\"\n    type: \"structural\"\n    required_endpoints: [\"/health\", \"/ready\"]\n</code></pre>"},{"location":"site/examples/custom-standards/#frontend-component-standard","title":"Frontend Component Standard","text":"<pre><code>standard:\n  id: \"react-component\"\n  name: \"React Component Standards\"\n\nrules:\n  - id: \"component-structure\"\n    description: \"Components must follow standard structure\"\n    required_sections:\n      - \"imports\"\n      - \"types/interfaces\"\n      - \"component-definition\"\n      - \"exports\"\n\n  - id: \"prop-types\"\n    description: \"All props must be typed\"\n    severity: \"error\"\n</code></pre>"},{"location":"site/examples/custom-standards/#testing-custom-standards","title":"Testing Custom Standards","text":"<pre><code># tests/test_custom_standard.py\nimport pytest\nfrom src.core.standards import StandardsEngine\n\ndef test_custom_standard_validation():\n    engine = StandardsEngine()\n    engine.load_standard('standards/my-team-standard.yaml')\n\n    # Test compliant code\n    good_code = \"\"\"\n    def calculate_total(items):\n        return sum(item.price for item in items)\n    \"\"\"\n\n    result = engine.validate_code(good_code, 'my-team-python')\n    assert len(result.violations) == 0\n\n    # Test non-compliant code\n    bad_code = \"\"\"\n    def CalculateTotal(items):  # PascalCase function\n        return sum(item.price for item in items)\n    \"\"\"\n\n    result = engine.validate_code(bad_code, 'my-team-python')\n    assert len(result.violations) == 1\n    assert result.violations[0].rule_id == 'function-naming'\n</code></pre>"},{"location":"site/examples/custom-standards/#sharing-standards","title":"Sharing Standards","text":""},{"location":"site/examples/custom-standards/#publishing-to-registry","title":"Publishing to Registry","text":"<pre><code># Package your standard\nmcp-standards package my-team-standard.yaml\n\n# Publish to registry\nmcp-standards publish my-team-standard-1.0.0.tar.gz\n</code></pre>"},{"location":"site/examples/custom-standards/#using-shared-standards","title":"Using Shared Standards","text":"<pre><code># Install from registry\nmcp-standards install team-standards/my-team-python\n\n# Use in project\necho \"extends: my-team-python\" &gt; .mcp-standards.yml\n</code></pre>"},{"location":"site/examples/custom-standards/#related-documentation","title":"Related Documentation","text":"<ul> <li>Standards Format</li> <li>Creating Standards Guide</li> <li>Validation Examples</li> </ul>"},{"location":"site/examples/project-setup/","title":"Project Setup Examples","text":"<p>Real-world examples of setting up MCP Standards Server for different types of projects.</p>"},{"location":"site/examples/project-setup/#web-application-projects","title":"Web Application Projects","text":""},{"location":"site/examples/project-setup/#react-typescript-web-app","title":"React + TypeScript Web App","text":"<p>Project Structure: <pre><code>my-react-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 .mcp-standards.json\n</code></pre></p> <p>Setup Commands: <pre><code># 1. Initialize project\nnpx create-react-app my-react-app --template typescript\ncd my-react-app\n\n# 2. Get applicable standards\nmcp-standards query applicable \\\n  --project-type web_application \\\n  --framework react \\\n  --language typescript\n\n# 3. Create project configuration\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"web_application\",\n  \"framework\": \"react\",\n  \"language\": \"typescript\",\n  \"version\": \"1.0.0\",\n  \"standards\": {\n    \"required\": [\n      \"react-18-patterns\",\n      \"typescript-strict\",\n      \"web-accessibility-wcag\",\n      \"security-web-app\"\n    ],\n    \"optional\": [\n      \"performance-web\",\n      \"seo-optimization\"\n    ]\n  },\n  \"validation\": {\n    \"severity\": \"warning\",\n    \"autoFix\": true,\n    \"excludePatterns\": [\n      \"build/**\",\n      \"node_modules/**\",\n      \"**/*.test.ts\",\n      \"**/*.spec.ts\"\n    ]\n  },\n  \"compliance\": {\n    \"frameworks\": [\"WCAG-2.1-AA\"],\n    \"reporting\": true\n  }\n}\nEOF\n\n# 4. Setup VS Code integration\nmkdir -p .vscode\ncat &gt; .vscode/settings.json &lt;&lt; 'EOF'\n{\n  \"mcpStandards.enabled\": true,\n  \"mcpStandards.serverUrl\": \"http://localhost:8080\",\n  \"mcpStandards.enableRealTimeValidation\": true,\n  \"mcpStandards.autoFixOnSave\": true,\n  \"mcpStandards.projectConfigFile\": \".mcp-standards.json\"\n}\nEOF\n\n# 5. Setup GitHub Actions\nmkdir -p .github/workflows\ncat &gt; .github/workflows/standards.yml &lt;&lt; 'EOF'\nname: Standards Validation\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        npm ci\n        pip install mcp-standards-server\n\n    - name: Sync Standards\n      run: mcp-standards sync\n\n    - name: Validate Code\n      run: |\n        mcp-standards validate \\\n          --format sarif \\\n          --output standards-results.sarif\n\n    - name: Upload SARIF\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: standards-results.sarif\nEOF\n\n# 6. Setup pre-commit hooks\nnpm install --save-dev husky\nnpx husky install\nnpx husky add .husky/pre-commit \"mcp-standards validate --fix --severity error .\"\n\n# 7. Initial validation\nmcp-standards validate .\n</code></pre></p> <p>Expected Output: <pre><code>\u2705 Standards validation completed\n\ud83d\udcdd Found 3 applicable standards\n\u26a0\ufe0f  12 warnings found\n\u2705 8 issues auto-fixed\n\ud83d\udcc8 Compliance: WCAG-2.1-AA (87%)\n</code></pre></p>"},{"location":"site/examples/project-setup/#vuejs-composition-api","title":"Vue.js + Composition API","text":"<p>Setup: <pre><code># Project creation\nnpm create vue@latest my-vue-app\ncd my-vue-app\n\n# Standards configuration\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"web_application\",\n  \"framework\": \"vue\",\n  \"language\": \"typescript\",\n  \"standards\": {\n    \"required\": [\n      \"vue-3-composition\",\n      \"typescript-strict\",\n      \"web-accessibility-wcag\"\n    ]\n  },\n  \"validation\": {\n    \"severity\": \"warning\",\n    \"rules\": {\n      \"vue-composition-api\": \"error\",\n      \"accessibility-alt-text\": \"error\"\n    }\n  }\n}\nEOF\n\n# Validate setup\nmcp-standards validate --standard vue-3-composition .\n</code></pre></p>"},{"location":"site/examples/project-setup/#api-projects","title":"API Projects","text":""},{"location":"site/examples/project-setup/#fastapi-python-api","title":"FastAPI Python API","text":"<p>Project Structure: <pre><code>my-api/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 v1/\n\u2502   \u2502   \u2514\u2500\u2500 dependencies.py\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 .mcp-standards.json\n</code></pre></p> <p>Setup: <pre><code># 1. Create project\nmkdir my-api &amp;&amp; cd my-api\npython -m venv venv\nsource venv/bin/activate\npip install fastapi uvicorn\n\n# 2. Configure standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"api\",\n  \"framework\": \"fastapi\",\n  \"language\": \"python\",\n  \"apiVersion\": \"v1\",\n  \"standards\": {\n    \"required\": [\n      \"api-design-restful\",\n      \"python-pep8\",\n      \"security-api\",\n      \"openapi-3.0\"\n    ],\n    \"optional\": [\n      \"performance-api\",\n      \"monitoring-observability\"\n    ]\n  },\n  \"validation\": {\n    \"severity\": \"error\",\n    \"apiSpecific\": {\n      \"validateOpenAPI\": true,\n      \"requireAuthentication\": true,\n      \"enforceRateLimit\": true\n    }\n  },\n  \"compliance\": {\n    \"frameworks\": [\"OWASP-API-Top-10\"],\n    \"reporting\": true\n  }\n}\nEOF\n\n# 3. Setup development environment\ncat &gt; requirements.txt &lt;&lt; 'EOF'\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\npydantic==2.5.0\nsqlalchemy==2.0.23\nalembic==1.13.0\nEOF\n\npip install -r requirements.txt\n\n# 4. Create basic API structure\nmkdir -p app/api/v1 app/core app/models tests\n\n# 5. Validate API design\nmcp-standards validate \\\n  --standard api-design-restful \\\n  --format openapi \\\n  .\n</code></pre></p>"},{"location":"site/examples/project-setup/#graphql-api-with-nodejs","title":"GraphQL API with Node.js","text":"<p>Setup: <pre><code># Project initialization\nnpm init -y\nnpm install apollo-server-express graphql express\nnpm install -D @types/node typescript ts-node\n\n# Standards configuration\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"api\",\n  \"framework\": \"apollo-graphql\",\n  \"language\": \"typescript\",\n  \"standards\": {\n    \"required\": [\n      \"graphql-best-practices\",\n      \"typescript-strict\",\n      \"security-graphql\",\n      \"api-design-graphql\"\n    ]\n  },\n  \"validation\": {\n    \"graphqlSpecific\": {\n      \"enforceDepthLimit\": true,\n      \"requireAuth\": true,\n      \"validateSchema\": true\n    }\n  }\n}\nEOF\n\n# Validate GraphQL schema\nmcp-standards validate --standard graphql-best-practices ./schema/\n</code></pre></p>"},{"location":"site/examples/project-setup/#mobile-applications","title":"Mobile Applications","text":""},{"location":"site/examples/project-setup/#react-native-app","title":"React Native App","text":"<p>Setup: <pre><code># Create React Native project\nnpx react-native init MyMobileApp --template react-native-template-typescript\ncd MyMobileApp\n\n# Configure standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"mobile_application\",\n  \"platform\": \"react-native\",\n  \"language\": \"typescript\",\n  \"targetPlatforms\": [\"ios\", \"android\"],\n  \"standards\": {\n    \"required\": [\n      \"react-native-patterns\",\n      \"mobile-accessibility\",\n      \"mobile-performance\",\n      \"typescript-strict\"\n    ],\n    \"platform\": {\n      \"ios\": [\"ios-human-interface\"],\n      \"android\": [\"material-design\"]\n    }\n  },\n  \"validation\": {\n    \"mobileSpecific\": {\n      \"validateAccessibility\": true,\n      \"checkPerformance\": true,\n      \"enforceOfflineSupport\": false\n    }\n  }\n}\nEOF\n\n# Platform-specific validation\nmcp-standards validate \\\n  --platform ios \\\n  --standard mobile-accessibility \\\n  ./src/\n</code></pre></p>"},{"location":"site/examples/project-setup/#flutter-app","title":"Flutter App","text":"<p>Setup: <pre><code># Create Flutter project\nflutter create my_flutter_app\ncd my_flutter_app\n\n# Configure standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"mobile_application\",\n  \"framework\": \"flutter\",\n  \"language\": \"dart\",\n  \"standards\": {\n    \"required\": [\n      \"flutter-best-practices\",\n      \"dart-effective\",\n      \"mobile-accessibility\"\n    ]\n  },\n  \"validation\": {\n    \"flutterSpecific\": {\n      \"enforceStatelessWidgets\": true,\n      \"validatePubspec\": true\n    }\n  }\n}\nEOF\n\n# Validate Dart code\nmcp-standards validate --language dart ./lib/\n</code></pre></p>"},{"location":"site/examples/project-setup/#desktop-applications","title":"Desktop Applications","text":""},{"location":"site/examples/project-setup/#electron-app","title":"Electron App","text":"<p>Setup: <pre><code># Create Electron app\nnpm init -y\nnpm install electron\nnpm install -D electron-builder\n\n# Configure standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"desktop_application\",\n  \"framework\": \"electron\",\n  \"language\": \"typescript\",\n  \"standards\": {\n    \"required\": [\n      \"electron-security\",\n      \"desktop-patterns\",\n      \"typescript-strict\"\n    ]\n  },\n  \"validation\": {\n    \"electronSpecific\": {\n      \"enforceContextIsolation\": true,\n      \"validateSecurityHeaders\": true,\n      \"checkNodeIntegration\": true\n    }\n  }\n}\nEOF\n\n# Security validation\nmcp-standards validate \\\n  --standard electron-security \\\n  --severity error \\\n  .\n</code></pre></p>"},{"location":"site/examples/project-setup/#microservices-projects","title":"Microservices Projects","text":""},{"location":"site/examples/project-setup/#docker-kubernetes-microservice","title":"Docker + Kubernetes Microservice","text":"<p>Project Structure: <pre><code>microservice/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 k8s/\n\u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2514\u2500\u2500 service.yaml\n\u2514\u2500\u2500 .mcp-standards.json\n</code></pre></p> <p>Setup: <pre><code># Configure microservice standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"microservice\",\n  \"deploymentTarget\": \"kubernetes\",\n  \"language\": \"go\",\n  \"standards\": {\n    \"required\": [\n      \"microservices-patterns\",\n      \"go-effective\",\n      \"docker-best-practices\",\n      \"kubernetes-security\",\n      \"observability-tracing\"\n    ]\n  },\n  \"validation\": {\n    \"microserviceSpecific\": {\n      \"validateDockerfile\": true,\n      \"checkK8sManifests\": true,\n      \"enforceHealthChecks\": true,\n      \"requireMetrics\": true\n    }\n  },\n  \"compliance\": {\n    \"frameworks\": [\"NIST-800-190\"],\n    \"containerSecurity\": true\n  }\n}\nEOF\n\n# Validate containerization\nmcp-standards validate \\\n  --standard docker-best-practices \\\n  ./Dockerfile\n\n# Validate Kubernetes manifests\nmcp-standards validate \\\n  --standard kubernetes-security \\\n  ./k8s/\n</code></pre></p>"},{"location":"site/examples/project-setup/#librarypackage-projects","title":"Library/Package Projects","text":""},{"location":"site/examples/project-setup/#python-package","title":"Python Package","text":"<p>Setup: <pre><code># Create package structure\nmkdir my-python-package &amp;&amp; cd my-python-package\n\n# Configure package standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"library\",\n  \"language\": \"python\",\n  \"packageManager\": \"pip\",\n  \"distributionTarget\": \"pypi\",\n  \"standards\": {\n    \"required\": [\n      \"python-packaging\",\n      \"python-pep8\",\n      \"library-design\",\n      \"documentation-sphinx\"\n    ]\n  },\n  \"validation\": {\n    \"librarySpecific\": {\n      \"validateSetupPy\": true,\n      \"checkDocstrings\": true,\n      \"enforceTyping\": true,\n      \"validateExamples\": true\n    }\n  },\n  \"documentation\": {\n    \"required\": true,\n    \"format\": \"sphinx\",\n    \"examples\": true\n  }\n}\nEOF\n\n# Package structure validation\nmcp-standards validate \\\n  --standard python-packaging \\\n  --check-structure \\\n  .\n</code></pre></p>"},{"location":"site/examples/project-setup/#npm-package","title":"NPM Package","text":"<p>Setup: <pre><code># Initialize npm package\nnpm init -y\n\n# Configure package standards\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"library\",\n  \"language\": \"typescript\",\n  \"packageManager\": \"npm\",\n  \"distributionTarget\": \"npm\",\n  \"standards\": {\n    \"required\": [\n      \"npm-packaging\",\n      \"typescript-library\",\n      \"library-design\"\n    ]\n  },\n  \"validation\": {\n    \"librarySpecific\": {\n      \"validatePackageJson\": true,\n      \"checkExports\": true,\n      \"enforceTypings\": true\n    }\n  }\n}\nEOF\n\n# Package validation\nmcp-standards validate \\\n  --standard npm-packaging \\\n  ./package.json\n</code></pre></p>"},{"location":"site/examples/project-setup/#multi-language-projects","title":"Multi-Language Projects","text":""},{"location":"site/examples/project-setup/#full-stack-application","title":"Full-Stack Application","text":"<p>Project Structure: <pre><code>full-stack-app/\n\u251c\u2500\u2500 frontend/          # React TypeScript\n\u251c\u2500\u2500 backend/           # Python FastAPI\n\u251c\u2500\u2500 mobile/            # React Native\n\u251c\u2500\u2500 shared/            # Shared types/utilities\n\u2514\u2500\u2500 .mcp-standards.json\n</code></pre></p> <p>Setup: <pre><code># Root configuration\ncat &gt; .mcp-standards.json &lt;&lt; 'EOF'\n{\n  \"projectType\": \"full_stack_application\",\n  \"architecture\": \"monorepo\",\n  \"components\": {\n    \"frontend\": {\n      \"framework\": \"react\",\n      \"language\": \"typescript\",\n      \"path\": \"./frontend\"\n    },\n    \"backend\": {\n      \"framework\": \"fastapi\",\n      \"language\": \"python\",\n      \"path\": \"./backend\"\n    },\n    \"mobile\": {\n      \"framework\": \"react-native\",\n      \"language\": \"typescript\",\n      \"path\": \"./mobile\"\n    }\n  },\n  \"standards\": {\n    \"global\": [\n      \"security-comprehensive\",\n      \"api-consistency\"\n    ],\n    \"frontend\": [\n      \"react-18-patterns\",\n      \"web-accessibility-wcag\"\n    ],\n    \"backend\": [\n      \"api-design-restful\",\n      \"python-pep8\"\n    ],\n    \"mobile\": [\n      \"react-native-patterns\",\n      \"mobile-accessibility\"\n    ]\n  },\n  \"validation\": {\n    \"crossComponent\": {\n      \"enforceApiConsistency\": true,\n      \"validateSharedTypes\": true\n    }\n  }\n}\nEOF\n\n# Component-specific validation\nmcp-standards validate ./frontend --component frontend\nmcp-standards validate ./backend --component backend\nmcp-standards validate ./mobile --component mobile\n\n# Cross-component validation\nmcp-standards validate \\\n  --cross-component \\\n  --standard api-consistency \\\n  .\n</code></pre></p>"},{"location":"site/examples/project-setup/#team-configuration-templates","title":"Team Configuration Templates","text":""},{"location":"site/examples/project-setup/#development-team-standard-config","title":"Development Team Standard Config","text":"<pre><code>{\n  \"team\": {\n    \"name\": \"Development Team\",\n    \"standards\": {\n      \"baseline\": [\n        \"security-basic\",\n        \"code-quality\",\n        \"documentation-minimal\"\n      ],\n      \"language\": {\n        \"python\": [\"python-pep8\", \"python-typing\"],\n        \"javascript\": [\"javascript-es6\", \"react-patterns\"],\n        \"typescript\": [\"typescript-strict\"]\n      }\n    },\n    \"validation\": {\n      \"preCommit\": true,\n      \"severity\": \"warning\",\n      \"autoFix\": true\n    },\n    \"reporting\": {\n      \"weekly\": true,\n      \"compliance\": true\n    }\n  }\n}\n</code></pre>"},{"location":"site/examples/project-setup/#enterprise-configuration","title":"Enterprise Configuration","text":"<pre><code>{\n  \"organization\": {\n    \"name\": \"Enterprise Corp\",\n    \"standards\": {\n      \"mandatory\": [\n        \"security-enterprise\",\n        \"compliance-sox\",\n        \"accessibility-508\",\n        \"performance-strict\"\n      ],\n      \"governance\": {\n        \"approvalRequired\": true,\n        \"auditTrail\": true,\n        \"exemptionProcess\": true\n      }\n    },\n    \"validation\": {\n      \"severity\": \"error\",\n      \"blockDeployment\": true,\n      \"requireSign off\": true\n    },\n    \"compliance\": {\n      \"frameworks\": [\n        \"SOX\",\n        \"GDPR\",\n        \"HIPAA\",\n        \"ISO-27001\"\n      ],\n      \"reporting\": {\n        \"frequency\": \"daily\",\n        \"stakeholders\": [\n          \"security-team@company.com\",\n          \"compliance@company.com\"\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"site/examples/project-setup/#validation-examples","title":"Validation Examples","text":""},{"location":"site/examples/project-setup/#successful-validation-output","title":"Successful Validation Output","text":"<pre><code>\u2705 MCP Standards Validation Report\n\n\ud83d\udcc1 Project: my-react-app (web_application)\n\ud83d\udcda Standards Applied: 4 required, 2 optional\n\ud83d\udcc5 Validation Time: 2024-01-15 14:30:00\n\n\u2705 Standards Status:\n  \u2713 react-18-patterns      (98% compliant)\n  \u2713 typescript-strict      (100% compliant)\n  \u2713 web-accessibility-wcag (89% compliant)\n  \u2713 security-web-app       (95% compliant)\n\n\ud83d\udcc8 Summary:\n  \u2713 Total Files Scanned: 47\n  \u2713 Issues Found: 3 warnings\n  \u2713 Auto-Fixed: 8 issues\n  \u2713 Coverage: 94%\n\n\u26a0\ufe0f  Remaining Issues:\n  1. src/components/UserProfile.tsx:23\n     [accessibility] Missing alt text for profile image\n     \ud83d\udca1 Suggestion: Add descriptive alt attribute\n\n  2. src/utils/api.ts:45\n     [security] Hardcoded API endpoint\n     \ud83d\udca1 Suggestion: Use environment variables\n\n  3. src/pages/Dashboard.tsx:67\n     [performance] Large bundle size detected\n     \ud83d\udca1 Suggestion: Implement code splitting\n\n\ud83d\udcc8 Compliance Report:\n  \u2713 WCAG 2.1 AA: 89% (Target: 95%)\n  \u2713 OWASP Top 10: 95% (Target: 98%)\n\n\ud83d\udd17 Next Steps:\n  1. Fix accessibility issues for WCAG compliance\n  2. Review security configuration\n  3. Consider performance optimization\n\nValidation completed in 3.2 seconds\n</code></pre>"},{"location":"site/examples/project-setup/#failed-validation-output","title":"Failed Validation Output","text":"<pre><code>\u274c MCP Standards Validation Failed\n\n\ud83d\udcc1 Project: legacy-api (api)\n\ud83d\udcda Standards Applied: 3 required\n\ud83d\udcc5 Validation Time: 2024-01-15 14:35:00\n\n\u274c Critical Issues Found: 5 errors\n\n\ud83d\udd34 ERRORS (Blocking):\n  1. src/auth.py:12\n     [security] SQL injection vulnerability\n     \ud83d\udca1 Use parameterized queries\n\n  2. src/api/users.py:34\n     [security] Unvalidated user input\n     \ud83d\udca1 Add input validation\n\n  3. requirements.txt:8\n     [security] Vulnerable dependency: requests==2.20.0\n     \ud83d\udca1 Update to requests&gt;=2.25.0\n\n  4. src/config.py:5\n     [security] Database credentials in source code\n     \ud83d\udca1 Use environment variables\n\n  5. src/api/admin.py:89\n     [security] Missing authentication check\n     \ud83d\udca1 Add @requires_auth decorator\n\n\u26a0\ufe0f  WARNINGS:\n  - 12 code style violations (auto-fixable)\n  - 3 documentation issues\n\n\ud83d\udcc8 Compliance Status:\n  \u274c OWASP API Top 10: 45% (Target: 95%)\n  \u274c PCI DSS: Failed (Critical security issues)\n\n\ud83d\udeab Deployment blocked due to security violations\n\n\ud83d\udd27 Recommended Actions:\n  1. Fix all security errors immediately\n  2. Update vulnerable dependencies\n  3. Implement proper authentication\n  4. Add input validation\n  5. Move secrets to environment variables\n\nValidation completed in 1.8 seconds\n</code></pre> <p>For more examples and advanced configurations, see: - Configuration Guide - Workflows Guide - API Reference</p>"},{"location":"site/examples/scripts/","title":"Integration Scripts Examples","text":"<p>Practical scripts for integrating MCP Standards Server into your development workflow.</p>"},{"location":"site/examples/scripts/#setup-scripts","title":"Setup Scripts","text":""},{"location":"site/examples/scripts/#project-initialization-script","title":"Project Initialization Script","text":"<pre><code>#!/bin/bash\n# scripts/init-standards.sh\n\necho \"Initializing MCP Standards for project...\"\n\n# Detect project type\nif [ -f \"package.json\" ]; then\n    PROJECT_TYPE=\"javascript\"\nelif [ -f \"requirements.txt\" ] || [ -f \"pyproject.toml\" ]; then\n    PROJECT_TYPE=\"python\"\nelif [ -f \"go.mod\" ]; then\n    PROJECT_TYPE=\"go\"\nelse\n    PROJECT_TYPE=\"generic\"\nfi\n\n# Create configuration\ncat &gt; .mcp-standards.yml &lt;&lt; EOF\nversion: 1.0\nproject:\n  type: $PROJECT_TYPE\n  name: $(basename $PWD)\n\nstandards:\n  - ${PROJECT_TYPE}-best-practices\n  - security-baseline\n  - testing-standards\n\nvalidation:\n  exclude:\n    - \"node_modules/\"\n    - \"venv/\"\n    - \".git/\"\n    - \"dist/\"\nEOF\n\necho \"Created .mcp-standards.yml with $PROJECT_TYPE defaults\"\n</code></pre>"},{"location":"site/examples/scripts/#batch-validation-script","title":"Batch Validation Script","text":"<pre><code>#!/usr/bin/env python3\n# scripts/validate-all.py\n\nimport os\nimport sys\nimport json\nfrom pathlib import Path\nfrom src.core.standards import StandardsEngine\n\ndef validate_projects(root_dir):\n    \"\"\"Validate all projects in a directory\"\"\"\n    engine = StandardsEngine()\n    results = {}\n\n    for project_dir in Path(root_dir).iterdir():\n        if project_dir.is_dir() and (project_dir / '.mcp-standards.yml').exists():\n            print(f\"Validating {project_dir.name}...\")\n\n            result = engine.validate_directory(str(project_dir))\n            results[project_dir.name] = {\n                'passed': result.passed,\n                'violations': len(result.violations),\n                'summary': result.summary\n            }\n\n    # Generate report\n    with open('validation-report.json', 'w') as f:\n        json.dump(results, f, indent=2)\n\n    # Print summary\n    total_projects = len(results)\n    passed_projects = sum(1 for r in results.values() if r['passed'])\n\n    print(f\"\\nValidation Summary:\")\n    print(f\"Total Projects: {total_projects}\")\n    print(f\"Passed: {passed_projects}\")\n    print(f\"Failed: {total_projects - passed_projects}\")\n\nif __name__ == '__main__':\n    root = sys.argv[1] if len(sys.argv) &gt; 1 else '.'\n    validate_projects(root)\n</code></pre>"},{"location":"site/examples/scripts/#cicd-integration-scripts","title":"CI/CD Integration Scripts","text":""},{"location":"site/examples/scripts/#github-actions-integration","title":"GitHub Actions Integration","text":"<pre><code># .github/actions/mcp-validate/action.yml\nname: 'MCP Standards Validation'\ndescription: 'Validate code against MCP standards'\n\ninputs:\n  config-file:\n    description: 'Path to MCP standards config'\n    default: '.mcp-standards.yml'\n\n  fail-on-violation:\n    description: 'Fail build on violations'\n    default: 'true'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Install MCP Standards Server\n      shell: bash\n      run: |\n        pip install mcp-standards-server\n\n    - name: Run Validation\n      shell: bash\n      run: |\n        mcp-standards validate \\\n          --config ${{ inputs.config-file }} \\\n          --format github \\\n          $([ \"${{ inputs.fail-on-violation }}\" = \"true\" ] &amp;&amp; echo \"--fail-on-violation\")\n</code></pre>"},{"location":"site/examples/scripts/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<pre><code># .gitlab-ci.yml\nstandards-validation:\n  stage: test\n  image: python:3.11\n\n  before_script:\n    - pip install mcp-standards-server\n\n  script:\n    - mcp-standards validate . --format gitlab &gt; validation-report.json\n\n  artifacts:\n    reports:\n      codequality: validation-report.json\n    paths:\n      - validation-report.json\n    expire_in: 1 week\n</code></pre>"},{"location":"site/examples/scripts/#migration-scripts","title":"Migration Scripts","text":""},{"location":"site/examples/scripts/#standards-migration-script","title":"Standards Migration Script","text":"<pre><code>#!/usr/bin/env python3\n# scripts/migrate-standards.py\n\nimport yaml\nimport json\nfrom pathlib import Path\n\ndef migrate_old_config(old_config_path, new_config_path):\n    \"\"\"Migrate from old standard format to new format\"\"\"\n\n    # Read old config\n    with open(old_config_path) as f:\n        if old_config_path.suffix == '.json':\n            old_config = json.load(f)\n        else:\n            old_config = yaml.safe_load(f)\n\n    # Transform to new format\n    new_config = {\n        'version': '2.0',\n        'standard': {\n            'id': old_config.get('id', 'migrated-standard'),\n            'name': old_config.get('name', 'Migrated Standard'),\n            'version': '1.0.0',\n            'category': old_config.get('type', 'general')\n        },\n        'rules': []\n    }\n\n    # Migrate rules\n    for old_rule in old_config.get('rules', []):\n        new_rule = {\n            'id': old_rule['name'],\n            'description': old_rule.get('description', ''),\n            'severity': old_rule.get('level', 'warning'),\n            'enabled': old_rule.get('active', True)\n        }\n        new_config['rules'].append(new_rule)\n\n    # Save new config\n    with open(new_config_path, 'w') as f:\n        yaml.dump(new_config, f, default_flow_style=False)\n\n    print(f\"Migrated {old_config_path} to {new_config_path}\")\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) != 3:\n        print(\"Usage: migrate-standards.py &lt;old-config&gt; &lt;new-config&gt;\")\n        sys.exit(1)\n\n    migrate_old_config(Path(sys.argv[1]), Path(sys.argv[2]))\n</code></pre>"},{"location":"site/examples/scripts/#reporting-scripts","title":"Reporting Scripts","text":""},{"location":"site/examples/scripts/#html-report-generator","title":"HTML Report Generator","text":"<pre><code>#!/usr/bin/env python3\n# scripts/generate-report.py\n\nfrom jinja2 import Template\nfrom datetime import datetime\nimport json\n\nHTML_TEMPLATE = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;MCP Standards Validation Report&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .summary { background: #f0f0f0; padding: 10px; margin: 20px 0; }\n        .passed { color: green; }\n        .failed { color: red; }\n        .violation { margin: 10px 0; padding: 10px; background: #ffe0e0; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Validation Report&lt;/h1&gt;\n    &lt;div class=\"summary\"&gt;\n        &lt;h2&gt;Summary&lt;/h2&gt;\n        &lt;p&gt;Generated: {{ timestamp }}&lt;/p&gt;\n        &lt;p&gt;Total Files: {{ summary.total_files }}&lt;/p&gt;\n        &lt;p&gt;Files with Violations: {{ summary.files_with_violations }}&lt;/p&gt;\n        &lt;p&gt;Total Violations: {{ summary.total_violations }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;h2&gt;Violations&lt;/h2&gt;\n    {% for violation in violations %}\n    &lt;div class=\"violation\"&gt;\n        &lt;strong&gt;{{ violation.file }}:{{ violation.line }}&lt;/strong&gt;&lt;br&gt;\n        Rule: {{ violation.rule_id }}&lt;br&gt;\n        {{ violation.message }}\n    &lt;/div&gt;\n    {% endfor %}\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\ndef generate_html_report(validation_results, output_path):\n    template = Template(HTML_TEMPLATE)\n\n    html = template.render(\n        timestamp=datetime.now().isoformat(),\n        summary=validation_results['summary'],\n        violations=validation_results['violations']\n    )\n\n    with open(output_path, 'w') as f:\n        f.write(html)\n\n    print(f\"Report generated: {output_path}\")\n\nif __name__ == '__main__':\n    with open('validation-results.json') as f:\n        results = json.load(f)\n\n    generate_html_report(results, 'validation-report.html')\n</code></pre>"},{"location":"site/examples/scripts/#automation-scripts","title":"Automation Scripts","text":""},{"location":"site/examples/scripts/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\n# Get list of staged files\nSTAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)\n\nif [ -z \"$STAGED_FILES\" ]; then\n    exit 0\nfi\n\n# Run validation only on staged files\necho \"Running MCP Standards validation...\"\n\nfor file in $STAGED_FILES; do\n    if [[ \"$file\" =~ \\.(py|js|go|java|rs|ts)$ ]]; then\n        mcp-standards validate \"$file\" --quiet\n        if [ $? -ne 0 ]; then\n            echo \"\u274c Validation failed for $file\"\n            echo \"Run 'mcp-standards validate $file' for details\"\n            exit 1\n        fi\n    fi\ndone\n\necho \"\u2705 All files passed validation\"\n</code></pre>"},{"location":"site/examples/scripts/#auto-fix-script","title":"Auto-fix Script","text":"<pre><code>#!/bin/bash\n# scripts/auto-fix.sh\n\necho \"Running MCP Standards auto-fix...\"\n\n# Find all source files\nfind . -name \"*.py\" -o -name \"*.js\" -o -name \"*.go\" | while read file; do\n    # Skip vendor/node_modules\n    if [[ \"$file\" =~ (vendor|node_modules|\\.git) ]]; then\n        continue\n    fi\n\n    # Run auto-fix\n    mcp-standards fix \"$file\" --backup\n\n    if [ $? -eq 0 ]; then\n        echo \"\u2713 Fixed: $file\"\n    else\n        echo \"\u2717 Could not auto-fix: $file\"\n    fi\ndone\n\necho \"Auto-fix complete. Review changes before committing.\"\n</code></pre>"},{"location":"site/examples/scripts/#related-documentation","title":"Related Documentation","text":"<ul> <li>CLI Commands</li> <li>CI/CD Integration</li> <li>Validation Examples</li> </ul>"},{"location":"site/examples/validation/","title":"Validation Examples","text":"<p>This guide provides practical examples of using the MCP Standards Server validation features.</p>"},{"location":"site/examples/validation/#basic-validation","title":"Basic Validation","text":""},{"location":"site/examples/validation/#command-line-validation","title":"Command Line Validation","text":"<pre><code># Validate a single file\nmcp-standards validate src/app.py --standard python-best-practices\n\n# Validate entire directory\nmcp-standards validate src/ --recursive\n\n# Validate with specific standards\nmcp-standards validate . --standards security,performance\n</code></pre>"},{"location":"site/examples/validation/#python-api-validation","title":"Python API Validation","text":"<pre><code>from src.core.standards import StandardsEngine\n\n# Initialize engine\nengine = StandardsEngine()\n\n# Validate code\nresults = engine.validate_file(\n    \"src/app.py\",\n    standards=[\"python-async-patterns\", \"security-best-practices\"]\n)\n\n# Process results\nfor violation in results.violations:\n    print(f\"{violation.file}:{violation.line} - {violation.message}\")\n</code></pre>"},{"location":"site/examples/validation/#custom-validation-rules","title":"Custom Validation Rules","text":""},{"location":"site/examples/validation/#define-custom-rule","title":"Define Custom Rule","text":"<pre><code># validators/custom_validator.py\nfrom src.analyzers.base import BaseAnalyzer\n\nclass CustomValidator(BaseAnalyzer):\n    def analyze(self, code: str) -&gt; list:\n        violations = []\n\n        # Check for specific patterns\n        if \"TODO\" in code:\n            violations.append({\n                \"rule\": \"no-todos\",\n                \"message\": \"Remove TODO comments before committing\",\n                \"severity\": \"warning\"\n            })\n\n        return violations\n</code></pre>"},{"location":"site/examples/validation/#register-custom-validator","title":"Register Custom Validator","text":"<pre><code># standards/custom-standard.yaml\nstandard:\n  id: \"custom-checks\"\n  name: \"Custom Project Checks\"\n\nvalidators:\n  - class: \"validators.custom_validator.CustomValidator\"\n    rules:\n      - id: \"no-todos\"\n        enabled: true\n</code></pre>"},{"location":"site/examples/validation/#validation-workflows","title":"Validation Workflows","text":""},{"location":"site/examples/validation/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\n# Run validation before commit\nmcp-standards validate --staged-only\n\nif [ $? -ne 0 ]; then\n    echo \"Validation failed. Please fix issues before committing.\"\n    exit 1\nfi\n</code></pre>"},{"location":"site/examples/validation/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/validate.yml\nname: Standards Validation\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run MCP Standards Validation\n        run: |\n          pip install mcp-standards-server\n          mcp-standards validate . --format json &gt; validation-results.json\n      - name: Upload results\n        uses: actions/upload-artifact@v4\n        with:\n          name: validation-results\n          path: validation-results.json\n</code></pre>"},{"location":"site/examples/validation/#advanced-examples","title":"Advanced Examples","text":""},{"location":"site/examples/validation/#context-aware-validation","title":"Context-Aware Validation","text":"<pre><code># Validate with project context\ncontext = {\n    \"project_type\": \"web\",\n    \"framework\": \"django\",\n    \"python_version\": \"3.11\"\n}\n\nresults = engine.validate_with_context(\"src/\", context)\n</code></pre>"},{"location":"site/examples/validation/#batch-validation","title":"Batch Validation","text":"<pre><code># Validate multiple projects\nprojects = [\"project1/\", \"project2/\", \"project3/\"]\n\nfor project in projects:\n    results = engine.validate_directory(project)\n    report = engine.generate_report(results)\n\n    with open(f\"{project}/validation-report.html\", \"w\") as f:\n        f.write(report)\n</code></pre>"},{"location":"site/examples/validation/#validation-output-formats","title":"Validation Output Formats","text":""},{"location":"site/examples/validation/#json-format","title":"JSON Format","text":"<pre><code>{\n  \"summary\": {\n    \"total_files\": 10,\n    \"files_with_violations\": 3,\n    \"total_violations\": 15\n  },\n  \"violations\": [...]\n}\n</code></pre>"},{"location":"site/examples/validation/#sarif-format","title":"SARIF Format","text":"<p>For GitHub Code Scanning integration.</p>"},{"location":"site/examples/validation/#html-report","title":"HTML Report","text":"<p>Interactive report with filtering and sorting.</p>"},{"location":"site/examples/validation/#related-documentation","title":"Related Documentation","text":"<ul> <li>Validation Rules</li> <li>Custom Standards</li> <li>CI/CD Integration</li> </ul>"},{"location":"site/guides/cicd-integration/","title":"CI/CD Integration Guide","text":"<p>Integrate MCP Standards Server into your CI/CD pipeline for automated code quality enforcement.</p>"},{"location":"site/guides/cicd-integration/#github-actions","title":"GitHub Actions","text":""},{"location":"site/guides/cicd-integration/#basic-workflow","title":"Basic Workflow","text":"<p>Create <code>.github/workflows/standards-check.yml</code>:</p> <pre><code>name: Standards Check\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install MCP Standards Server\n      run: |\n        pip install mcp-standards-server\n\n    - name: Sync Standards\n      run: |\n        mcp-standards sync\n\n    - name: Validate Code\n      run: |\n        mcp-standards validate --format sarif --output results.sarif\n\n    - name: Upload SARIF to GitHub\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: results.sarif\n</code></pre>"},{"location":"site/guides/cicd-integration/#advanced-workflow-with-caching","title":"Advanced Workflow with Caching","text":"<pre><code>name: Standards Check (Advanced)\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  PYTHON_VERSION: '3.11'\n  MCP_CACHE_DIR: ~/.mcp-standards/cache\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0  # Full history for better analysis\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n        cache: 'pip'\n\n    - name: Cache MCP Standards\n      uses: actions/cache@v3\n      with:\n        path: ${{ env.MCP_CACHE_DIR }}\n        key: mcp-standards-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}\n        restore-keys: |\n          mcp-standards-${{ runner.os }}-\n\n    - name: Install dependencies\n      run: |\n        pip install mcp-standards-server\n        pip install -r requirements.txt\n\n    - name: Configure MCP Standards\n      run: |\n        mcp-standards config init\n        mcp-standards config set validation.severity error\n        mcp-standards config set validation.auto_fix false\n\n    - name: Sync Standards\n      run: |\n        mcp-standards sync --force\n\n    - name: Validate Changed Files Only\n      if: github.event_name == 'pull_request'\n      run: |\n        # Get list of changed files\n        git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD &gt; changed_files.txt\n\n        # Validate only changed files\n        cat changed_files.txt | xargs -I {} mcp-standards validate {} --format sarif --output results.sarif\n\n    - name: Validate All Files\n      if: github.event_name == 'push'\n      run: |\n        mcp-standards validate . --format sarif --output results.sarif\n\n    - name: Upload SARIF Results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: results.sarif\n\n    - name: Comment on PR\n      if: github.event_name == 'pull_request' &amp;&amp; failure()\n      uses: actions/github-script@v6\n      with:\n        script: |\n          const fs = require('fs');\n          const results = JSON.parse(fs.readFileSync('results.sarif', 'utf8'));\n\n          let comment = '## \ud83d\udea8 Standards Validation Failed\\n\\n';\n\n          results.runs[0].results.forEach(result =&gt; {\n            const rule = result.ruleId;\n            const message = result.message.text;\n            const location = result.locations[0].physicalLocation;\n            const file = location.artifactLocation.uri;\n            const line = location.region.startLine;\n\n            comment += `- **${rule}** in \\`${file}:${line}\\`: ${message}\\n`;\n          });\n\n          github.rest.issues.createComment({\n            issue_number: context.issue.number,\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            body: comment\n          });\n</code></pre>"},{"location":"site/guides/cicd-integration/#matrix-strategy-for-multiple-languages","title":"Matrix Strategy for Multiple Languages","text":"<pre><code>name: Multi-Language Standards Check\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [python, javascript, typescript, go]\n        include:\n          - language: python\n            path: \"**/*.py\"\n            standards: \"python-pep8,python-security\"\n          - language: javascript\n            path: \"**/*.js\"\n            standards: \"javascript-es6,security-eslint\"\n          - language: typescript\n            path: \"**/*.ts\"\n            standards: \"typescript-strict,react-patterns\"\n          - language: go\n            path: \"**/*.go\"\n            standards: \"go-effective,go-security\"\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install MCP Standards\n      run: pip install mcp-standards-server\n\n    - name: Validate ${{ matrix.language }} code\n      run: |\n        mcp-standards validate \\\n          --language ${{ matrix.language }} \\\n          --standard ${{ matrix.standards }} \\\n          --format sarif \\\n          --output ${{ matrix.language }}-results.sarif \\\n          .\n\n    - name: Upload SARIF for ${{ matrix.language }}\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: ${{ matrix.language }}-results.sarif\n        category: ${{ matrix.language }}\n</code></pre>"},{"location":"site/guides/cicd-integration/#gitlab-ci","title":"GitLab CI","text":""},{"location":"site/guides/cicd-integration/#basic-pipeline","title":"Basic Pipeline","text":"<p>Create <code>.gitlab-ci.yml</code>:</p> <pre><code>stages:\n  - validate\n  - report\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  MCP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/mcp\"\n\ncache:\n  paths:\n    - .cache/pip\n    - .cache/mcp\n\nstandards_check:\n  stage: validate\n  image: python:3.11\n\n  before_script:\n    - pip install mcp-standards-server\n    - mcp-standards config init\n    - mcp-standards sync\n\n  script:\n    - mcp-standards validate --format junit --output junit-report.xml\n\n  artifacts:\n    reports:\n      junit: junit-report.xml\n    paths:\n      - junit-report.xml\n    expire_in: 1 week\n\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n</code></pre>"},{"location":"site/guides/cicd-integration/#advanced-pipeline-with-security-scanning","title":"Advanced Pipeline with Security Scanning","text":"<pre><code>stages:\n  - prepare\n  - validate\n  - security\n  - report\n\nvariables:\n  SECURE_LOG_LEVEL: info\n\ninclude:\n  - template: Security/SAST.gitlab-ci.yml\n  - template: Security/Secret-Detection.gitlab-ci.yml\n\nprepare_standards:\n  stage: prepare\n  image: python:3.11\n  script:\n    - pip install mcp-standards-server\n    - mcp-standards sync\n    - mcp-standards cache warm\n  artifacts:\n    paths:\n      - .mcp-standards/\n    expire_in: 1 hour\n\nvalidate_python:\n  stage: validate\n  image: python:3.11\n  dependencies:\n    - prepare_standards\n  script:\n    - pip install mcp-standards-server\n    - mcp-standards validate --language python --format sarif --output python-results.sarif\n  artifacts:\n    reports:\n      sast: python-results.sarif\n    expire_in: 1 week\n\nvalidate_javascript:\n  stage: validate\n  image: node:18\n  dependencies:\n    - prepare_standards\n  before_script:\n    - apt-get update &amp;&amp; apt-get install -y python3 python3-pip\n    - pip3 install mcp-standards-server\n  script:\n    - mcp-standards validate --language javascript --format sarif --output js-results.sarif\n  artifacts:\n    reports:\n      sast: js-results.sarif\n    expire_in: 1 week\n\nsecurity_scan:\n  stage: security\n  dependencies:\n    - prepare_standards\n  script:\n    - mcp-standards validate --standard security-comprehensive --format sarif --output security-results.sarif\n  artifacts:\n    reports:\n      sast: security-results.sarif\n</code></pre>"},{"location":"site/guides/cicd-integration/#jenkins","title":"Jenkins","text":""},{"location":"site/guides/cicd-integration/#declarative-pipeline","title":"Declarative Pipeline","text":"<p>Create <code>Jenkinsfile</code>:</p> <pre><code>pipeline {\n    agent any\n\n    environment {\n        PYTHON_VERSION = '3.11'\n        MCP_CACHE_DIR = '${WORKSPACE}/.mcp-cache'\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh '''\n                    python${PYTHON_VERSION} -m venv venv\n                    . venv/bin/activate\n                    pip install mcp-standards-server\n                '''\n            }\n        }\n\n        stage('Sync Standards') {\n            steps {\n                sh '''\n                    . venv/bin/activate\n                    mcp-standards sync\n                '''\n            }\n        }\n\n        stage('Validate Code') {\n            parallel {\n                stage('Python Validation') {\n                    steps {\n                        sh '''\n                            . venv/bin/activate\n                            mcp-standards validate \\\n                                --language python \\\n                                --format junit \\\n                                --output python-results.xml\n                        '''\n                    }\n                    post {\n                        always {\n                            junit 'python-results.xml'\n                        }\n                    }\n                }\n\n                stage('Security Validation') {\n                    steps {\n                        sh '''\n                            . venv/bin/activate\n                            mcp-standards validate \\\n                                --standard security-comprehensive \\\n                                --format sarif \\\n                                --output security-results.sarif\n                        '''\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: 'security-results.sarif'\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n        failure {\n            emailext (\n                subject: \"Standards Validation Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build failed. Check console output at ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"site/guides/cicd-integration/#scripted-pipeline-with-docker","title":"Scripted Pipeline with Docker","text":"<pre><code>node {\n    def image\n\n    stage('Build Docker Image') {\n        checkout scm\n        image = docker.build(\"mcp-standards:${env.BUILD_ID}\")\n    }\n\n    stage('Validate in Container') {\n        image.inside {\n            sh '''\n                mcp-standards sync\n                mcp-standards validate --format junit --output results.xml\n            '''\n        }\n    }\n\n    stage('Publish Results') {\n        junit 'results.xml'\n\n        if (currentBuild.result == 'FAILURE') {\n            slackSend(\n                channel: '#development',\n                color: 'danger',\n                message: \"Standards validation failed for ${env.JOB_NAME} ${env.BUILD_NUMBER}\"\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"site/guides/cicd-integration/#azure-devops","title":"Azure DevOps","text":""},{"location":"site/guides/cicd-integration/#pipeline-yaml","title":"Pipeline YAML","text":"<p>Create <code>azure-pipelines.yml</code>:</p> <pre><code>trigger:\n- main\n- develop\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  pythonVersion: '3.11'\n  mcpCacheDir: '$(Pipeline.Workspace)/.mcp-cache'\n\nstages:\n- stage: Validate\n  displayName: 'Standards Validation'\n  jobs:\n  - job: ValidateCode\n    displayName: 'Validate Code Standards'\n\n    steps:\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: $(pythonVersion)\n      displayName: 'Use Python $(pythonVersion)'\n\n    - task: Cache@2\n      inputs:\n        key: 'mcp-standards | \"$(Agent.OS)\" | requirements.txt'\n        restoreKeys: |\n          mcp-standards | \"$(Agent.OS)\"\n        path: $(mcpCacheDir)\n      displayName: 'Cache MCP Standards'\n\n    - script: |\n        pip install mcp-standards-server\n        mcp-standards config init\n        mcp-standards config set standards.cache_directory $(mcpCacheDir)\n      displayName: 'Install MCP Standards'\n\n    - script: |\n        mcp-standards sync\n      displayName: 'Sync Standards'\n\n    - script: |\n        mcp-standards validate --format junit --output $(System.DefaultWorkingDirectory)/test-results.xml\n      displayName: 'Validate Code'\n\n    - task: PublishTestResults@2\n      condition: always()\n      inputs:\n        testResultsFormat: 'JUnit'\n        testResultsFiles: '**/test-results.xml'\n        searchFolder: '$(System.DefaultWorkingDirectory)'\n      displayName: 'Publish Test Results'\n\n    - script: |\n        mcp-standards validate --format sarif --output $(System.DefaultWorkingDirectory)/sarif-results.sarif\n      displayName: 'Generate SARIF Results'\n\n    - task: PublishBuildArtifacts@1\n      inputs:\n        pathToPublish: '$(System.DefaultWorkingDirectory)/sarif-results.sarif'\n        artifactName: 'sarif-results'\n      displayName: 'Publish SARIF Results'\n</code></pre>"},{"location":"site/guides/cicd-integration/#circleci","title":"CircleCI","text":""},{"location":"site/guides/cicd-integration/#configuration","title":"Configuration","text":"<p>Create <code>.circleci/config.yml</code>:</p> <pre><code>version: 2.1\n\norbs:\n  python: circleci/python@2.0.0\n\njobs:\n  validate-standards:\n    docker:\n      - image: cimg/python:3.11\n\n    steps:\n      - checkout\n\n      - restore_cache:\n          keys:\n            - mcp-standards-v1-{{ checksum \"requirements.txt\" }}\n            - mcp-standards-v1-\n\n      - run:\n          name: Install MCP Standards\n          command: |\n            pip install mcp-standards-server\n            mcp-standards config init\n\n      - run:\n          name: Sync Standards\n          command: mcp-standards sync\n\n      - save_cache:\n          key: mcp-standards-v1-{{ checksum \"requirements.txt\" }}\n          paths:\n            - ~/.mcp-standards/cache\n\n      - run:\n          name: Validate Code\n          command: |\n            mcp-standards validate \\\n              --format junit \\\n              --output test-results.xml\n\n      - store_test_results:\n          path: test-results.xml\n\n      - store_artifacts:\n          path: test-results.xml\n          destination: test-results\n\nworkflows:\n  version: 2\n  validate:\n    jobs:\n      - validate-standards\n</code></pre>"},{"location":"site/guides/cicd-integration/#docker-integration","title":"Docker Integration","text":""},{"location":"site/guides/cicd-integration/#dockerfile-for-ci","title":"Dockerfile for CI","text":"<pre><code>FROM python:3.11-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install MCP Standards Server\nRUN pip install mcp-standards-server\n\n# Create cache directory\nRUN mkdir -p /app/.mcp-standards/cache\nWORKDIR /app\n\n# Pre-sync standards for faster CI\nRUN mcp-standards config init\nRUN mcp-standards sync\n\n# Copy validation script\nCOPY validate.sh /usr/local/bin/validate\nRUN chmod +x /usr/local/bin/validate\n\nENTRYPOINT [\"validate\"]\n</code></pre>"},{"location":"site/guides/cicd-integration/#validation-script","title":"Validation Script","text":"<p>Create <code>validate.sh</code>:</p> <pre><code>#!/bin/bash\nset -e\n\n# Configuration\nFORMAT=${MCP_FORMAT:-junit}\nOUTPUT=${MCP_OUTPUT:-results.xml}\nLANGUAGE=${MCP_LANGUAGE:-auto}\nSEVERITY=${MCP_SEVERITY:-warning}\n\n# Copy source code to container\ncp -r /src/* /app/\n\n# Update standards if needed\nif [ \"$MCP_UPDATE_STANDARDS\" = \"true\" ]; then\n    mcp-standards sync --force\nfi\n\n# Run validation\necho \"Running MCP Standards validation...\"\nmcp-standards validate \\\n    --language \"$LANGUAGE\" \\\n    --format \"$FORMAT\" \\\n    --output \"$OUTPUT\" \\\n    --severity \"$SEVERITY\" \\\n    /app\n\necho \"Validation complete. Results saved to $OUTPUT\"\n</code></pre>"},{"location":"site/guides/cicd-integration/#pre-commit-hooks","title":"Pre-commit Hooks","text":""},{"location":"site/guides/cicd-integration/#setup","title":"Setup","text":"<p>Create <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: mcp-standards-validate\n        name: MCP Standards Validation\n        entry: mcp-standards validate\n        language: system\n        files: \\.(py|js|ts|go|rs)$\n        pass_filenames: true\n        args: [--severity, error, --fix]\n</code></pre>"},{"location":"site/guides/cicd-integration/#install","title":"Install","text":"<pre><code># Install pre-commit\npip install pre-commit\n\n# Install hooks\npre-commit install\n\n# Test hooks\npre-commit run --all-files\n</code></pre>"},{"location":"site/guides/cicd-integration/#integration-best-practices","title":"Integration Best Practices","text":""},{"location":"site/guides/cicd-integration/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Cache standards data between builds</li> <li>Validate only changed files in PR builds</li> <li>Use parallel validation for multiple languages</li> <li>Pre-warm cache in Docker images</li> </ol>"},{"location":"site/guides/cicd-integration/#security-considerations","title":"Security Considerations","text":"<ol> <li>Limit network access in CI environments</li> <li>Use secrets for private repositories</li> <li>Scan for sensitive data before validation</li> <li>Isolate validation in containers</li> </ol>"},{"location":"site/guides/cicd-integration/#error-handling","title":"Error Handling","text":"<ol> <li>Continue on non-critical errors</li> <li>Provide clear error messages</li> <li>Log validation details</li> <li>Notify teams of critical failures</li> </ol>"},{"location":"site/guides/cicd-integration/#reporting","title":"Reporting","text":"<ol> <li>Use SARIF format for security tools integration</li> <li>Generate JUnit reports for test dashboards</li> <li>Archive artifacts for investigation</li> <li>Trend analysis over time</li> </ol> <p>For more CI/CD examples and troubleshooting, see our GitHub repository and community discussions.</p>"},{"location":"site/guides/configuration/","title":"Configuration Guide","text":"<p>Configure MCP Standards Server to match your workflow and requirements.</p>"},{"location":"site/guides/configuration/#configuration-file-location","title":"Configuration File Location","text":"<p>The configuration file is located at: - Linux/macOS: <code>~/.mcp-standards/config.yaml</code> - Windows: <code>%APPDATA%\\mcp-standards\\config.yaml</code></p>"},{"location":"site/guides/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"site/guides/configuration/#default-configuration","title":"Default Configuration","text":"<pre><code># ~/.mcp-standards/config.yaml\nserver:\n  host: \"0.0.0.0\"\n  port: 8080\n  enable_cors: true\n\nstandards:\n  repository_url: \"https://github.com/williamzujkowski/standards\"\n  sync_interval: 3600  # 1 hour\n  cache_directory: \"~/.mcp-standards/cache\"\n\nvalidation:\n  auto_fix: false\n  severity_level: \"warning\"\n  output_format: \"json\"\n\nlogging:\n  level: \"INFO\"\n  file: \"~/.mcp-standards/mcp-server.log\"\n</code></pre>"},{"location":"site/guides/configuration/#server-configuration","title":"Server Configuration","text":""},{"location":"site/guides/configuration/#network-settings","title":"Network Settings","text":"<pre><code>server:\n  host: \"127.0.0.1\"  # Localhost only\n  port: 8081         # Custom port\n  enable_cors: true  # Enable CORS for web clients\n  cors_origins:      # Specific origins\n    - \"http://localhost:3000\"\n    - \"https://your-domain.com\"\n</code></pre>"},{"location":"site/guides/configuration/#security-settings","title":"Security Settings","text":"<pre><code>server:\n  auth:\n    enabled: true\n    api_key: \"your-secret-api-key\"\n    token_expiry: 86400  # 24 hours\n\n  rate_limiting:\n    enabled: true\n    requests_per_minute: 100\n    burst_size: 20\n</code></pre>"},{"location":"site/guides/configuration/#standards-configuration","title":"Standards Configuration","text":""},{"location":"site/guides/configuration/#repository-settings","title":"Repository Settings","text":"<pre><code>standards:\n  repository_url: \"https://github.com/your-org/standards\"\n  branch: \"main\"\n  sync_interval: 1800  # 30 minutes\n  auto_sync: true\n\n  # Local standards directory\n  local_directory: \"/path/to/local/standards\"\n\n  # Exclude specific standards\n  exclude_patterns:\n    - \"deprecated/*\"\n    - \"experimental/*\"\n</code></pre>"},{"location":"site/guides/configuration/#cache-configuration","title":"Cache Configuration","text":"<pre><code>standards:\n  cache_directory: \"~/.mcp-standards/cache\"\n  cache_ttl: 3600  # 1 hour\n  max_cache_size: \"1GB\"\n\n  # Redis cache (optional)\n  redis:\n    enabled: true\n    host: \"localhost\"\n    port: 6379\n    db: 0\n</code></pre>"},{"location":"site/guides/configuration/#validation-configuration","title":"Validation Configuration","text":""},{"location":"site/guides/configuration/#default-validation-settings","title":"Default Validation Settings","text":"<pre><code>validation:\n  auto_fix: true\n  severity_level: \"error\"  # error, warning, info\n  output_format: \"sarif\"   # json, junit, sarif, text\n\n  # Language-specific settings\n  languages:\n    python:\n      enabled: true\n      standards: [\"python-pep8\", \"python-security\"]\n\n    javascript:\n      enabled: true\n      standards: [\"javascript-es6\", \"react-patterns\"]\n\n    go:\n      enabled: true\n      standards: [\"go-effective\", \"go-security\"]\n</code></pre>"},{"location":"site/guides/configuration/#custom-validators","title":"Custom Validators","text":"<pre><code>validation:\n  custom_validators:\n    - name: \"company-style\"\n      path: \"/path/to/custom/validator.py\"\n      languages: [\"python\", \"javascript\"]\n\n    - name: \"security-scanner\"\n      command: \"custom-security-tool\"\n      args: [\"--format\", \"json\"]\n</code></pre>"},{"location":"site/guides/configuration/#integration-configuration","title":"Integration Configuration","text":""},{"location":"site/guides/configuration/#ide-integration","title":"IDE Integration","text":"<pre><code>ide:\n  vscode:\n    enabled: true\n    real_time_validation: true\n    auto_fix_on_save: true\n\n  jetbrains:\n    enabled: true\n    plugin_port: 8082\n</code></pre>"},{"location":"site/guides/configuration/#cicd-integration","title":"CI/CD Integration","text":"<pre><code>ci_cd:\n  github_actions:\n    enabled: true\n    fail_on_error: true\n    comment_pr: true\n\n  jenkins:\n    enabled: true\n    webhook_url: \"https://jenkins.company.com/webhook\"\n</code></pre>"},{"location":"site/guides/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"site/guides/configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code>performance:\n  max_workers: 4\n  batch_size: 100\n  timeout: 30\n\n  # Memory limits\n  max_memory_mb: 1024\n  gc_threshold: 0.8\n</code></pre>"},{"location":"site/guides/configuration/#monitoring","title":"Monitoring","text":"<pre><code>monitoring:\n  metrics:\n    enabled: true\n    port: 9090\n    path: \"/metrics\"\n\n  health_check:\n    enabled: true\n    endpoint: \"/health\"\n    interval: 30\n</code></pre>"},{"location":"site/guides/configuration/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> <pre><code># Server settings\nexport MCP_SERVER_HOST=\"0.0.0.0\"\nexport MCP_SERVER_PORT=\"8080\"\n\n# Standards settings\nexport MCP_STANDARDS_REPO_URL=\"https://github.com/your-org/standards\"\nexport MCP_CACHE_DIR=\"/custom/cache/path\"\n\n# Validation settings\nexport MCP_AUTO_FIX=\"true\"\nexport MCP_SEVERITY_LEVEL=\"warning\"\n</code></pre>"},{"location":"site/guides/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Validate your configuration:</p> <pre><code># Check configuration syntax\nmcp-standards config --validate\n\n# Show current configuration\nmcp-standards config --show\n\n# Test configuration\nmcp-standards config --test\n</code></pre>"},{"location":"site/guides/configuration/#multiple-environments","title":"Multiple Environments","text":""},{"location":"site/guides/configuration/#development-environment","title":"Development Environment","text":"<pre><code># config.dev.yaml\nserver:\n  host: \"127.0.0.1\"\n  port: 8080\n\nvalidation:\n  auto_fix: true\n  severity_level: \"warning\"\n</code></pre>"},{"location":"site/guides/configuration/#production-environment","title":"Production Environment","text":"<pre><code># config.prod.yaml\nserver:\n  host: \"0.0.0.0\"\n  port: 80\n\nvalidation:\n  auto_fix: false\n  severity_level: \"error\"\n\nmonitoring:\n  metrics:\n    enabled: true\n</code></pre>"},{"location":"site/guides/configuration/#using-environment-specific-configs","title":"Using Environment-Specific Configs","text":"<pre><code># Use specific config file\nmcp-standards serve --config config.prod.yaml\n\n# Set environment\nexport MCP_ENVIRONMENT=\"production\"\nmcp-standards serve\n</code></pre>"},{"location":"site/guides/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"site/guides/configuration/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port already in use <pre><code># Check what's using the port\nlsof -i :8080\n\n# Use different port\nmcp-standards serve --port 8081\n</code></pre></p> </li> <li> <p>Permission denied <pre><code># Fix cache directory permissions\nchmod 755 ~/.mcp-standards/cache\n</code></pre></p> </li> <li> <p>Invalid YAML syntax <pre><code># Validate YAML\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre></p> </li> </ol> <p>For more troubleshooting, see the Troubleshooting Guide.</p>"},{"location":"site/guides/ide-integration/","title":"IDE Integration Guide","text":"<p>Integrate MCP Standards Server with your favorite IDE for real-time validation and suggestions.</p>"},{"location":"site/guides/ide-integration/#supported-ides","title":"Supported IDEs","text":"<ul> <li>Visual Studio Code - Official extension available</li> <li>JetBrains IDEs - Plugin for IntelliJ, PyCharm, WebStorm, etc.</li> <li>Vim/Neovim - Language Server Protocol support</li> <li>Emacs - LSP integration</li> <li>Sublime Text - Package available</li> </ul>"},{"location":"site/guides/ide-integration/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"site/guides/ide-integration/#installation","title":"Installation","text":"<ol> <li>Install the MCP Standards extension from VS Code Marketplace</li> <li>Ensure MCP Standards Server is installed: <code>pip install mcp-standards-server</code></li> <li>Start the MCP server: <code>mcp-standards serve</code></li> </ol>"},{"location":"site/guides/ide-integration/#configuration","title":"Configuration","text":"<p>Add to your VS Code settings (<code>settings.json</code>):</p> <pre><code>{\n  \"mcpStandards.serverUrl\": \"http://localhost:8080\",\n  \"mcpStandards.enableRealTimeValidation\": true,\n  \"mcpStandards.autoFixOnSave\": true,\n  \"mcpStandards.showInlineHints\": true,\n  \"mcpStandards.validationSeverity\": \"warning\"\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#features","title":"Features","text":"<ul> <li>Real-time validation as you type</li> <li>Auto-fix on save for common issues</li> <li>Inline hints and suggestions</li> <li>Quick fixes via code actions</li> <li>Standards explorer in sidebar</li> <li>Project analysis with applicable standards</li> </ul>"},{"location":"site/guides/ide-integration/#commands","title":"Commands","text":"<p>Access via Command Palette (<code>Ctrl+Shift+P</code>):</p> <ul> <li><code>MCP Standards: Validate Current File</code></li> <li><code>MCP Standards: Validate Workspace</code></li> <li><code>MCP Standards: Fix All Issues</code></li> <li><code>MCP Standards: Show Applicable Standards</code></li> <li><code>MCP Standards: Refresh Standards</code></li> </ul>"},{"location":"site/guides/ide-integration/#workspace-configuration","title":"Workspace Configuration","text":"<p>Create <code>.vscode/settings.json</code> in your project:</p> <pre><code>{\n  \"mcpStandards.projectType\": \"web_application\",\n  \"mcpStandards.framework\": \"react\",\n  \"mcpStandards.enabledStandards\": [\n    \"react-patterns\",\n    \"typescript-strict\",\n    \"accessibility-wcag\"\n  ],\n  \"mcpStandards.excludePatterns\": [\n    \"**/node_modules/**\",\n    \"**/*.min.js\",\n    \"**/dist/**\"\n  ]\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#jetbrains-ides","title":"JetBrains IDEs","text":""},{"location":"site/guides/ide-integration/#installation_1","title":"Installation","text":"<ol> <li>Go to <code>File &gt; Settings &gt; Plugins</code></li> <li>Search for \"MCP Standards\"</li> <li>Install and restart IDE</li> <li>Configure server connection in <code>Settings &gt; Tools &gt; MCP Standards</code></li> </ol>"},{"location":"site/guides/ide-integration/#configuration_1","title":"Configuration","text":"<p>Settings &gt; Tools &gt; MCP Standards:</p> <ul> <li>Server URL: <code>http://localhost:8080</code></li> <li>Enable real-time validation: \u2713</li> <li>Auto-fix on save: \u2713</li> <li>Validation level: Warning</li> <li>Show notifications: \u2713</li> </ul>"},{"location":"site/guides/ide-integration/#features_1","title":"Features","text":"<ul> <li>Code inspections with standards violations</li> <li>Quick fixes and suggestions</li> <li>Project analysis tool window</li> <li>Standards documentation in tooltips</li> <li>Integration with Code Cleanup</li> </ul>"},{"location":"site/guides/ide-integration/#custom-inspection-profiles","title":"Custom Inspection Profiles","text":"<p>Create project-specific inspection profiles:</p> <ol> <li><code>File &gt; Settings &gt; Editor &gt; Inspections</code></li> <li>Create new profile: \"MCP Standards\"</li> <li>Enable MCP Standards inspections</li> <li>Configure severity levels</li> <li>Apply to project</li> </ol>"},{"location":"site/guides/ide-integration/#vimneovim","title":"Vim/Neovim","text":""},{"location":"site/guides/ide-integration/#setup-with-coc-conquer-of-completion","title":"Setup with CoC (Conquer of Completion)","text":"<ol> <li>Install CoC: coc.nvim</li> <li>Install MCP Standards language server:    <pre><code>pip install mcp-standards-lsp\n</code></pre></li> <li>Configure CoC (<code>~/.vim/coc-settings.json</code>):</li> </ol> <pre><code>{\n  \"languageserver\": {\n    \"mcp-standards\": {\n      \"command\": \"mcp-standards-lsp\",\n      \"args\": [\"--stdio\"],\n      \"filetypes\": [\"python\", \"javascript\", \"typescript\", \"go\", \"rust\"],\n      \"settings\": {\n        \"mcpStandards\": {\n          \"serverUrl\": \"http://localhost:8080\",\n          \"enableRealTimeValidation\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#setup-with-native-lsp-neovim-05","title":"Setup with Native LSP (Neovim 0.5+)","text":"<pre><code>-- ~/.config/nvim/lua/lsp-config.lua\nlocal lspconfig = require('lspconfig')\n\nlspconfig.mcp_standards.setup{\n  cmd = {'mcp-standards-lsp', '--stdio'},\n  filetypes = {'python', 'javascript', 'typescript', 'go', 'rust'},\n  settings = {\n    mcpStandards = {\n      serverUrl = 'http://localhost:8080',\n      enableRealTimeValidation = true\n    }\n  }\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#key-mappings","title":"Key Mappings","text":"<p>Add to your Vim configuration:</p> <pre><code>\" Validate current file\nnnoremap &lt;leader&gt;mv :call CocAction('runCommand', 'mcp-standards.validate')&lt;CR&gt;\n\n\" Show applicable standards\nnnoremap &lt;leader&gt;ms :call CocAction('runCommand', 'mcp-standards.showStandards')&lt;CR&gt;\n\n\" Fix current line\nnnoremap &lt;leader&gt;mf :call CocAction('codeAction', 'line')&lt;CR&gt;\n</code></pre>"},{"location":"site/guides/ide-integration/#emacs","title":"Emacs","text":""},{"location":"site/guides/ide-integration/#setup-with-lsp-mode","title":"Setup with LSP Mode","text":"<ol> <li>Install <code>lsp-mode</code> and <code>mcp-standards-lsp</code></li> <li>Add to your Emacs configuration:</li> </ol> <pre><code>;; ~/.emacs.d/init.el\n(use-package lsp-mode\n  :hook ((python-mode js-mode typescript-mode go-mode rust-mode) . lsp)\n  :config\n  (lsp-register-client\n   (make-lsp-client\n    :new-connection (lsp-stdio-connection \"mcp-standards-lsp\")\n    :major-modes '(python-mode js-mode typescript-mode go-mode rust-mode)\n    :server-id 'mcp-standards)))\n\n;; Optional: UI improvements\n(use-package lsp-ui :commands lsp-ui-mode)\n(use-package company-lsp :commands company-lsp)\n</code></pre>"},{"location":"site/guides/ide-integration/#key-bindings","title":"Key Bindings","text":"<pre><code>;; Add to your configuration\n(define-key lsp-mode-map (kbd \"C-c m v\") #'lsp-mcp-standards-validate)\n(define-key lsp-mode-map (kbd \"C-c m s\") #'lsp-mcp-standards-show-applicable)\n(define-key lsp-mode-map (kbd \"C-c m f\") #'lsp-execute-code-action)\n</code></pre>"},{"location":"site/guides/ide-integration/#sublime-text","title":"Sublime Text","text":""},{"location":"site/guides/ide-integration/#installation_2","title":"Installation","text":"<ol> <li>Install Package Control if not already installed</li> <li>Install \"MCP Standards\" package</li> <li>Configure in <code>Preferences &gt; Package Settings &gt; MCP Standards</code></li> </ol>"},{"location":"site/guides/ide-integration/#configuration_2","title":"Configuration","text":"<pre><code>{\n  \"server_url\": \"http://localhost:8080\",\n  \"enable_real_time_validation\": true,\n  \"auto_fix_on_save\": true,\n  \"validation_severity\": \"warning\",\n  \"show_in_status_bar\": true\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#generic-language-server-integration","title":"Generic Language Server Integration","text":"<p>For editors supporting Language Server Protocol:</p>"},{"location":"site/guides/ide-integration/#installation_3","title":"Installation","text":"<pre><code>pip install mcp-standards-lsp\n</code></pre>"},{"location":"site/guides/ide-integration/#configuration-template","title":"Configuration Template","text":"<pre><code>{\n  \"command\": \"mcp-standards-lsp\",\n  \"args\": [\"--stdio\"],\n  \"filetypes\": [\"python\", \"javascript\", \"typescript\", \"go\", \"rust\"],\n  \"initializationOptions\": {\n    \"serverUrl\": \"http://localhost:8080\",\n    \"enableRealTimeValidation\": true,\n    \"autoFixOnSave\": true\n  }\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"site/guides/ide-integration/#project-specific-standards","title":"Project-Specific Standards","text":"<p>Create <code>.mcp-standards.json</code> in your project root:</p> <pre><code>{\n  \"projectType\": \"web_application\",\n  \"language\": \"typescript\",\n  \"framework\": \"react\",\n  \"standards\": {\n    \"required\": [\n      \"react-patterns\",\n      \"typescript-strict\"\n    ],\n    \"optional\": [\n      \"accessibility-wcag\",\n      \"performance-optimization\"\n    ]\n  },\n  \"validation\": {\n    \"severity\": \"warning\",\n    \"autoFix\": true,\n    \"excludePatterns\": [\n      \"**/node_modules/**\",\n      \"**/*.test.ts\"\n    ]\n  }\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#custom-standards-development","title":"Custom Standards Development","text":"<p>For developing custom standards with IDE support:</p> <pre><code>{\n  \"development\": {\n    \"customStandardsPath\": \"./standards\",\n    \"watchForChanges\": true,\n    \"validateCustomStandards\": true\n  }\n}\n</code></pre>"},{"location":"site/guides/ide-integration/#troubleshooting-ide-integration","title":"Troubleshooting IDE Integration","text":""},{"location":"site/guides/ide-integration/#common-issues","title":"Common Issues","text":"<p>Extension not working: 1. Check MCP server is running: <code>curl http://localhost:8080/health</code> 2. Verify extension is enabled in IDE 3. Check extension logs for errors 4. Restart IDE and server</p> <p>Slow performance: 1. Reduce validation frequency 2. Exclude large directories 3. Increase server workers 4. Enable incremental validation</p> <p>Network issues: 1. Check firewall settings 2. Verify server URL in configuration 3. Test connection manually</p>"},{"location":"site/guides/ide-integration/#debugging","title":"Debugging","text":"<p>Enable debug mode in IDE extension:</p> <pre><code>{\n  \"mcpStandards.debug\": true,\n  \"mcpStandards.logLevel\": \"debug\"\n}\n</code></pre> <p>Check logs: - VS Code: Output panel &gt; MCP Standards - JetBrains: Help &gt; Show Log in Explorer - Vim/Neovim: <code>:CocInfo</code> or LSP logs</p>"},{"location":"site/guides/ide-integration/#best-practices","title":"Best Practices","text":""},{"location":"site/guides/ide-integration/#team-configuration","title":"Team Configuration","text":"<ol> <li>Shared settings: Commit IDE configuration to repository</li> <li>Consistent standards: Use same standards across team</li> <li>Pre-commit hooks: Validate before commits</li> <li>Documentation: Document team-specific setup</li> </ol>"},{"location":"site/guides/ide-integration/#performance-tips","title":"Performance Tips","text":"<ol> <li>Selective validation: Only validate changed files</li> <li>Background processing: Use async validation</li> <li>Cache optimization: Warm cache for common standards</li> <li>Resource limits: Configure appropriate limits</li> </ol>"},{"location":"site/guides/ide-integration/#security-considerations","title":"Security Considerations","text":"<ol> <li>Server access: Restrict server to localhost in development</li> <li>Authentication: Use API keys in shared environments</li> <li>Network security: Use HTTPS in production</li> <li>Code privacy: Be aware of what code is analyzed</li> </ol> <p>For more help with IDE integration, visit our troubleshooting guide or join the community discussion.</p>"},{"location":"site/guides/installation/","title":"Installation Guide","text":"<p>This guide covers all the ways to install and set up the MCP Standards Server.</p>"},{"location":"site/guides/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Operating System: Linux, macOS, or Windows</li> <li>Memory: 512MB minimum, 2GB recommended</li> <li>Disk Space: 100MB for installation, 500MB+ for standards cache</li> <li>Network: Internet connection for syncing standards</li> <li>Redis (optional): For enhanced caching performance</li> <li>Node.js 16+ (optional): For web UI development</li> </ul>"},{"location":"site/guides/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"site/guides/installation/#method-1-from-source-currently-available","title":"Method 1: From Source (Currently Available)","text":"<p>Clone and install from the GitHub repository:</p> <pre><code># Clone the repository\ngit clone https://github.com/williamzujkowski/mcp-standards-server.git\ncd mcp-standards-server\n\n# Install in development mode\npip install -e .\n\n# Or install with all dependencies\npip install -e \".[full]\"\n\n# For development with testing tools\npip install -e \".[test]\"\n</code></pre>"},{"location":"site/guides/installation/#method-2-optional-dependencies","title":"Method 2: Optional Dependencies","text":""},{"location":"site/guides/installation/#redis-installation","title":"Redis Installation","text":"<pre><code># macOS\nbrew install redis\nbrew services start redis\n\n# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install redis-server\nsudo systemctl start redis\n\n# Windows (using WSL or Docker)\ndocker run -d -p 6379:6379 redis:latest\n</code></pre>"},{"location":"site/guides/installation/#web-ui-dependencies","title":"Web UI Dependencies","text":"<pre><code># Install Node.js dependencies for web UI\ncd src/web\nnpm install\nnpm run build\n</code></pre>"},{"location":"site/guides/installation/#method-3-running-the-mcp-server","title":"Method 3: Running the MCP Server","text":"<pre><code># Start the MCP server\npython -m src\n\n# Or use the CLI\nmcp-standards --help\n\n# Start with web UI\nmcp-standards web --port 8080\n</code></pre>"},{"location":"site/guides/installation/#method-4-using-docker","title":"Method 4: Using Docker","text":"<p>Run MCP Standards Server in a container:</p> <pre><code># Pull the image\ndocker pull mcp-standards/server:latest\n\n# Run the container\ndocker run -it --rm \\\n  -v ~/.cache/mcp-standards:/root/.cache/mcp-standards \\\n  -v $(pwd):/workspace \\\n  mcp-standards/server:latest \\\n  validate /workspace\n</code></pre> <p>Or build your own image:</p> <pre><code>FROM python:3.11-slim\n\nRUN pip install mcp-standards-server\n\nWORKDIR /workspace\n\nENTRYPOINT [\"mcp-standards\"]\n</code></pre>"},{"location":"site/guides/installation/#method-5-package-managers","title":"Method 5: Package Managers","text":""},{"location":"site/guides/installation/#future-installation-methods","title":"Future Installation Methods","text":"<p>The following installation methods are planned for future releases:</p> <ul> <li>pip: <code>pip install mcp-standards-server</code></li> <li>pipx: <code>pipx install mcp-standards-server</code></li> <li>Homebrew: <code>brew install mcp-standards-server</code></li> <li>Docker Hub: <code>docker pull mcp-standards/server</code></li> </ul>"},{"location":"site/guides/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify everything is working:</p> <pre><code># Show help\npython -m src --help\n\n# Or if installed in development mode\nmcp-standards --help\n\n# Test the server\npython -m src\n</code></pre> <p>Expected output: <pre><code>MCP Standards Server\n\nUsage: mcp-standards [OPTIONS] COMMAND [ARGS]...\n\nCommands:\n  query     Query standards based on context\n  validate  Validate code against standards\n  sync      Synchronize standards from repository\n  serve     Start the MCP server\n  web       Start the web UI\n  cache     Manage the standards cache\n</code></pre></p>"},{"location":"site/guides/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"site/guides/installation/#1-initialize-configuration","title":"1. Initialize Configuration","text":"<p>Run the interactive setup:</p> <pre><code>mcp-standards config --init\n</code></pre> <p>This will create a configuration file at <code>~/.config/mcp-standards/config.yaml</code>.</p>"},{"location":"site/guides/installation/#2-configure-github-authentication-optional","title":"2. Configure GitHub Authentication (Optional)","text":"<p>For higher API rate limits, configure authentication:</p> <pre><code># Set via environment variable\nexport MCP_STANDARDS_REPOSITORY_AUTH_TOKEN=ghp_your_token_here\n\n# Or add to configuration\nmcp-standards config --set repository.auth.type token\nmcp-standards config --set repository.auth.token ghp_your_token_here\n</code></pre>"},{"location":"site/guides/installation/#3-sync-standards","title":"3. Sync Standards","text":"<p>Download the standards to your local cache:</p> <pre><code>mcp-standards sync\n</code></pre>"},{"location":"site/guides/installation/#4-install-shell-completions-optional","title":"4. Install Shell Completions (Optional)","text":""},{"location":"site/guides/installation/#bash","title":"Bash","text":"<pre><code># Download completion script\ncurl -o ~/.local/share/bash-completion/completions/mcp-standards \\\n  https://raw.githubusercontent.com/williamzujkowski/mcp-standards-server/main/completions/bash/mcp-standards\n\n# Add to .bashrc if not auto-loaded\necho 'source ~/.local/share/bash-completion/completions/mcp-standards' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"site/guides/installation/#zsh","title":"Zsh","text":"<pre><code># Download completion script\ncurl -o ~/.zsh/completions/_mcp-standards \\\n  https://raw.githubusercontent.com/williamzujkowski/mcp-standards-server/main/completions/zsh/_mcp-standards\n\n# Add to .zshrc\necho 'fpath=(~/.zsh/completions $fpath)' &gt;&gt; ~/.zshrc\necho 'autoload -U compinit &amp;&amp; compinit' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"site/guides/installation/#fish","title":"Fish","text":"<pre><code># Download completion script\ncurl -o ~/.config/fish/completions/mcp-standards.fish \\\n  https://raw.githubusercontent.com/williamzujkowski/mcp-standards-server/main/completions/fish/mcp-standards.fish\n</code></pre>"},{"location":"site/guides/installation/#5-install-man-pages-optional","title":"5. Install Man Pages (Optional)","text":"<pre><code># System-wide (requires sudo)\nsudo cp docs/man/*.1 /usr/local/share/man/man1/\nsudo mandb\n\n# User-only\nmkdir -p ~/.local/share/man/man1\ncp docs/man/*.1 ~/.local/share/man/man1/\nmandb ~/.local/share/man\n</code></pre>"},{"location":"site/guides/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"site/guides/installation/#command-not-found","title":"Command Not Found","text":"<p>If <code>mcp-standards</code> is not found after installation:</p> <ol> <li> <p>Check installation location:    <pre><code>pip show mcp-standards-server | grep Location\n</code></pre></p> </li> <li> <p>Add to PATH:    <pre><code># For user installation\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\n# Add to .bashrc/.zshrc to make permanent\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\n</code></pre></p> </li> <li> <p>Use python -m:    <pre><code>python -m src --help\n</code></pre></p> </li> </ol>"},{"location":"site/guides/installation/#permission-denied","title":"Permission Denied","text":"<p>If you get permission errors:</p> <ol> <li> <p>Use --user flag:    <pre><code>pip install --user mcp-standards-server\n</code></pre></p> </li> <li> <p>Use virtual environment:    <pre><code>python -m venv mcp-env\nsource mcp-env/bin/activate  # On Windows: mcp-env\\Scripts\\activate\npip install mcp-standards-server\n</code></pre></p> </li> <li> <p>Use pipx (recommended):    <pre><code>pipx install mcp-standards-server\n</code></pre></p> </li> </ol>"},{"location":"site/guides/installation/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>If you encounter dependency conflicts:</p> <ol> <li> <p>Use isolated environment:    <pre><code>pipx install mcp-standards-server\n</code></pre></p> </li> <li> <p>Create fresh virtual environment:    <pre><code>python -m venv fresh-env\nsource fresh-env/bin/activate\npip install mcp-standards-server\n</code></pre></p> </li> <li> <p>Upgrade pip and setuptools:    <pre><code>pip install --upgrade pip setuptools wheel\npip install mcp-standards-server\n</code></pre></p> </li> </ol>"},{"location":"site/guides/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"site/guides/installation/#windows","title":"Windows","text":"<ul> <li>Use <code>py</code> instead of <code>python</code> if needed</li> <li>Paths use backslashes: <code>C:\\Users\\Name\\.config\\mcp-standards</code></li> <li>Consider using Windows Terminal for better color support</li> <li>Git Bash or WSL recommended for Unix-like experience</li> </ul>"},{"location":"site/guides/installation/#macos","title":"macOS","text":"<ul> <li>May need to install Xcode Command Line Tools</li> <li>Use Homebrew for easier management</li> <li>Check for M1/M2 compatibility if using Apple Silicon</li> </ul>"},{"location":"site/guides/installation/#linux","title":"Linux","text":"<ul> <li>May need to install python3-pip package</li> <li>Some distributions require python3-venv</li> <li>Consider using system package manager if available</li> </ul>"},{"location":"site/guides/installation/#upgrading","title":"Upgrading","text":""},{"location":"site/guides/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install --upgrade mcp-standards-server\n</code></pre>"},{"location":"site/guides/installation/#using-pipx","title":"Using pipx","text":"<pre><code>pipx upgrade mcp-standards-server\n</code></pre>"},{"location":"site/guides/installation/#from-source","title":"From source","text":"<pre><code>cd mcp-standards-server\ngit pull\npip install --upgrade .\n</code></pre>"},{"location":"site/guides/installation/#uninstalling","title":"Uninstalling","text":""},{"location":"site/guides/installation/#using-pip_1","title":"Using pip","text":"<pre><code>pip uninstall mcp-standards-server\n</code></pre>"},{"location":"site/guides/installation/#using-pipx_1","title":"Using pipx","text":"<pre><code>pipx uninstall mcp-standards-server\n</code></pre>"},{"location":"site/guides/installation/#clean-up-data","title":"Clean up data","text":"<pre><code># Remove configuration\nrm -rf ~/.config/mcp-standards\n\n# Remove cache\nrm -rf ~/.cache/mcp-standards\n\n# Remove logs\nrm -rf ~/.local/share/mcp-standards\n</code></pre>"},{"location":"site/guides/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have MCP Standards Server installed:</p> <ol> <li>Follow the Quick Start Guide</li> <li>Learn about Configuration Options</li> <li>Explore CLI Commands</li> <li>Set up IDE Integration</li> </ol> <p>Need help? Check the Troubleshooting Guide or open an issue.</p>"},{"location":"site/guides/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with MCP Standards Server in minutes.</p>"},{"location":"site/guides/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip package manager</li> <li>Git (for standards synchronization)</li> </ul>"},{"location":"site/guides/quickstart/#installation","title":"Installation","text":"<pre><code># Install the package\npip install mcp-standards-server\n\n# Verify installation\nmcp-standards --version\n</code></pre>"},{"location":"site/guides/quickstart/#initial-setup","title":"Initial Setup","text":""},{"location":"site/guides/quickstart/#1-initialize-configuration","title":"1. Initialize Configuration","text":"<pre><code># Create default configuration\nmcp-standards config --init\n\n# This creates ~/.mcp-standards/config.yaml\n</code></pre>"},{"location":"site/guides/quickstart/#2-sync-standards","title":"2. Sync Standards","text":"<pre><code># Download latest standards from repository\nmcp-standards sync\n\n# Check sync status\nmcp-standards status\n</code></pre>"},{"location":"site/guides/quickstart/#3-validate-your-first-project","title":"3. Validate Your First Project","text":"<pre><code># Navigate to your project\ncd /path/to/your/project\n\n# Run validation\nmcp-standards validate .\n\n# Get applicable standards for your project\nmcp-standards query applicable\n</code></pre>"},{"location":"site/guides/quickstart/#start-mcp-server","title":"Start MCP Server","text":"<pre><code># Start the MCP server (default port 8080)\nmcp-standards serve\n\n# Start on specific port\nmcp-standards serve --port 8081\n\n# Start with verbose logging\nmcp-standards serve --verbose\n</code></pre>"},{"location":"site/guides/quickstart/#test-mcp-integration","title":"Test MCP Integration","text":"<pre><code># Test MCP tools functionality\ncurl -X POST http://localhost:8080/tools/get_applicable_standards \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"project_type\": \"web_application\", \"framework\": \"react\"}'\n</code></pre>"},{"location":"site/guides/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide - Customize your setup</li> <li>IDE Integration - Integrate with your editor</li> <li>CI/CD Integration - Add to your pipeline</li> <li>CLI Commands Reference - Complete command reference</li> </ul>"},{"location":"site/guides/quickstart/#common-first-steps","title":"Common First Steps","text":""},{"location":"site/guides/quickstart/#for-web-applications","title":"For Web Applications","text":"<pre><code># Get web app standards\nmcp-standards query applicable --project-type web_application\n\n# Validate with specific framework\nmcp-standards validate . --framework react\n</code></pre>"},{"location":"site/guides/quickstart/#for-api-projects","title":"For API Projects","text":"<pre><code># Get API standards\nmcp-standards query applicable --project-type api\n\n# Validate API endpoints\nmcp-standards validate ./src/api --standard api-design\n</code></pre>"},{"location":"site/guides/quickstart/#for-python-projects","title":"For Python Projects","text":"<pre><code># Get Python-specific standards\nmcp-standards query applicable --language python\n\n# Validate Python code\nmcp-standards validate . --language python --fix\n</code></pre>"},{"location":"site/guides/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>mcp-standards --help</code> for command overview</li> <li>Use <code>mcp-standards &lt;command&gt; --help</code> for specific command help</li> <li>Check Troubleshooting Guide for common issues</li> </ul>"},{"location":"site/guides/workflows/","title":"Common Workflows","text":"<p>Common workflows and best practices for using MCP Standards Server in various development scenarios.</p>"},{"location":"site/guides/workflows/#daily-development-workflow","title":"Daily Development Workflow","text":""},{"location":"site/guides/workflows/#individual-developer-workflow","title":"Individual Developer Workflow","text":"<pre><code>1. Start Development Session\n   \u2193\n2. Sync Latest Standards\n   \u2193\n3. Code Development\n   \u2193\n4. Real-time Validation (IDE)\n   \u2193\n5. Pre-commit Validation\n   \u2193\n6. Commit &amp; Push\n   \u2193\n7. CI/CD Validation\n</code></pre> <p>Step-by-step:</p> <pre><code># 1. Start development session\nmcp-standards status\n\n# 2. Sync latest standards (if needed)\nmcp-standards sync\n\n# 3. Code development with IDE integration\n# (Real-time validation happens automatically)\n\n# 4. Pre-commit validation\nmcp-standards validate --fix .\n\n# 5. Commit changes\ngit add .\ngit commit -m \"Add new feature\"\ngit push\n\n# 6. Monitor CI/CD results\n# Check GitHub Actions or CI system\n</code></pre>"},{"location":"site/guides/workflows/#team-lead-workflow","title":"Team Lead Workflow","text":"<pre><code># Daily standards review\nmcp-standards query list --recently-updated\n\n# Team compliance report\nmcp-standards validate ./team-projects --format json --output compliance-report.json\n\n# Update team standards\nmcp-standards config set validation.standards \"team-baseline,security-strict\"\n\n# Distribute configuration\ncp ~/.mcp-standards/config.yaml ./team-config.yaml\ngit add team-config.yaml\n</code></pre>"},{"location":"site/guides/workflows/#project-setup-workflows","title":"Project Setup Workflows","text":""},{"location":"site/guides/workflows/#new-project-setup","title":"New Project Setup","text":"<pre><code># 1. Initialize project\nmkdir my-new-project\ncd my-new-project\n\n# 2. Detect project type and get recommendations\nmcp-standards query applicable --project-type web_application --framework react\n\n# 3. Create project configuration\ncat &gt; .mcp-standards.json &lt;&lt; EOF\n{\n  \"projectType\": \"web_application\",\n  \"framework\": \"react\",\n  \"language\": \"typescript\",\n  \"standards\": {\n    \"required\": [\n      \"react-patterns\",\n      \"typescript-strict\",\n      \"accessibility-wcag\"\n    ]\n  }\n}\nEOF\n\n# 4. Setup IDE integration\n# (Install VS Code extension, configure settings)\n\n# 5. Setup CI/CD\ncp ~/.mcp-standards/templates/github-actions.yml .github/workflows/standards.yml\n\n# 6. Initial validation\nmcp-standards validate .\n</code></pre>"},{"location":"site/guides/workflows/#existing-project-integration","title":"Existing Project Integration","text":"<pre><code># 1. Analyze existing project\ncd existing-project\nmcp-standards query applicable .\n\n# 2. Run baseline validation\nmcp-standards validate --format sarif --output baseline.sarif .\n\n# 3. Gradual adoption strategy\n# Start with warnings only\nmcp-standards config set validation.severity_level warning\n\n# 4. Fix critical issues first\nmcp-standards validate --severity error --fix .\n\n# 5. Incremental improvement\n# Weekly: mcp-standards validate --since \"1 week ago\" .\n</code></pre>"},{"location":"site/guides/workflows/#standards-management-workflows","title":"Standards Management Workflows","text":""},{"location":"site/guides/workflows/#custom-standards-development","title":"Custom Standards Development","text":"<pre><code># 1. Create custom standard\nmkdir -p ./custom-standards/python-company-style\n\n# 2. Use template\nmcp-standards generate standard \\\n  --name \"python-company-style\" \\\n  --language python \\\n  --template company-style\n\n# 3. Edit standard\nvim ./custom-standards/python-company-style/standard.yaml\n\n# 4. Test standard\nmcp-standards validate \\\n  --standard ./custom-standards/python-company-style \\\n  ./test-project\n\n# 5. Publish to team repository\ngit add custom-standards/\ngit commit -m \"Add company Python style standard\"\ngit push origin main\n\n# 6. Team adoption\nmcp-standards config set standards.repository_url https://github.com/company/standards\nmcp-standards sync\n</code></pre>"},{"location":"site/guides/workflows/#standards-review-process","title":"Standards Review Process","text":"<pre><code># 1. Review proposed standard changes\nmcp-standards diff --standard react-patterns --version latest..main\n\n# 2. Test impact on codebase\nmcp-standards validate \\\n  --standard react-patterns:latest \\\n  --dry-run \\\n  ./production-code\n\n# 3. Gradual rollout\n# Phase 1: New projects only\nmcp-standards config set standards.adoption_policy new_projects_only\n\n# Phase 2: Existing projects (warnings)\nmcp-standards config set validation.severity_level warning\n\n# Phase 3: Full enforcement\nmcp-standards config set validation.severity_level error\n</code></pre>"},{"location":"site/guides/workflows/#code-review-workflows","title":"Code Review Workflows","text":""},{"location":"site/guides/workflows/#pre-review-validation","title":"Pre-Review Validation","text":"<pre><code># Author workflow before creating PR\n# 1. Validate changed files only\ngit diff --name-only HEAD~1 | xargs mcp-standards validate\n\n# 2. Auto-fix issues\nmcp-standards validate --fix $(git diff --name-only HEAD~1)\n\n# 3. Generate review comments\nmcp-standards validate \\\n  --format review-comments \\\n  --output review.md \\\n  $(git diff --name-only HEAD~1)\n\n# 4. Include in PR description\ncat review.md &gt;&gt; pr-description.md\n</code></pre>"},{"location":"site/guides/workflows/#reviewer-workflow","title":"Reviewer Workflow","text":"<pre><code># 1. Get PR validation results\ngh pr view 123 --json checks\n\n# 2. Review standards compliance\nmcp-standards validate \\\n  --standard security-review \\\n  --format detailed \\\n  $(gh pr diff 123 --name-only)\n\n# 3. Suggest improvements\nmcp-standards suggest \\\n  --context \"code review\" \\\n  $(gh pr diff 123 --name-only)\n</code></pre>"},{"location":"site/guides/workflows/#cicd-integration-workflows","title":"CI/CD Integration Workflows","text":""},{"location":"site/guides/workflows/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Basic validation: <pre><code># .github/workflows/standards.yml\nname: Standards Validation\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install MCP Standards\n      run: pip install mcp-standards-server\n    - name: Validate Code\n      run: mcp-standards validate --format sarif --output results.sarif\n    - name: Upload Results\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: results.sarif\n</code></pre></p> <p>Advanced workflow with caching: <pre><code># Setup workflow with performance optimizations\nmcp-standards generate workflow \\\n  --platform github-actions \\\n  --with-caching \\\n  --matrix-strategy \\\n  --security-scanning\n</code></pre></p>"},{"location":"site/guides/workflows/#multi-environment-workflow","title":"Multi-Environment Workflow","text":"<pre><code># Development environment\nmcp-standards config set environment development\nmcp-standards config set validation.auto_fix true\nmcp-standards config set validation.severity_level info\n\n# Staging environment\nmcp-standards config set environment staging\nmcp-standards config set validation.auto_fix false\nmcp-standards config set validation.severity_level warning\n\n# Production environment\nmcp-standards config set environment production\nmcp-standards config set validation.severity_level error\nmcp-standards config set security.authentication.enabled true\n</code></pre>"},{"location":"site/guides/workflows/#compliance-audit-workflows","title":"Compliance &amp; Audit Workflows","text":""},{"location":"site/guides/workflows/#security-audit-workflow","title":"Security Audit Workflow","text":"<pre><code># 1. Comprehensive security scan\nmcp-standards validate \\\n  --standard security-comprehensive \\\n  --format sarif \\\n  --output security-audit-$(date +%Y%m%d).sarif \\\n  .\n\n# 2. Generate compliance report\nmcp-standards report compliance \\\n  --framework NIST-800-53 \\\n  --output nist-compliance-report.pdf\n\n# 3. Track remediation\nmcp-standards track \\\n  --baseline security-audit-20240101.sarif \\\n  --current security-audit-$(date +%Y%m%d).sarif\n</code></pre>"},{"location":"site/guides/workflows/#accessibility-audit-workflow","title":"Accessibility Audit Workflow","text":"<pre><code># 1. WCAG compliance check\nmcp-standards validate \\\n  --standard accessibility-wcag-2.1 \\\n  --format accessibility \\\n  .\n\n# 2. Generate accessibility report\nmcp-standards report accessibility \\\n  --level AA \\\n  --output accessibility-report.html\n\n# 3. Integration with testing\nnpm run test:e2e:accessibility\nmcp-standards validate --standard accessibility-testing .\n</code></pre>"},{"location":"site/guides/workflows/#performance-optimization-workflows","title":"Performance Optimization Workflows","text":""},{"location":"site/guides/workflows/#cache-management","title":"Cache Management","text":"<pre><code># Daily cache maintenance\n#!/bin/bash\n# cache-maintenance.sh\n\n# Clear old cache entries\nmcp-standards cache clear --older-than \"7 days\"\n\n# Warm cache with frequently used standards\nmcp-standards cache warm --standards \"$(mcp-standards analytics top-standards --limit 10)\"\n\n# Optimize cache performance\nmcp-standards cache optimize\n\n# Report cache statistics\nmcp-standards cache stats --format json &gt; cache-stats-$(date +%Y%m%d).json\n</code></pre>"},{"location":"site/guides/workflows/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor validation performance\nmcp-standards benchmark \\\n  --duration 60s \\\n  --concurrent-users 10 \\\n  --output performance-$(date +%Y%m%d).json\n\n# Profile memory usage\nmcp-standards profile memory \\\n  --validate ./large-codebase \\\n  --output memory-profile.json\n\n# Optimize for large codebases\nmcp-standards config set performance.batch_size 50\nmcp-standards config set performance.max_workers 8\n</code></pre>"},{"location":"site/guides/workflows/#team-collaboration-workflows","title":"Team Collaboration Workflows","text":""},{"location":"site/guides/workflows/#standards-committee-workflow","title":"Standards Committee Workflow","text":"<pre><code># Monthly standards review meeting preparation\n# 1. Generate usage analytics\nmcp-standards analytics standards-usage \\\n  --period \"last 30 days\" \\\n  --output monthly-usage.json\n\n# 2. Identify improvement opportunities\nmcp-standards analytics violations \\\n  --top 10 \\\n  --suggest-standards\n\n# 3. Draft new standards proposals\nmcp-standards generate proposal \\\n  --based-on violations \\\n  --template committee-review\n\n# 4. Distribute for review\nmcp-standards share proposal \\\n  --committee \"standards-committee@company.com\"\n</code></pre>"},{"location":"site/guides/workflows/#onboarding-new-team-members","title":"Onboarding New Team Members","text":"<pre><code># Create onboarding package\nmcp-standards package onboarding \\\n  --role developer \\\n  --team backend \\\n  --output onboarding-package.zip\n\n# Generate learning path\nmcp-standards generate learning-path \\\n  --standards \"$(mcp-standards query applicable --project-type api --language python)\" \\\n  --output learning-path.md\n\n# Setup development environment\nmcp-standards setup \\\n  --profile team-backend \\\n  --ide vscode \\\n  --auto-configure\n</code></pre>"},{"location":"site/guides/workflows/#troubleshooting-workflows","title":"Troubleshooting Workflows","text":""},{"location":"site/guides/workflows/#validation-issues","title":"Validation Issues","text":"<pre><code># Debug validation failures\nmcp-standards validate --debug --verbose ./problematic-file.py\n\n# Check standards conflicts\nmcp-standards analyze conflicts \\\n  --standards \"pep8,company-style,security-strict\"\n\n# Validate standards themselves\nmcp-standards validate-standards ./custom-standards/\n\n# Reset to known good state\nmcp-standards reset --keep-config\nmcp-standards sync --force\n</code></pre>"},{"location":"site/guides/workflows/#performance-issues","title":"Performance Issues","text":"<pre><code># Diagnose slow validation\nmcp-standards profile validation \\\n  --target ./slow-project \\\n  --report performance-issues.json\n\n# Check cache health\nmcp-standards cache health-check\n\n# Optimize for current workload\nmcp-standards optimize \\\n  --based-on ./recent-validations.log\n</code></pre>"},{"location":"site/guides/workflows/#advanced-workflows","title":"Advanced Workflows","text":""},{"location":"site/guides/workflows/#multi-repository-management","title":"Multi-Repository Management","text":"<pre><code># Setup workspace validation\nfor repo in $(cat repositories.txt); do\n  cd $repo\n  mcp-standards validate \\\n    --format json \\\n    --output ../results/${repo}-results.json\n  cd ..\ndone\n\n# Aggregate results\nmcp-standards aggregate \\\n  --input \"./results/*-results.json\" \\\n  --output workspace-compliance.json\n\n# Generate dashboard\nmcp-standards dashboard \\\n  --data workspace-compliance.json \\\n  --output compliance-dashboard.html\n</code></pre>"},{"location":"site/guides/workflows/#standards-evolution-tracking","title":"Standards Evolution Tracking","text":"<pre><code># Track standards evolution\nmcp-standards track evolution \\\n  --standard react-patterns \\\n  --from \"2024-01-01\" \\\n  --to \"2024-12-31\" \\\n  --output react-patterns-evolution.json\n\n# Impact analysis\nmcp-standards analyze impact \\\n  --change \"react-patterns:v2.0\" \\\n  --codebase ./production-apps \\\n  --estimate-effort\n\n# Migration planning\nmcp-standards plan migration \\\n  --from \"react-patterns:v1.0\" \\\n  --to \"react-patterns:v2.0\" \\\n  --output migration-plan.md\n</code></pre>"},{"location":"site/guides/workflows/#custom-integration-development","title":"Custom Integration Development","text":"<pre><code># Create custom integration\nmcp-standards create integration \\\n  --type webhook \\\n  --target slack \\\n  --template notification\n\n# Test integration\nmcp-standards test integration \\\n  --config ./slack-integration.yaml \\\n  --dry-run\n\n# Deploy integration\nmcp-standards deploy integration \\\n  --config ./slack-integration.yaml \\\n  --environment production\n</code></pre>"},{"location":"site/guides/workflows/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"site/guides/workflows/#daily-practices","title":"Daily Practices","text":"<ol> <li>Use IDE integration for real-time feedback</li> <li>Run validation before commits</li> <li>Keep standards synchronized</li> <li>Monitor CI/CD validation results</li> </ol>"},{"location":"site/guides/workflows/#team-practices","title":"Team Practices","text":"<ol> <li>Establish team-wide configuration</li> <li>Regular standards review meetings</li> <li>Gradual adoption of new standards</li> <li>Document custom standards</li> </ol>"},{"location":"site/guides/workflows/#organizational-practices","title":"Organizational Practices","text":"<ol> <li>Centralized standards repository</li> <li>Compliance monitoring and reporting</li> <li>Regular security and accessibility audits</li> <li>Performance optimization monitoring</li> </ol>"},{"location":"site/guides/workflows/#troubleshooting-practices","title":"Troubleshooting Practices","text":"<ol> <li>Enable debug logging for issues</li> <li>Regular cache maintenance</li> <li>Monitor system health</li> <li>Keep standards and tools updated</li> </ol> <p>For more specific integration guides, see: - IDE Integration - CI/CD Integration - Configuration Guide</p>"},{"location":"site/reference/","title":"Reference Documentation","text":"<p>This section contains detailed reference documentation for MCP Standards Server.</p>"},{"location":"site/reference/#cli-commands","title":"CLI Commands","text":"<ul> <li>CLI Commands Reference - Complete command reference</li> <li>Configuration Reference - Configuration options</li> <li>Standards Format - Standards file format specification</li> </ul>"},{"location":"site/reference/#api-reference","title":"API Reference","text":"<ul> <li>MCP Tools API - MCP protocol tools</li> <li>REST API - HTTP REST API reference</li> <li>Configuration Schema - Configuration file schema</li> </ul>"},{"location":"site/reference/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Common Issues - Solutions to common problems</li> <li>Error Codes - Error code reference</li> <li>Performance Tuning - Performance optimization guide</li> </ul>"},{"location":"site/reference/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Architecture Overview - System architecture</li> <li>Token Optimization - Token optimization strategies</li> <li>Caching Strategy - Caching implementation details</li> </ul>"},{"location":"site/reference/caching/","title":"Caching Reference","text":"<p>Comprehensive guide to the MCP Standards Server caching system.</p>"},{"location":"site/reference/caching/#overview","title":"Overview","text":"<p>The caching system improves performance by storing frequently accessed data in memory or Redis. It uses a multi-tier architecture with intelligent cache warming and invalidation.</p>"},{"location":"site/reference/caching/#cache-architecture","title":"Cache Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   L1 Cache      \u2502  \u2190 In-memory LRU cache (fastest)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   L2 Cache      \u2502  \u2190 Redis cache (shared)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Storage       \u2502  \u2190 File system/Database (persistent)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"site/reference/caching/#cache-layers","title":"Cache Layers","text":""},{"location":"site/reference/caching/#l1-cache-in-memory","title":"L1 Cache (In-Memory)","text":"<p>Fast, process-local cache for hot data.</p> <pre><code>from src.core.cache import L1Cache\n\n# Configure L1 cache\nl1_cache = L1Cache(\n    max_size=1000,      # Maximum entries\n    ttl=300,            # Time to live (seconds)\n    eviction=\"lru\"      # Eviction policy: lru, lfu, fifo\n)\n\n# Usage\nl1_cache.set(\"key\", value, ttl=60)\nvalue = l1_cache.get(\"key\")\n</code></pre> <p>Configuration: <pre><code>cache:\n  l1:\n    enabled: true\n    max_size: 1000\n    default_ttl: 300\n    eviction_policy: \"lru\"\n</code></pre></p>"},{"location":"site/reference/caching/#l2-cache-redis","title":"L2 Cache (Redis)","text":"<p>Shared cache across processes and servers.</p> <pre><code>from src.core.cache import L2Cache\n\n# Configure L2 cache\nl2_cache = L2Cache(\n    redis_url=\"redis://localhost:6379\",\n    prefix=\"mcp:\",\n    ttl=3600,\n    serializer=\"json\"  # json, pickle, msgpack\n)\n\n# Usage\nawait l2_cache.set(\"key\", value)\nvalue = await l2_cache.get(\"key\")\n</code></pre> <p>Configuration: <pre><code>cache:\n  l2:\n    backend: \"redis\"\n    redis:\n      url: \"redis://localhost:6379\"\n      db: 0\n      prefix: \"mcp:\"\n      connection_pool:\n        max_connections: 50\n    default_ttl: 3600\n    serializer: \"json\"\n</code></pre></p>"},{"location":"site/reference/caching/#cache-keys","title":"Cache Keys","text":""},{"location":"site/reference/caching/#key-naming-convention","title":"Key Naming Convention","text":"<pre><code># Format: prefix:namespace:identifier:version\n\"mcp:standards:python-best-practices:1.0.0\"\n\"mcp:validation:file_hash:abc123\"\n\"mcp:search:query_hash:def456\"\n</code></pre>"},{"location":"site/reference/caching/#key-generation","title":"Key Generation","text":"<pre><code>from src.core.cache import generate_cache_key\n\n# Basic key\nkey = generate_cache_key(\"standards\", \"python-best-practices\")\n# Result: \"mcp:standards:python-best-practices\"\n\n# With version\nkey = generate_cache_key(\"standards\", \"python-best-practices\", version=\"1.0.0\")\n# Result: \"mcp:standards:python-best-practices:1.0.0\"\n\n# From object\nkey = generate_cache_key(\"validation\", obj={\"file\": \"app.py\", \"standard\": \"pep8\"})\n# Result: \"mcp:validation:hash_of_obj\"\n</code></pre>"},{"location":"site/reference/caching/#cache-decorators","title":"Cache Decorators","text":""},{"location":"site/reference/caching/#basic-caching","title":"Basic Caching","text":"<pre><code>from src.core.cache.decorators import cache_result\n\n@cache_result(ttl=300)\ndef expensive_operation(param1, param2):\n    \"\"\"This result will be cached for 5 minutes.\"\"\"\n    return compute_result(param1, param2)\n\n# Async version\n@cache_result(ttl=300)\nasync def async_expensive_operation(param1, param2):\n    return await compute_result_async(param1, param2)\n</code></pre>"},{"location":"site/reference/caching/#conditional-caching","title":"Conditional Caching","text":"<pre><code>@cache_result(\n    ttl=300,\n    condition=lambda result: result is not None,\n    key_prefix=\"compute\"\n)\ndef conditional_cache(data):\n    \"\"\"Only cache non-None results.\"\"\"\n    return process_data(data)\n</code></pre>"},{"location":"site/reference/caching/#cache-invalidation","title":"Cache Invalidation","text":"<pre><code>from src.core.cache.decorators import invalidate_cache\n\n@invalidate_cache(pattern=\"standards:*\")\ndef update_standard(standard_id, data):\n    \"\"\"Invalidates all standards cache entries.\"\"\"\n    return save_standard(standard_id, data)\n\n# Invalidate specific keys\n@invalidate_cache(keys=[\"standards:python\", \"standards:javascript\"])\ndef update_multiple_standards(updates):\n    return bulk_update(updates)\n</code></pre>"},{"location":"site/reference/caching/#cache-warming","title":"Cache Warming","text":""},{"location":"site/reference/caching/#startup-warming","title":"Startup Warming","text":"<pre><code>from src.core.cache import CacheWarmer\n\nwarmer = CacheWarmer()\n\n# Define warming strategies\nwarmer.add_strategy(\"standards\", warm_standards)\nwarmer.add_strategy(\"validators\", warm_validators)\n\n# Run on startup\nawait warmer.warm_all()\n</code></pre>"},{"location":"site/reference/caching/#background-warming","title":"Background Warming","text":"<pre><code>cache:\n  warming:\n    enabled: true\n    schedule: \"0 */6 * * *\"  # Every 6 hours\n    strategies:\n      - name: \"standards\"\n        priority: \"high\"\n        batch_size: 50\n      - name: \"search_index\"\n        priority: \"medium\"\n        batch_size: 100\n</code></pre>"},{"location":"site/reference/caching/#cache-patterns","title":"Cache Patterns","text":""},{"location":"site/reference/caching/#read-through-cache","title":"Read-Through Cache","text":"<pre><code>async def get_standard(standard_id):\n    \"\"\"Read-through cache pattern.\"\"\"\n    # Try cache first\n    cached = await cache.get(f\"standard:{standard_id}\")\n    if cached:\n        return cached\n\n    # Load from source\n    standard = await load_standard_from_db(standard_id)\n\n    # Cache for next time\n    await cache.set(f\"standard:{standard_id}\", standard, ttl=3600)\n\n    return standard\n</code></pre>"},{"location":"site/reference/caching/#write-through-cache","title":"Write-Through Cache","text":"<pre><code>async def update_standard(standard_id, data):\n    \"\"\"Write-through cache pattern.\"\"\"\n    # Update source\n    await save_standard_to_db(standard_id, data)\n\n    # Update cache\n    await cache.set(f\"standard:{standard_id}\", data, ttl=3600)\n\n    # Invalidate related caches\n    await cache.delete_pattern(f\"search:*{standard_id}*\")\n</code></pre>"},{"location":"site/reference/caching/#cache-aside-pattern","title":"Cache-Aside Pattern","text":"<pre><code>class StandardsRepository:\n    def __init__(self, cache, db):\n        self.cache = cache\n        self.db = db\n\n    async def get(self, standard_id):\n        # Application manages cache\n        key = f\"standard:{standard_id}\"\n\n        # Check cache\n        cached = await self.cache.get(key)\n        if cached:\n            return cached\n\n        # Miss - load and cache\n        data = await self.db.get(standard_id)\n        if data:\n            await self.cache.set(key, data)\n\n        return data\n</code></pre>"},{"location":"site/reference/caching/#cache-monitoring","title":"Cache Monitoring","text":""},{"location":"site/reference/caching/#metrics","title":"Metrics","text":"<pre><code>from src.core.cache import CacheMetrics\n\nmetrics = CacheMetrics()\n\n# Track hit/miss ratio\n@metrics.track\nasync def cached_operation():\n    # Your operation\n    pass\n\n# Get metrics\nstats = metrics.get_stats()\nprint(f\"Hit ratio: {stats.hit_ratio:.2%}\")\nprint(f\"Miss ratio: {stats.miss_ratio:.2%}\")\nprint(f\"Avg response time: {stats.avg_response_time}ms\")\n</code></pre>"},{"location":"site/reference/caching/#health-checks","title":"Health Checks","text":"<pre><code>async def cache_health_check():\n    \"\"\"Check cache health.\"\"\"\n    try:\n        # Test write\n        await cache.set(\"health:check\", \"ok\", ttl=10)\n\n        # Test read\n        value = await cache.get(\"health:check\")\n\n        # Test delete\n        await cache.delete(\"health:check\")\n\n        return {\"status\": \"healthy\", \"latency\": measure_latency()}\n    except Exception as e:\n        return {\"status\": \"unhealthy\", \"error\": str(e)}\n</code></pre>"},{"location":"site/reference/caching/#cache-configuration-examples","title":"Cache Configuration Examples","text":""},{"location":"site/reference/caching/#development-configuration","title":"Development Configuration","text":"<pre><code>cache:\n  l1:\n    enabled: true\n    max_size: 100\n    ttl: 60\n  l2:\n    enabled: false  # Use only L1 in development\n</code></pre>"},{"location":"site/reference/caching/#production-configuration","title":"Production Configuration","text":"<pre><code>cache:\n  l1:\n    enabled: true\n    max_size: 10000\n    ttl: 300\n    eviction_policy: \"lru\"\n\n  l2:\n    enabled: true\n    backend: \"redis-cluster\"\n    redis:\n      nodes:\n        - \"redis1:6379\"\n        - \"redis2:6379\"\n        - \"redis3:6379\"\n      password: \"${REDIS_PASSWORD}\"\n      ssl: true\n    ttl: 3600\n\n  warming:\n    enabled: true\n    on_startup: true\n    schedule: \"0 */4 * * *\"\n</code></pre>"},{"location":"site/reference/caching/#high-performance-configuration","title":"High-Performance Configuration","text":"<pre><code>cache:\n  l1:\n    enabled: true\n    max_size: 50000\n    ttl: 600\n    eviction_policy: \"lfu\"  # Least frequently used\n\n  l2:\n    enabled: true\n    backend: \"redis-cluster\"\n    serializer: \"msgpack\"  # Faster than JSON\n    compression: true\n    pipeline_size: 100     # Batch operations\n\n  strategies:\n    aggressive_caching:\n      ttl_multiplier: 2.0\n      preload_related: true\n      background_refresh: true\n</code></pre>"},{"location":"site/reference/caching/#troubleshooting","title":"Troubleshooting","text":""},{"location":"site/reference/caching/#common-issues","title":"Common Issues","text":"<ol> <li> <p>High Miss Rate <pre><code># Increase TTL\n@cache_result(ttl=3600)  # 1 hour instead of 5 minutes\n\n# Pre-warm critical data\nawait cache_warmer.warm(\"critical_data\")\n</code></pre></p> </li> <li> <p>Memory Issues <pre><code>cache:\n  l1:\n    max_size: 5000  # Reduce from 10000\n    eviction_policy: \"lfu\"  # Better for limited memory\n</code></pre></p> </li> <li> <p>Stale Data <pre><code># Implement cache invalidation\n@invalidate_cache(pattern=\"user:{user_id}:*\")\ndef update_user(user_id, data):\n    pass\n</code></pre></p> </li> </ol>"},{"location":"site/reference/caching/#debug-mode","title":"Debug Mode","text":"<pre><code>import logging\n\n# Enable cache debugging\nlogging.getLogger(\"mcp.cache\").setLevel(logging.DEBUG)\n\n# Track cache operations\nwith cache.trace() as tracer:\n    result = await cached_operation()\n\nprint(tracer.get_report())\n# Output: Cache hits: 5, misses: 2, errors: 0\n</code></pre>"},{"location":"site/reference/caching/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use appropriate TTLs</li> <li>Static data: 1-24 hours</li> <li>Dynamic data: 5-60 minutes</li> <li> <p>Real-time data: No caching or &lt;1 minute</p> </li> <li> <p>Batch operations <pre><code># Good - single round trip\nvalues = await cache.mget([\"key1\", \"key2\", \"key3\"])\n\n# Bad - multiple round trips\nvalue1 = await cache.get(\"key1\")\nvalue2 = await cache.get(\"key2\")\nvalue3 = await cache.get(\"key3\")\n</code></pre></p> </li> <li> <p>Use compression for large values <pre><code>@cache_result(compress=True, compress_threshold=1024)\ndef large_data_operation():\n    return generate_large_dataset()\n</code></pre></p> </li> </ol>"},{"location":"site/reference/caching/#related-documentation","title":"Related Documentation","text":"<ul> <li>Performance Optimization</li> <li>Redis Configuration</li> <li>Cache Architecture</li> </ul>"},{"location":"site/reference/cli-commands/","title":"CLI Commands Reference","text":"<p>Complete reference for all MCP Standards Server CLI commands.</p>"},{"location":"site/reference/cli-commands/#global-options","title":"Global Options","text":"<p>All commands support these global options:</p> <ul> <li><code>--help</code> - Show help message</li> <li><code>--version</code> - Show version information</li> <li><code>--verbose</code>, <code>-v</code> - Enable verbose output</li> <li><code>--quiet</code>, <code>-q</code> - Suppress output</li> <li><code>--config CONFIG</code> - Use specific configuration file</li> </ul>"},{"location":"site/reference/cli-commands/#commands-overview","title":"Commands Overview","text":""},{"location":"site/reference/cli-commands/#core-commands","title":"Core Commands","text":"<ul> <li><code>serve</code> - Start the MCP server</li> <li><code>validate</code> - Validate code against standards</li> <li><code>query</code> - Query standards database</li> <li><code>sync</code> - Synchronize standards from repository</li> </ul>"},{"location":"site/reference/cli-commands/#configuration-commands","title":"Configuration Commands","text":"<ul> <li><code>config</code> - Manage configuration</li> <li><code>status</code> - Show system status</li> <li><code>cache</code> - Manage cache</li> </ul>"},{"location":"site/reference/cli-commands/#command-details","title":"Command Details","text":""},{"location":"site/reference/cli-commands/#serve","title":"serve","text":"<p>Start the MCP Standards Server.</p> <pre><code>mcp-standards serve [OPTIONS]\n</code></pre> <p>Options: - <code>--host HOST</code> - Server host (default: 0.0.0.0) - <code>--port PORT</code> - Server port (default: 8080) - <code>--reload</code> - Enable auto-reload on code changes - <code>--workers N</code> - Number of worker processes</p> <p>Examples: <pre><code># Start server on default port\nmcp-standards serve\n\n# Start on specific port\nmcp-standards serve --port 8081\n\n# Development mode with auto-reload\nmcp-standards serve --reload\n</code></pre></p>"},{"location":"site/reference/cli-commands/#validate","title":"validate","text":"<p>Validate code against development standards.</p> <pre><code>mcp-standards validate [PATH] [OPTIONS]\n</code></pre> <p>Arguments: - <code>PATH</code> - Path to validate (default: current directory)</p> <p>Options: - <code>--standard STANDARD</code> - Use specific standard - <code>--language LANG</code> - Target language - <code>--framework FRAMEWORK</code> - Target framework - <code>--fix</code> - Auto-fix issues where possible - <code>--format FORMAT</code> - Output format (json, junit, sarif, text) - <code>--severity LEVEL</code> - Minimum severity (error, warning, info) - <code>--output FILE</code> - Output file</p> <p>Examples: <pre><code># Validate current directory\nmcp-standards validate\n\n# Validate specific path with auto-fix\nmcp-standards validate ./src --fix\n\n# Validate Python code with specific standard\nmcp-standards validate --language python --standard pep8\n\n# Output SARIF format for CI integration\nmcp-standards validate --format sarif --output results.sarif\n</code></pre></p>"},{"location":"site/reference/cli-commands/#query","title":"query","text":"<p>Query the standards database.</p> <pre><code>mcp-standards query [SUBCOMMAND] [OPTIONS]\n</code></pre> <p>Subcommands: - <code>applicable</code> - Find applicable standards - <code>search</code> - Search standards content - <code>list</code> - List all standards - <code>show</code> - Show specific standard</p> <p>Options: - <code>--project-type TYPE</code> - Project type filter - <code>--language LANG</code> - Language filter - <code>--framework FRAMEWORK</code> - Framework filter - <code>--tags TAGS</code> - Tag filters - <code>--format FORMAT</code> - Output format</p> <p>Examples: <pre><code># Find applicable standards for web app\nmcp-standards query applicable --project-type web_application\n\n# Search for accessibility standards\nmcp-standards query search \"accessibility\"\n\n# Show specific standard\nmcp-standards query show react-patterns\n\n# List all Python standards\nmcp-standards query list --language python\n</code></pre></p>"},{"location":"site/reference/cli-commands/#sync","title":"sync","text":"<p>Synchronize standards from remote repository.</p> <pre><code>mcp-standards sync [OPTIONS]\n</code></pre> <p>Options: - <code>--force</code> - Force full resync - <code>--url URL</code> - Custom repository URL - <code>--branch BRANCH</code> - Specific branch - <code>--no-cache</code> - Skip cache update</p> <p>Examples: <pre><code># Standard sync\nmcp-standards sync\n\n# Force full resync\nmcp-standards sync --force\n\n# Sync from custom repository\nmcp-standards sync --url https://github.com/custom/standards\n</code></pre></p>"},{"location":"site/reference/cli-commands/#config","title":"config","text":"<p>Manage configuration settings.</p> <pre><code>mcp-standards config [SUBCOMMAND] [OPTIONS]\n</code></pre> <p>Subcommands: - <code>init</code> - Initialize default configuration - <code>show</code> - Show current configuration - <code>set</code> - Set configuration value - <code>get</code> - Get configuration value - <code>validate</code> - Validate configuration - <code>test</code> - Test configuration</p> <p>Examples: <pre><code># Initialize configuration\nmcp-standards config init\n\n# Show current config\nmcp-standards config show\n\n# Set configuration value\nmcp-standards config set server.port 8081\n\n# Validate configuration\nmcp-standards config validate\n</code></pre></p>"},{"location":"site/reference/cli-commands/#status","title":"status","text":"<p>Show system status and health.</p> <pre><code>mcp-standards status [OPTIONS]\n</code></pre> <p>Options: - <code>--detailed</code> - Show detailed status - <code>--json</code> - JSON output format</p> <p>Examples: <pre><code># Basic status\nmcp-standards status\n\n# Detailed status\nmcp-standards status --detailed\n\n# JSON output for scripts\nmcp-standards status --json\n</code></pre></p>"},{"location":"site/reference/cli-commands/#cache","title":"cache","text":"<p>Manage cache operations.</p> <pre><code>mcp-standards cache [SUBCOMMAND] [OPTIONS]\n</code></pre> <p>Subcommands: - <code>clear</code> - Clear cache - <code>status</code> - Show cache status - <code>warm</code> - Warm cache - <code>stats</code> - Show cache statistics</p> <p>Examples: <pre><code># Clear all cache\nmcp-standards cache clear\n\n# Show cache status\nmcp-standards cache status\n\n# Warm cache with common standards\nmcp-standards cache warm\n</code></pre></p>"},{"location":"site/reference/cli-commands/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code> - Success</li> <li><code>1</code> - General error</li> <li><code>2</code> - Invalid arguments</li> <li><code>3</code> - Configuration error</li> <li><code>4</code> - Network error</li> <li><code>5</code> - Validation failures found</li> </ul>"},{"location":"site/reference/cli-commands/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>MCP_CONFIG_FILE</code> - Configuration file path</li> <li><code>MCP_CACHE_DIR</code> - Cache directory</li> <li><code>MCP_LOG_LEVEL</code> - Logging level</li> <li><code>MCP_NO_COLOR</code> - Disable colored output</li> </ul>"},{"location":"site/reference/cli-commands/#shell-completion","title":"Shell Completion","text":"<p>Enable shell completion:</p> <pre><code># Bash\neval \"$(mcp-standards completion bash)\"\n\n# Zsh\neval \"$(mcp-standards completion zsh)\"\n\n# Fish\nmcp-standards completion fish | source\n</code></pre>"},{"location":"site/reference/cli-commands/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"site/reference/cli-commands/#batch-validation","title":"Batch Validation","text":"<pre><code># Validate multiple directories\nfind . -name \"*.py\" -exec dirname {} \\; | sort -u | xargs -I {} mcp-standards validate {}\n</code></pre>"},{"location":"site/reference/cli-commands/#ci-integration","title":"CI Integration","text":"<pre><code># GitHub Actions example\nmcp-standards validate --format sarif --output results.sarif\ngh api repos/:owner/:repo/code-scanning/sarifs --method POST --input results.sarif\n</code></pre>"},{"location":"site/reference/cli-commands/#custom-standards-development","title":"Custom Standards Development","text":"<pre><code># Test custom standard during development\nmcp-standards validate --standard ./custom-standard.yaml .\n</code></pre>"},{"location":"site/reference/config-reference/","title":"Configuration Reference","text":"<p>Complete reference for all MCP Standards Server configuration options.</p>"},{"location":"site/reference/config-reference/#configuration-file","title":"Configuration File","text":"<p>The main configuration file is <code>.mcp-standards.yml</code> in your project root.</p> <pre><code># .mcp-standards.yml\nversion: 1.0\n\nproject:\n  name: \"My Project\"\n  type: \"web\"\n  description: \"Project description\"\n\nstandards:\n  - python-best-practices\n  - security-baseline\n  - custom-team-standards\n\nvalidation:\n  severity_threshold: \"warning\"  # error, warning, info\n  fail_on_violation: true\n  parallel: true\n\n  exclude:\n    - \"vendor/\"\n    - \"node_modules/\"\n    - \"*.min.js\"\n    - \"**/__pycache__/\"\n\n  include_only:\n    - \"src/\"\n    - \"tests/\"\n\ncache:\n  enabled: true\n  ttl: 3600  # seconds\n  backend: \"redis\"\n  redis_url: \"redis://localhost:6379\"\n\nreporting:\n  formats: [\"json\", \"html\", \"sarif\"]\n  output_dir: \"reports/\"\n\nmcp:\n  server:\n    host: \"0.0.0.0\"\n    port: 8080\n\n  auth:\n    enabled: true\n    api_key_header: \"X-API-Key\"\n</code></pre>"},{"location":"site/reference/config-reference/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> <pre><code># Server configuration\nMCP_HOST=0.0.0.0\nMCP_PORT=8080\nMCP_ENV=production  # development, production\n\n# Redis configuration\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=secret\nREDIS_DB=0\n\n# Logging\nLOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR\nLOG_FORMAT=json  # json, text\n\n# Performance\nMAX_WORKERS=4\nCACHE_TTL=3600\nREQUEST_TIMEOUT=30\n\n# Security\nAPI_KEY_REQUIRED=true\nRATE_LIMIT_ENABLED=true\nRATE_LIMIT_REQUESTS=100\nRATE_LIMIT_WINDOW=60  # seconds\n</code></pre>"},{"location":"site/reference/config-reference/#cli-configuration","title":"CLI Configuration","text":"<pre><code># Global config file\n~/.mcp-standards/config.yml\n\n# Project config file\n./.mcp-standards.yml\n\n# Override with flags\nmcp-standards validate --config custom-config.yml\n</code></pre>"},{"location":"site/reference/config-reference/#cli-config-example","title":"CLI Config Example","text":"<pre><code># ~/.mcp-standards/config.yml\ndefaults:\n  output_format: \"table\"\n  color: true\n  verbose: false\n\nprofiles:\n  strict:\n    severity_threshold: \"info\"\n    fail_on_violation: true\n\n  lenient:\n    severity_threshold: \"error\"\n    fail_on_violation: false\n\naliases:\n  check: \"validate --format json\"\n  fix: \"validate --auto-fix\"\n</code></pre>"},{"location":"site/reference/config-reference/#standards-configuration","title":"Standards Configuration","text":""},{"location":"site/reference/config-reference/#standard-definition","title":"Standard Definition","text":"<pre><code># standards/my-standard.yaml\nstandard:\n  id: \"my-standard\"\n  name: \"My Standard\"\n  version: \"1.0.0\"\n  enabled: true\n\nconfig:\n  # Standard-specific configuration\n  max_line_length: 88\n  indent_size: 4\n  quote_style: \"double\"\n\nrules:\n  - id: \"line-length\"\n    enabled: true\n    config:\n      max_length: 88\n      ignore_comments: true\n</code></pre>"},{"location":"site/reference/config-reference/#rule-configuration","title":"Rule Configuration","text":"<pre><code>rules:\n  # Override specific rules\n  overrides:\n    - rule_id: \"no-console-log\"\n      severity: \"info\"  # downgrade from error\n      enabled: false\n\n    - rule_id: \"max-function-length\"\n      config:\n        max_lines: 100  # increase from default 50\n</code></pre>"},{"location":"site/reference/config-reference/#validation-configuration","title":"Validation Configuration","text":""},{"location":"site/reference/config-reference/#file-patterns","title":"File Patterns","text":"<pre><code>validation:\n  file_patterns:\n    python:\n      - \"*.py\"\n      - \"*.pyi\"\n    javascript:\n      - \"*.js\"\n      - \"*.jsx\"\n      - \"*.mjs\"\n    typescript:\n      - \"*.ts\"\n      - \"*.tsx\"\n</code></pre>"},{"location":"site/reference/config-reference/#custom-validators","title":"Custom Validators","text":"<pre><code>validators:\n  custom:\n    - module: \"myproject.validators\"\n      class: \"CustomValidator\"\n      config:\n        strict_mode: true\n</code></pre>"},{"location":"site/reference/config-reference/#cache-configuration","title":"Cache Configuration","text":""},{"location":"site/reference/config-reference/#redis-options","title":"Redis Options","text":"<pre><code>cache:\n  redis:\n    host: \"localhost\"\n    port: 6379\n    db: 0\n    password: \"secret\"\n    ssl: true\n    ssl_cert_reqs: \"required\"\n    connection_pool:\n      max_connections: 50\n      socket_timeout: 5\n      socket_connect_timeout: 5\n</code></pre>"},{"location":"site/reference/config-reference/#in-memory-cache","title":"In-Memory Cache","text":"<pre><code>cache:\n  backend: \"memory\"\n  memory:\n    max_size: 1000  # entries\n    ttl: 300  # seconds\n    eviction: \"lru\"  # lru, lfu, fifo\n</code></pre>"},{"location":"site/reference/config-reference/#security-configuration","title":"Security Configuration","text":""},{"location":"site/reference/config-reference/#authentication","title":"Authentication","text":"<pre><code>security:\n  auth:\n    providers:\n      - type: \"api_key\"\n        header: \"X-API-Key\"\n        keys:\n          - name: \"production\"\n            key: \"prod-key-hash\"\n            scopes: [\"read\", \"write\"]\n\n      - type: \"jwt\"\n        issuer: \"https://auth.example.com\"\n        audience: \"mcp-standards\"\n        algorithms: [\"RS256\"]\n</code></pre>"},{"location":"site/reference/config-reference/#rate-limiting","title":"Rate Limiting","text":"<pre><code>security:\n  rate_limit:\n    enabled: true\n    storage: \"redis\"  # redis, memory\n    rules:\n      - path: \"/api/*\"\n        limit: 100\n        window: 60  # seconds\n\n      - path: \"/api/validate\"\n        limit: 10\n        window: 60\n</code></pre>"},{"location":"site/reference/config-reference/#performance-configuration","title":"Performance Configuration","text":""},{"location":"site/reference/config-reference/#concurrency","title":"Concurrency","text":"<pre><code>performance:\n  workers: 4\n  thread_pool_size: 10\n  async_enabled: true\n\n  batching:\n    enabled: true\n    size: 100\n    timeout: 5  # seconds\n</code></pre>"},{"location":"site/reference/config-reference/#resource-limits","title":"Resource Limits","text":"<pre><code>performance:\n  limits:\n    max_file_size: 10485760  # 10MB\n    max_files_per_validation: 1000\n    max_memory_usage: 536870912  # 512MB\n    request_timeout: 30  # seconds\n</code></pre>"},{"location":"site/reference/config-reference/#logging-configuration","title":"Logging Configuration","text":"<pre><code>logging:\n  level: \"INFO\"\n  format: \"json\"\n\n  handlers:\n    - type: \"console\"\n      level: \"INFO\"\n      format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\n    - type: \"file\"\n      level: \"DEBUG\"\n      filename: \"logs/mcp-standards.log\"\n      max_bytes: 10485760  # 10MB\n      backup_count: 5\n\n    - type: \"syslog\"\n      level: \"WARNING\"\n      address: \"/dev/log\"\n      facility: \"local0\"\n</code></pre>"},{"location":"site/reference/config-reference/#integration-configuration","title":"Integration Configuration","text":""},{"location":"site/reference/config-reference/#cicd-integration","title":"CI/CD Integration","text":"<pre><code>ci:\n  github_actions:\n    enabled: true\n    annotations: true\n    status_checks: true\n\n  gitlab:\n    enabled: true\n    merge_request_comments: true\n\n  jenkins:\n    enabled: true\n    pipeline_integration: true\n</code></pre>"},{"location":"site/reference/config-reference/#ide-integration","title":"IDE Integration","text":"<pre><code>ide:\n  vscode:\n    extension_settings:\n      real_time_validation: true\n      auto_fix_on_save: false\n\n  jetbrains:\n    inspection_profile: \"mcp-standards\"\n</code></pre>"},{"location":"site/reference/config-reference/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"site/reference/config-reference/#plugins","title":"Plugins","text":"<pre><code>plugins:\n  - name: \"custom-reporter\"\n    module: \"myproject.plugins.reporter\"\n    config:\n      template: \"custom-template.html\"\n\n  - name: \"slack-notifier\"\n    module: \"mcp_slack\"\n    config:\n      webhook_url: \"${SLACK_WEBHOOK}\"\n      channel: \"#dev-standards\"\n</code></pre>"},{"location":"site/reference/config-reference/#hooks","title":"Hooks","text":"<pre><code>hooks:\n  pre_validation:\n    - command: \"git fetch origin main\"\n    - script: \"scripts/prepare-validation.py\"\n\n  post_validation:\n    - command: \"npm run lint\"\n      on_failure: \"continue\"\n</code></pre>"},{"location":"site/reference/config-reference/#configuration-precedence","title":"Configuration Precedence","text":"<ol> <li>Command line arguments</li> <li>Environment variables</li> <li>Project config file (<code>.mcp-standards.yml</code>)</li> <li>User config file (<code>~/.mcp-standards/config.yml</code>)</li> <li>System config file (<code>/etc/mcp-standards/config.yml</code>)</li> <li>Default values</li> </ol>"},{"location":"site/reference/config-reference/#validation","title":"Validation","text":"<p>Validate your configuration:</p> <pre><code># Check configuration syntax\nmcp-standards config validate\n\n# Show effective configuration\nmcp-standards config show\n\n# Test specific config file\nmcp-standards config test -f custom-config.yml\n</code></pre>"},{"location":"site/reference/config-reference/#related-documentation","title":"Related Documentation","text":"<ul> <li>Environment Variables</li> <li>Security Configuration</li> <li>CLI Commands</li> </ul>"},{"location":"site/reference/performance/","title":"Performance Reference","text":"<p>Comprehensive guide to optimizing MCP Standards Server performance.</p>"},{"location":"site/reference/performance/#performance-overview","title":"Performance Overview","text":"<p>The MCP Standards Server is designed for high performance with: - Sub-100ms response times for standard operations - Horizontal scalability - Efficient resource utilization - Intelligent caching strategies</p>"},{"location":"site/reference/performance/#performance-metrics","title":"Performance Metrics","text":""},{"location":"site/reference/performance/#key-metrics","title":"Key Metrics","text":"Metric Target Description Response Time (p50) &lt;50ms Median response time Response Time (p95) &lt;100ms 95th percentile Response Time (p99) &lt;200ms 99th percentile Throughput &gt;1000 req/s Requests per second CPU Usage &lt;70% Average CPU utilization Memory Usage &lt;512MB Process memory Cache Hit Rate &gt;90% L1+L2 cache hits"},{"location":"site/reference/performance/#monitoring","title":"Monitoring","text":"<pre><code>from src.core.performance.metrics import PerformanceMonitor\n\nmonitor = PerformanceMonitor()\n\n# Track operation\nwith monitor.track(\"validation\"):\n    result = validate_code(code)\n\n# Get metrics\nmetrics = monitor.get_metrics()\nprint(f\"Average time: {metrics.avg_time}ms\")\nprint(f\"Operations/sec: {metrics.throughput}\")\n</code></pre>"},{"location":"site/reference/performance/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"site/reference/performance/#1-caching-optimization","title":"1. Caching Optimization","text":"<pre><code># Aggressive caching configuration\ncache:\n  l1:\n    max_size: 50000\n    ttl: 600\n    preload: true\n\n  l2:\n    pipeline_size: 100\n    compression: true\n\n  warming:\n    parallel: true\n    batch_size: 1000\n</code></pre>"},{"location":"site/reference/performance/#2-database-optimization","title":"2. Database Optimization","text":"<pre><code># Use connection pooling\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n    \"postgresql://localhost/mcp\",\n    pool_size=20,\n    max_overflow=40,\n    pool_pre_ping=True,\n    pool_recycle=3600\n)\n\n# Batch operations\ndef bulk_insert_standards(standards):\n    with engine.begin() as conn:\n        conn.execute(\n            insert(StandardsTable),\n            standards\n        )\n</code></pre>"},{"location":"site/reference/performance/#3-async-operations","title":"3. Async Operations","text":"<pre><code>import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass AsyncValidator:\n    def __init__(self):\n        self.executor = ThreadPoolExecutor(max_workers=10)\n\n    async def validate_files(self, files):\n        \"\"\"Validate files concurrently.\"\"\"\n        tasks = [\n            self.validate_file(file)\n            for file in files\n        ]\n        return await asyncio.gather(*tasks)\n\n    async def validate_file(self, file):\n        \"\"\"Validate single file asynchronously.\"\"\"\n        loop = asyncio.get_event_loop()\n        return await loop.run_in_executor(\n            self.executor,\n            self._validate_sync,\n            file\n        )\n</code></pre>"},{"location":"site/reference/performance/#code-optimization","title":"Code Optimization","text":""},{"location":"site/reference/performance/#1-efficient-pattern-matching","title":"1. Efficient Pattern Matching","text":"<pre><code># Bad - Multiple regex compilations\ndef check_patterns(code):\n    if re.search(r'TODO', code):\n        violations.append('todo')\n    if re.search(r'FIXME', code):\n        violations.append('fixme')\n\n# Good - Compile once, reuse\nclass PatternChecker:\n    def __init__(self):\n        self.patterns = {\n            'todo': re.compile(r'TODO'),\n            'fixme': re.compile(r'FIXME')\n        }\n\n    def check_patterns(self, code):\n        return [\n            name for name, pattern in self.patterns.items()\n            if pattern.search(code)\n        ]\n</code></pre>"},{"location":"site/reference/performance/#2-memory-efficient-processing","title":"2. Memory-Efficient Processing","text":"<pre><code># Bad - Load entire file\ndef process_large_file(path):\n    content = open(path).read()\n    return process(content)\n\n# Good - Stream processing\ndef process_large_file(path):\n    results = []\n    with open(path) as f:\n        for chunk in iter(lambda: f.read(4096), ''):\n            results.extend(process_chunk(chunk))\n    return results\n</code></pre>"},{"location":"site/reference/performance/#3-lazy-loading","title":"3. Lazy Loading","text":"<pre><code>class StandardsRepository:\n    def __init__(self):\n        self._standards = None\n        self._index = None\n\n    @property\n    def standards(self):\n        \"\"\"Lazy load standards.\"\"\"\n        if self._standards is None:\n            self._standards = self._load_standards()\n        return self._standards\n\n    @property\n    def search_index(self):\n        \"\"\"Lazy load search index.\"\"\"\n        if self._index is None:\n            self._index = self._build_index()\n        return self._index\n</code></pre>"},{"location":"site/reference/performance/#profiling","title":"Profiling","text":""},{"location":"site/reference/performance/#cpu-profiling","title":"CPU Profiling","text":"<pre><code>import cProfile\nimport pstats\n\ndef profile_operation():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # Operation to profile\n    validate_directory(\"src/\")\n\n    profiler.disable()\n\n    # Analysis\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats(20)  # Top 20 functions\n</code></pre>"},{"location":"site/reference/performance/#memory-profiling","title":"Memory Profiling","text":"<pre><code>from memory_profiler import profile\n\n@profile\ndef memory_intensive_operation():\n    # Track memory usage line by line\n    large_data = load_standards()  # +50MB\n    processed = process_data(large_data)  # +30MB\n    return compress(processed)  # -60MB\n</code></pre>"},{"location":"site/reference/performance/#line-profiling","title":"Line Profiling","text":"<pre><code>from line_profiler import LineProfiler\n\ndef profile_critical_path():\n    lp = LineProfiler()\n    lp.add_function(critical_function)\n\n    # Run with profiling\n    lp.enable()\n    result = critical_function()\n    lp.disable()\n\n    # Show results\n    lp.print_stats()\n</code></pre>"},{"location":"site/reference/performance/#benchmarking","title":"Benchmarking","text":""},{"location":"site/reference/performance/#micro-benchmarks","title":"Micro-benchmarks","text":"<pre><code>import timeit\n\n# Compare implementations\ndef benchmark_implementations():\n    implementations = {\n        'regex': lambda: regex_validate(code),\n        'ast': lambda: ast_validate(code),\n        'hybrid': lambda: hybrid_validate(code)\n    }\n\n    for name, func in implementations.items():\n        time = timeit.timeit(func, number=1000)\n        print(f\"{name}: {time:.4f}s\")\n</code></pre>"},{"location":"site/reference/performance/#load-testing","title":"Load Testing","text":"<pre><code># locustfile.py for load testing\nfrom locust import HttpUser, task, between\n\nclass MCPUser(HttpUser):\n    wait_time = between(1, 3)\n\n    @task(3)\n    def validate_code(self):\n        self.client.post(\"/api/validate\", json={\n            \"code\": \"def test(): pass\",\n            \"standard\": \"python-best-practices\"\n        })\n\n    @task(1)\n    def get_standards(self):\n        self.client.get(\"/api/standards\")\n</code></pre>"},{"location":"site/reference/performance/#configuration-tuning","title":"Configuration Tuning","text":""},{"location":"site/reference/performance/#high-performance-configuration","title":"High-Performance Configuration","text":"<pre><code>performance:\n  # Worker configuration\n  workers: ${CPU_COUNT}\n  threads_per_worker: 4\n\n  # Request handling\n  request_timeout: 30\n  keepalive_timeout: 5\n\n  # Resource limits\n  max_request_size: 10485760  # 10MB\n  max_memory_per_request: 104857600  # 100MB\n\n  # Optimization flags\n  enable_jit: true\n  enable_async: true\n  enable_caching: true\n\n  # Garbage collection\n  gc:\n    threshold0: 700\n    threshold1: 10\n    threshold2: 10\n</code></pre>"},{"location":"site/reference/performance/#database-performance","title":"Database Performance","text":"<pre><code>database:\n  # Connection pool\n  pool_size: 20\n  max_overflow: 40\n  pool_timeout: 30\n  pool_recycle: 3600\n\n  # Query optimization\n  echo: false\n  statement_timeout: 5000\n\n  # Indexes\n  auto_create_indexes: true\n  index_cache_size: 100000\n</code></pre>"},{"location":"site/reference/performance/#scaling-strategies","title":"Scaling Strategies","text":""},{"location":"site/reference/performance/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  mcp-server:\n    image: mcp-standards-server\n    deploy:\n      replicas: 4\n      resources:\n        limits:\n          cpus: '2'\n          memory: 1G\n    environment:\n      - REDIS_URL=redis://redis:6379\n      - DATABASE_URL=postgresql://db:5432/mcp\n\n  nginx:\n    image: nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n      - mcp-server\n</code></pre>"},{"location":"site/reference/performance/#vertical-scaling","title":"Vertical Scaling","text":"<pre><code># Optimize for multi-core\nimport multiprocessing\n\ndef parallel_validation(files):\n    cpu_count = multiprocessing.cpu_count()\n\n    with multiprocessing.Pool(cpu_count) as pool:\n        results = pool.map(validate_file, files)\n\n    return results\n</code></pre>"},{"location":"site/reference/performance/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"site/reference/performance/#1-minimize-io","title":"1. Minimize I/O","text":"<pre><code># Bad - Multiple file reads\nfor standard_id in standard_ids:\n    with open(f\"standards/{standard_id}.yaml\") as f:\n        standards.append(yaml.load(f))\n\n# Good - Batch read\nall_standards = load_all_standards()  # Single I/O\nstandards = [all_standards[sid] for sid in standard_ids]\n</code></pre>"},{"location":"site/reference/performance/#2-use-appropriate-data-structures","title":"2. Use Appropriate Data Structures","text":"<pre><code># Bad - O(n) lookup\nviolations = []\nfor rule in rules:\n    if rule.id in violations:\n        continue\n\n# Good - O(1) lookup\nviolations = set()\nfor rule in rules:\n    if rule.id in violations:\n        continue\n</code></pre>"},{"location":"site/reference/performance/#3-avoid-premature-optimization","title":"3. Avoid Premature Optimization","text":"<pre><code># Profile first\nwith profile_context():\n    result = operation()\n\n# Then optimize hot paths only\nif is_hot_path:\n    result = optimized_operation()\nelse:\n    result = simple_operation()\n</code></pre>"},{"location":"site/reference/performance/#troubleshooting-performance","title":"Troubleshooting Performance","text":""},{"location":"site/reference/performance/#common-issues","title":"Common Issues","text":"<ol> <li>Slow Response Times</li> <li>Check cache hit rates</li> <li>Profile database queries</li> <li> <p>Review async operation usage</p> </li> <li> <p>High Memory Usage</p> </li> <li>Implement pagination</li> <li>Use generators for large datasets</li> <li> <p>Check for memory leaks</p> </li> <li> <p>CPU Bottlenecks</p> </li> <li>Parallelize CPU-intensive tasks</li> <li>Optimize regex patterns</li> <li>Consider caching computed results</li> </ol>"},{"location":"site/reference/performance/#performance-debugging","title":"Performance Debugging","text":"<pre><code>import logging\nimport time\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass PerformanceDebugger:\n    def __init__(self):\n        self.timings = {}\n\n    def track(self, operation):\n        start = time.time()\n        yield\n        duration = time.time() - start\n\n        self.timings[operation] = duration\n\n        if duration &gt; 0.1:  # Log slow operations\n            logging.warning(\n                f\"Slow operation: {operation} took {duration:.3f}s\"\n            )\n</code></pre>"},{"location":"site/reference/performance/#related-documentation","title":"Related Documentation","text":"<ul> <li>Caching Reference</li> <li>Benchmarking Guide</li> <li>Monitoring Setup</li> </ul>"},{"location":"site/reference/standards-format/","title":"Standards Format Reference","text":"<p>This document provides a complete reference for the MCP Standards file format.</p>"},{"location":"site/reference/standards-format/#overview","title":"Overview","text":"<p>Standards are defined in YAML or JSON format. YAML is preferred for readability.</p>"},{"location":"site/reference/standards-format/#complete-format-specification","title":"Complete Format Specification","text":"<pre><code># Complete standard definition example\nstandard:\n  id: \"comprehensive-example\"          # Required: Unique identifier\n  name: \"Comprehensive Example\"        # Required: Human-readable name\n  version: \"2.1.0\"                    # Required: Semantic version\n  category: \"coding\"                  # Required: Category\n  description: |                      # Required: Description\n    This is a comprehensive example showing all possible fields\n    and configurations for an MCP standard.\n  enabled: true                       # Optional: Default true\n  experimental: false                 # Optional: Mark as experimental\n  deprecated: false                   # Optional: Mark as deprecated\n  deprecation_message: \"\"             # Optional: Why deprecated\n\nmetadata:\n  author: \"Jane Doe\"                  # Recommended: Author name\n  email: \"jane@example.com\"          # Optional: Contact email\n  organization: \"ACME Corp\"          # Optional: Organization\n  created: \"2024-01-01\"              # Recommended: Creation date\n  updated: \"2024-01-20\"              # Recommended: Last update\n  license: \"MIT\"                     # Optional: License\n  tags:                              # Recommended: Tags for search\n    - \"best-practices\"\n    - \"security\"\n    - \"performance\"\n  references:                        # Optional: External references\n    - url: \"https://example.com/guide\"\n      title: \"Official Guide\"\n    - url: \"https://standards.org/xyz\"\n      title: \"Industry Standard XYZ\"\n\ndependencies:                        # Optional: Required standards\n  - id: \"base-standard\"\n    version: \"&gt;=1.0.0\"\n  - id: \"security-baseline\"\n    version: \"~2.0.0\"\n\nconflicts:                           # Optional: Conflicting standards\n  - id: \"legacy-standard\"\n    reason: \"Incompatible rule sets\"\n\nextends:                             # Optional: Inherit from standard\n  - \"parent-standard\"\n  - \"mixin-standard\"\n\napplicability:                       # Required: When to apply\n  languages:                         # At least one required\n    - \"python\"\n    - \"javascript\"\n  versions:                          # Optional: Language versions\n    python: [\"3.9\", \"3.10\", \"3.11\", \"3.12\"]\n    javascript: [\"ES2020\", \"ES2021\", \"ES2022\"]\n  project_types:                     # Recommended\n    - \"web\"\n    - \"api\"\n    - \"cli\"\n    - \"library\"\n  frameworks:                        # Optional\n    - \"django\"\n    - \"fastapi\"\n    - \"flask\"\n  environments:                      # Optional\n    - \"production\"\n    - \"development\"\n  file_patterns:                     # Optional: Custom patterns\n    - \"src/**/*.py\"\n    - \"!**/*_test.py\"\n  size_thresholds:                   # Optional\n    min_lines: 10\n    max_lines: 10000\n\ncompliance:                          # Optional: Compliance mapping\n  frameworks:\n    - framework: \"NIST-800-53\"\n      controls:\n        - \"AC-2\"\n        - \"AC-3\"\n        - \"AU-2\"\n    - framework: \"ISO-27001\"\n      controls:\n        - \"A.9.1.1\"\n        - \"A.9.4.1\"\n  certifications:\n    - \"SOC2-Type2\"\n    - \"PCI-DSS\"\n\nrules:                               # Required: Validation rules\n  - id: \"rule-001\"                   # Required: Unique ID\n    name: \"Descriptive Rule Name\"    # Required: Name\n    description: |                   # Required: Description\n      Detailed description of what this rule checks\n      and why it's important.\n    category: \"style\"                # Optional: Rule category\n    severity: \"error\"                # Required: error/warning/info\n    enabled: true                    # Optional: Default true\n    tags: [\"security\", \"owasp\"]      # Optional: Rule tags\n\n    # Pattern-based rule\n    type: \"pattern\"                  # Rule type\n    pattern: \"TODO|FIXME|XXX\"        # Regex pattern\n    message: \"Remove TODO comments\"   # Error message\n\n    # Advanced pattern with captures\n    advanced_pattern:\n      regex: \"password\\\\s*=\\\\s*[\\\"'](.+?)[\\\"']\"\n      captures:\n        - name: \"password\"\n          index: 1\n      message: \"Hardcoded password: {password}\"\n\n    # AST-based rule\n    ast_pattern:\n      type: \"function_def\"\n      conditions:\n        - \"len(body) &gt; 50\"\n        - \"complexity &gt; 10\"\n\n    # Custom validator\n    validator:\n      module: \"validators.custom\"\n      class: \"CustomRuleValidator\"\n      method: \"validate\"\n\n    # Configuration\n    config:\n      max_length: 100\n      ignore_comments: true\n      exceptions: [\"test_*\", \"*_spec.py\"]\n\n    # Fix suggestion\n    fix:\n      type: \"replace\"                # replace/delete/insert\n      suggestion: \"Use logging instead\"\n      auto_fixable: true\n      replacement_template: \"logger.debug('{message}')\"\n\n    # Examples for this rule\n    examples:\n      good:\n        - code: |\n            logger.debug(\"Debug information\")\n          description: \"Use proper logging\"\n      bad:\n        - code: |\n            # TODO: Fix this later\n          description: \"TODO comment\"\n\n  - id: \"rule-002\"\n    name: \"Complex Rule Example\"\n    description: \"Shows advanced rule features\"\n    severity: \"warning\"\n\n    # Conditional application\n    conditions:\n      - \"file.is_test == false\"\n      - \"file.size &gt; 1000\"\n\n    # Multiple validators\n    validators:\n      - type: \"pattern\"\n        pattern: \"pattern1\"\n      - type: \"ast\"\n        query: \"//FunctionDef[...]\"\n\n    # Context-aware message\n    message_template: |\n      {rule_name} violation in {file}:{line}\n      Found: {found}\n      Expected: {expected}\n\n# Global rule configuration\nrule_config:\n  default_severity: \"warning\"\n  fail_fast: false\n  parallel_execution: true\n  ignore_generated_files: true\n\n# Validation behavior\nvalidation:\n  pre_processors:                    # Optional: Before validation\n    - \"formatters.normalize_lineendings\"\n    - \"formatters.expand_tabs\"\n\n  post_processors:                   # Optional: After validation\n    - \"reporters.summary\"\n    - \"reporters.junit\"\n\n  options:\n    stop_on_first_error: false\n    report_ignored_files: true\n    include_suggestions: true\n\n# Code examples\nexamples:                            # Recommended: Usage examples\n  description: \"Examples showing standard compliance\"\n\n  good:                              # Compliant examples\n    - name: \"Well-structured function\"\n      description: \"Shows proper function structure\"\n      language: \"python\"\n      code: |\n        def calculate_total(items: List[Item]) -&gt; Decimal:\n            \"\"\"Calculate total price of items.\n\n            Args:\n                items: List of items to calculate\n\n            Returns:\n                Total price as Decimal\n            \"\"\"\n            if not items:\n                return Decimal('0.00')\n\n            return sum(item.price for item in items)\n      highlights:                    # Optional: Highlight lines\n        - lines: [1]\n          message: \"Type hints\"\n        - lines: [2-8]\n          message: \"Docstring\"\n\n  bad:                               # Non-compliant examples\n    - name: \"Poor function structure\"\n      description: \"Multiple violations\"\n      language: \"python\"\n      code: |\n        def calc(i):\n            t = 0\n            for x in i: t += x.price\n            return t\n      violations:\n        - line: 1\n          rule: \"type-hints-required\"\n          message: \"Missing type hints\"\n        - line: 1\n          rule: \"descriptive-names\"\n          message: \"Non-descriptive function name\"\n        - line: 2-4\n          rule: \"no-single-letter-vars\"\n          message: \"Single letter variables\"\n\n# Custom sections\ncustom_sections:                     # Optional: Extended metadata\n  performance_impact: \"low\"\n  review_required: true\n  automation_level: \"full\"\n\n  team_config:\n    owner: \"platform-team\"\n    reviewers: [\"security-team\", \"qa-team\"]\n    sla_hours: 24\n\n# Metrics and scoring\nmetrics:                             # Optional: Quality metrics\n  thresholds:\n    complexity: 10\n    coverage: 80\n    duplication: 5\n\n  scoring:\n    algorithm: \"weighted\"\n    weights:\n      security: 0.4\n      maintainability: 0.3\n      performance: 0.3\n\n# Integration configuration\nintegrations:                        # Optional: Tool integrations\n  github:\n    status_checks: true\n    pr_comments: true\n    annotations: true\n\n  slack:\n    webhook: \"${SLACK_WEBHOOK}\"\n    channels: [\"#dev-standards\"]\n    notify_on: [\"error\", \"warning\"]\n</code></pre>"},{"location":"site/reference/standards-format/#minimal-valid-standard","title":"Minimal Valid Standard","text":"<pre><code>standard:\n  id: \"minimal-example\"\n  name: \"Minimal Example\"\n  version: \"1.0.0\"\n  category: \"coding\"\n  description: \"Minimal valid standard\"\n\napplicability:\n  languages: [\"python\"]\n\nrules:\n  - id: \"rule-1\"\n    name: \"Example Rule\"\n    description: \"Example rule description\"\n    severity: \"warning\"\n    pattern: \"TODO\"\n    message: \"Found TODO\"\n</code></pre>"},{"location":"site/reference/standards-format/#category-values","title":"Category Values","text":"<ul> <li><code>coding</code> - General coding standards</li> <li><code>security</code> - Security-focused standards</li> <li><code>performance</code> - Performance optimization</li> <li><code>testing</code> - Testing standards</li> <li><code>documentation</code> - Documentation standards</li> <li><code>architecture</code> - Architecture patterns</li> <li><code>process</code> - Development process standards</li> </ul>"},{"location":"site/reference/standards-format/#severity-levels","title":"Severity Levels","text":"<ul> <li><code>error</code> - Must fix, blocks deployment</li> <li><code>warning</code> - Should fix, quality issue</li> <li><code>info</code> - Consider fixing, suggestion</li> </ul>"},{"location":"site/reference/standards-format/#version-constraints","title":"Version Constraints","text":"<p>Uses semantic versioning with constraints: - <code>1.0.0</code> - Exact version - <code>&gt;=1.0.0</code> - Minimum version - <code>~1.2.0</code> - Compatible versions (1.2.x) - <code>^1.2.3</code> - Compatible minor (1.x.x where x &gt;= 2.3) - <code>&gt;1.0.0,&lt;2.0.0</code> - Version range</p>"},{"location":"site/reference/standards-format/#file-pattern-syntax","title":"File Pattern Syntax","text":"<p>Uses gitignore-style patterns: - <code>*.py</code> - All Python files - <code>src/**/*.js</code> - All JS files under src/ - <code>!test_*.py</code> - Exclude test files - <code>{src,lib}/**/*</code> - Multiple directories</p>"},{"location":"site/reference/standards-format/#related-documentation","title":"Related Documentation","text":"<ul> <li>Creating Standards Guide</li> <li>Validation Rules</li> <li>Standards Examples</li> </ul>"},{"location":"site/reference/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues and their solutions.</p>"},{"location":"site/reference/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"site/reference/troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Problem: Installation fails with Python version error.</p> <p>Solution: <pre><code># Check Python version\npython --version\n\n# MCP Standards Server requires Python 3.11+\n# Install compatible Python version\npyenv install 3.11.0\npyenv global 3.11.0\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#dependencies-installation-failed","title":"Dependencies Installation Failed","text":"<p>Problem: <code>pip install</code> fails with dependency conflicts.</p> <p>Solution: <pre><code># Clean install with virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install --upgrade pip\npip install mcp-standards-server\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#server-issues","title":"Server Issues","text":""},{"location":"site/reference/troubleshooting/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: <code>[Errno 48] Address already in use</code></p> <p>Solution: <pre><code># Find process using port 8080\nlsof -i :8080\n\n# Kill the process\nkill -9 &lt;PID&gt;\n\n# Or use different port\nmcp-standards serve --port 8081\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#permission-denied","title":"Permission Denied","text":"<p>Problem: <code>Permission denied</code> when accessing cache directory.</p> <p>Solution: <pre><code># Fix permissions\nsudo chown -R $USER ~/.mcp-standards/\nchmod 755 ~/.mcp-standards/cache\n\n# Or use custom cache directory\nmcp-standards serve --cache-dir ./cache\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Problem: Server runs out of memory.</p> <p>Solution: <pre><code># Limit memory usage\nexport MCP_MAX_MEMORY=1024  # MB\nmcp-standards serve\n\n# Or clear cache\nmcp-standards cache clear\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"site/reference/troubleshooting/#invalid-yaml-syntax","title":"Invalid YAML Syntax","text":"<p>Problem: Configuration file parsing error.</p> <p>Solution: <pre><code># Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('~/.mcp-standards/config.yaml'))\"\n\n# Reset to default configuration\nmcp-standards config init --force\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#redis-connection-failed","title":"Redis Connection Failed","text":"<p>Problem: Cannot connect to Redis server.</p> <p>Solution: <pre><code># Check Redis status\nredis-cli ping\n\n# Start Redis (macOS with Homebrew)\nbrew services start redis\n\n# Start Redis (Linux with systemd)\nsudo systemctl start redis\n\n# Disable Redis in config if not needed\nmcp-standards config set standards.redis.enabled false\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#standards-sync-issues","title":"Standards Sync Issues","text":""},{"location":"site/reference/troubleshooting/#network-connection-failed","title":"Network Connection Failed","text":"<p>Problem: Cannot download standards from repository.</p> <p>Solution: <pre><code># Check network connectivity\ncurl -I https://github.com/williamzujkowski/standards\n\n# Use proxy if needed\nexport HTTPS_PROXY=http://proxy.company.com:8080\nmcp-standards sync\n\n# Use local standards directory\nmcp-standards config set standards.local_directory /path/to/local/standards\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#git-authentication-failed","title":"Git Authentication Failed","text":"<p>Problem: Cannot access private standards repository.</p> <p>Solution: <pre><code># Set up SSH key\nssh-keygen -t ed25519 -C \"your.email@example.com\"\ncat ~/.ssh/id_ed25519.pub  # Add to GitHub\n\n# Or use personal access token\nexport GITHUB_TOKEN=your_token_here\nmcp-standards sync\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#standards-format-error","title":"Standards Format Error","text":"<p>Problem: Invalid standards file format.</p> <p>Solution: <pre><code># Validate standards format\nmcp-standards validate-standards ./standards/\n\n# Force resync to get latest format\nmcp-standards sync --force\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#validation-issues","title":"Validation Issues","text":""},{"location":"site/reference/troubleshooting/#no-standards-found","title":"No Standards Found","text":"<p>Problem: <code>No applicable standards found for project</code>.</p> <p>Solution: <pre><code># Check available standards\nmcp-standards query list\n\n# Sync standards first\nmcp-standards sync\n\n# Manually specify standards\nmcp-standards validate --standard python-pep8 .\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#language-detection-failed","title":"Language Detection Failed","text":"<p>Problem: Cannot detect project language automatically.</p> <p>Solution: <pre><code># Manually specify language\nmcp-standards validate --language python .\n\n# Check project structure\nfind . -name \"*.py\" -o -name \"*.js\" -o -name \"*.go\" | head -10\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#performance-issues","title":"Performance Issues","text":"<p>Problem: Validation is very slow.</p> <p>Solution: <pre><code># Use parallel processing\nmcp-standards validate --workers 4 .\n\n# Exclude large directories\necho \"node_modules/\" &gt;&gt; .mcpignore\necho \"*.min.js\" &gt;&gt; .mcpignore\n\n# Use incremental validation\nmcp-standards validate --incremental .\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#api-and-integration-issues","title":"API and Integration Issues","text":""},{"location":"site/reference/troubleshooting/#mcp-protocol-errors","title":"MCP Protocol Errors","text":"<p>Problem: MCP client cannot connect to server.</p> <p>Solution: <pre><code># Check server status\ncurl http://localhost:8080/health\n\n# Enable CORS for web clients\nmcp-standards config set server.enable_cors true\n\n# Check server logs\ntail -f ~/.mcp-standards/mcp-server.log\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#ide-integration-failed","title":"IDE Integration Failed","text":"<p>Problem: VS Code extension not working.</p> <p>Solution: 1. Check extension is installed and enabled 2. Verify server is running: <code>mcp-standards status</code> 3. Check extension logs in VS Code Developer Tools 4. Restart VS Code and server</p>"},{"location":"site/reference/troubleshooting/#cicd-integration-issues","title":"CI/CD Integration Issues","text":"<p>Problem: GitHub Actions workflow fails.</p> <p>Solution: <pre><code># Add to GitHub Actions workflow\n- name: Setup MCP Standards\n  run: |\n    pip install mcp-standards-server\n    mcp-standards sync\n\n- name: Validate Code\n  run: |\n    mcp-standards validate --format sarif --output results.sarif\n  continue-on-error: true\n</code></pre></p>"},{"location":"site/reference/troubleshooting/#logging-and-debugging","title":"Logging and Debugging","text":""},{"location":"site/reference/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Temporary debug mode\nmcp-standards --verbose serve\n\n# Persistent debug configuration\nmcp-standards config set logging.level DEBUG\n</code></pre>"},{"location":"site/reference/troubleshooting/#log-file-locations","title":"Log File Locations","text":"<ul> <li>Server logs: <code>~/.mcp-standards/mcp-server.log</code></li> <li>Validation logs: <code>~/.mcp-standards/validation.log</code></li> <li>Sync logs: <code>~/.mcp-standards/sync.log</code></li> </ul>"},{"location":"site/reference/troubleshooting/#collect-diagnostic-information","title":"Collect Diagnostic Information","text":"<pre><code># Generate diagnostic report\nmcp-standards diagnostic &gt; diagnostic-report.txt\n\n# Include in bug reports:\n# - OS and Python version\n# - Configuration file\n# - Recent log entries\n# - Steps to reproduce\n</code></pre>"},{"location":"site/reference/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"site/reference/troubleshooting/#cache-optimization","title":"Cache Optimization","text":"<pre><code># Warm cache for common standards\nmcp-standards cache warm\n\n# Monitor cache hit rate\nmcp-standards cache stats\n\n# Increase cache size\nmcp-standards config set standards.max_cache_size 2GB\n</code></pre>"},{"location":"site/reference/troubleshooting/#memory-optimization","title":"Memory Optimization","text":"<pre><code># Limit concurrent validations\nmcp-standards config set performance.max_workers 2\n\n# Enable garbage collection tuning\nmcp-standards config set performance.gc_threshold 0.8\n</code></pre>"},{"location":"site/reference/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"site/reference/troubleshooting/#community-support","title":"Community Support","text":"<ul> <li>\ud83d\udcac Discord Community</li> <li>\ud83d\udc1b GitHub Issues</li> <li>\ud83d\udcda Documentation</li> </ul>"},{"location":"site/reference/troubleshooting/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, please include:</p> <ol> <li>MCP Standards Server version: <code>mcp-standards --version</code></li> <li>Operating system and Python version</li> <li>Complete error message</li> <li>Steps to reproduce</li> <li>Configuration file (remove sensitive data)</li> <li>Relevant log entries</li> </ol>"},{"location":"site/reference/troubleshooting/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome! Please:</p> <ol> <li>Check existing issues first</li> <li>Describe the use case</li> <li>Provide implementation ideas if possible</li> <li>Consider contributing the feature</li> </ol> <p>Still having issues? Join our Discord community for real-time help!</p>"}]}