# MCP Standards Server Environment Configuration
# Copy this file to .env and update values as needed
# All variables have sensible defaults if not specified

# ============================================
# Core Application Settings
# ============================================

# HTTP Server Configuration
HTTP_HOST=127.0.0.1
HTTP_PORT=8080

# Application Paths
DATA_DIR=./data
MCP_STANDARDS_DATA_DIR=./data/standards
MCP_CONFIG_PATH=./config/mcp_config.yaml

# Logging Configuration
LOG_LEVEL=INFO  # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL

# Feature Flags
HTTP_ONLY=false  # Set to true to run only HTTP server without MCP
MCP_DISABLE_SEARCH=false  # Set to true to disable semantic search features

# ============================================
# Authentication & Security
# ============================================

# Authentication Settings
MCP_AUTH_ENABLED=false  # Enable authentication for MCP tools
MCP_JWT_SECRET=your-secret-key-here  # Change this in production!

# Security Settings
MCP_MASK_ERRORS=false  # Mask error details in production

# ============================================
# External Services
# ============================================

# GitHub Integration
GITHUB_TOKEN=  # Optional: GitHub personal access token for syncing standards

# Redis Cache Configuration
REDIS_URL=redis://localhost:6379/0  # Redis connection URL

# ChromaDB Vector Database
CHROMADB_URL=http://localhost:8000  # ChromaDB server URL

# ============================================
# Web Application Settings
# ============================================

# Flask/Web App Configuration
SECRET_KEY=your-secret-key-here  # Change this in production!
DATABASE_URL=sqlite:///./data/app.db  # Database connection string

# React Frontend Configuration
REACT_APP_API_URL=http://localhost:8080  # API endpoint for frontend
NODE_ENV=development  # Options: development, production
GENERATE_SOURCEMAP=false  # Set to true for debugging

# ============================================
# Docker/Container Settings
# ============================================

# Python Optimization (Used in Dockerfile)
PYTHONDONTWRITEBYTECODE=1
PYTHONUNBUFFERED=1
PYTHONPATH=/app/src

# Package Management
PIP_NO_CACHE_DIR=1
PIP_DISABLE_PIP_VERSION_CHECK=1

# ============================================
# Monitoring & Observability
# ============================================

# Prometheus Metrics
PROMETHEUS_PORT=9090  # Prometheus server port

# Grafana Dashboard
GRAFANA_PORT=3000  # Grafana dashboard port
GRAFANA_ADMIN_PASSWORD=admin  # Change this in production!

# ============================================
# Development Settings
# ============================================

# Test Environment
TEST_MODE=false  # Enable test mode for CI/CD
CI=false  # Set by CI systems automatically

# Performance Tuning
MAX_WORKERS=4  # Number of worker processes
REQUEST_TIMEOUT=30  # Request timeout in seconds

# ============================================
# Security Notes
# ============================================
# 1. Never commit the actual .env file to version control
# 2. Always use strong, unique values for secret keys in production
# 3. Rotate secrets regularly
# 4. Use environment-specific .env files (.env.development, .env.production)
# 5. Consider using a secrets management service for production

# ============================================
# Quick Start
# ============================================
# 1. Copy this file: cp .env.example .env
# 2. Update values as needed for your environment
# 3. For production, ensure all secrets are changed
# 4. Run the application: python -m src.main